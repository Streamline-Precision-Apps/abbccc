
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TascoMaterialTypes` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TascoMaterialTypes
 * 
 */
export type TascoMaterialTypesModel = runtime.Types.Result.DefaultSelection<Prisma.$TascoMaterialTypesPayload>

export type AggregateTascoMaterialTypes = {
  _count: TascoMaterialTypesCountAggregateOutputType | null
  _min: TascoMaterialTypesMinAggregateOutputType | null
  _max: TascoMaterialTypesMaxAggregateOutputType | null
}

export type TascoMaterialTypesMinAggregateOutputType = {
  id: string | null
  name: string | null
}

export type TascoMaterialTypesMaxAggregateOutputType = {
  id: string | null
  name: string | null
}

export type TascoMaterialTypesCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type TascoMaterialTypesMinAggregateInputType = {
  id?: true
  name?: true
}

export type TascoMaterialTypesMaxAggregateInputType = {
  id?: true
  name?: true
}

export type TascoMaterialTypesCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type TascoMaterialTypesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TascoMaterialTypes to aggregate.
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoMaterialTypes to fetch.
   */
  orderBy?: Prisma.TascoMaterialTypesOrderByWithRelationInput | Prisma.TascoMaterialTypesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TascoMaterialTypesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoMaterialTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoMaterialTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TascoMaterialTypes
  **/
  _count?: true | TascoMaterialTypesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TascoMaterialTypesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TascoMaterialTypesMaxAggregateInputType
}

export type GetTascoMaterialTypesAggregateType<T extends TascoMaterialTypesAggregateArgs> = {
      [P in keyof T & keyof AggregateTascoMaterialTypes]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTascoMaterialTypes[P]>
    : Prisma.GetScalarType<T[P], AggregateTascoMaterialTypes[P]>
}




export type TascoMaterialTypesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TascoMaterialTypesWhereInput
  orderBy?: Prisma.TascoMaterialTypesOrderByWithAggregationInput | Prisma.TascoMaterialTypesOrderByWithAggregationInput[]
  by: Prisma.TascoMaterialTypesScalarFieldEnum[] | Prisma.TascoMaterialTypesScalarFieldEnum
  having?: Prisma.TascoMaterialTypesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TascoMaterialTypesCountAggregateInputType | true
  _min?: TascoMaterialTypesMinAggregateInputType
  _max?: TascoMaterialTypesMaxAggregateInputType
}

export type TascoMaterialTypesGroupByOutputType = {
  id: string
  name: string
  _count: TascoMaterialTypesCountAggregateOutputType | null
  _min: TascoMaterialTypesMinAggregateOutputType | null
  _max: TascoMaterialTypesMaxAggregateOutputType | null
}

type GetTascoMaterialTypesGroupByPayload<T extends TascoMaterialTypesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TascoMaterialTypesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TascoMaterialTypesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TascoMaterialTypesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TascoMaterialTypesGroupByOutputType[P]>
      }
    >
  >



export type TascoMaterialTypesWhereInput = {
  AND?: Prisma.TascoMaterialTypesWhereInput | Prisma.TascoMaterialTypesWhereInput[]
  OR?: Prisma.TascoMaterialTypesWhereInput[]
  NOT?: Prisma.TascoMaterialTypesWhereInput | Prisma.TascoMaterialTypesWhereInput[]
  id?: Prisma.StringFilter<"TascoMaterialTypes"> | string
  name?: Prisma.StringFilter<"TascoMaterialTypes"> | string
  TascoLog?: Prisma.TascoLogListRelationFilter
}

export type TascoMaterialTypesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  TascoLog?: Prisma.TascoLogOrderByRelationAggregateInput
}

export type TascoMaterialTypesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.TascoMaterialTypesWhereInput | Prisma.TascoMaterialTypesWhereInput[]
  OR?: Prisma.TascoMaterialTypesWhereInput[]
  NOT?: Prisma.TascoMaterialTypesWhereInput | Prisma.TascoMaterialTypesWhereInput[]
  TascoLog?: Prisma.TascoLogListRelationFilter
}, "id" | "name">

export type TascoMaterialTypesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.TascoMaterialTypesCountOrderByAggregateInput
  _max?: Prisma.TascoMaterialTypesMaxOrderByAggregateInput
  _min?: Prisma.TascoMaterialTypesMinOrderByAggregateInput
}

export type TascoMaterialTypesScalarWhereWithAggregatesInput = {
  AND?: Prisma.TascoMaterialTypesScalarWhereWithAggregatesInput | Prisma.TascoMaterialTypesScalarWhereWithAggregatesInput[]
  OR?: Prisma.TascoMaterialTypesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TascoMaterialTypesScalarWhereWithAggregatesInput | Prisma.TascoMaterialTypesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TascoMaterialTypes"> | string
  name?: Prisma.StringWithAggregatesFilter<"TascoMaterialTypes"> | string
}

export type TascoMaterialTypesCreateInput = {
  id?: string
  name: string
  TascoLog?: Prisma.TascoLogCreateNestedManyWithoutTascoMaterialTypesInput
}

export type TascoMaterialTypesUncheckedCreateInput = {
  id?: string
  name: string
  TascoLog?: Prisma.TascoLogUncheckedCreateNestedManyWithoutTascoMaterialTypesInput
}

export type TascoMaterialTypesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  TascoLog?: Prisma.TascoLogUpdateManyWithoutTascoMaterialTypesNestedInput
}

export type TascoMaterialTypesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  TascoLog?: Prisma.TascoLogUncheckedUpdateManyWithoutTascoMaterialTypesNestedInput
}

export type TascoMaterialTypesCreateManyInput = {
  id?: string
  name: string
}

export type TascoMaterialTypesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TascoMaterialTypesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TascoMaterialTypesNullableScalarRelationFilter = {
  is?: Prisma.TascoMaterialTypesWhereInput | null
  isNot?: Prisma.TascoMaterialTypesWhereInput | null
}

export type TascoMaterialTypesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TascoMaterialTypesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TascoMaterialTypesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TascoMaterialTypesCreateNestedOneWithoutTascoLogInput = {
  create?: Prisma.XOR<Prisma.TascoMaterialTypesCreateWithoutTascoLogInput, Prisma.TascoMaterialTypesUncheckedCreateWithoutTascoLogInput>
  connectOrCreate?: Prisma.TascoMaterialTypesCreateOrConnectWithoutTascoLogInput
  connect?: Prisma.TascoMaterialTypesWhereUniqueInput
}

export type TascoMaterialTypesUpdateOneWithoutTascoLogNestedInput = {
  create?: Prisma.XOR<Prisma.TascoMaterialTypesCreateWithoutTascoLogInput, Prisma.TascoMaterialTypesUncheckedCreateWithoutTascoLogInput>
  connectOrCreate?: Prisma.TascoMaterialTypesCreateOrConnectWithoutTascoLogInput
  upsert?: Prisma.TascoMaterialTypesUpsertWithoutTascoLogInput
  disconnect?: Prisma.TascoMaterialTypesWhereInput | boolean
  delete?: Prisma.TascoMaterialTypesWhereInput | boolean
  connect?: Prisma.TascoMaterialTypesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TascoMaterialTypesUpdateToOneWithWhereWithoutTascoLogInput, Prisma.TascoMaterialTypesUpdateWithoutTascoLogInput>, Prisma.TascoMaterialTypesUncheckedUpdateWithoutTascoLogInput>
}

export type TascoMaterialTypesCreateWithoutTascoLogInput = {
  id?: string
  name: string
}

export type TascoMaterialTypesUncheckedCreateWithoutTascoLogInput = {
  id?: string
  name: string
}

export type TascoMaterialTypesCreateOrConnectWithoutTascoLogInput = {
  where: Prisma.TascoMaterialTypesWhereUniqueInput
  create: Prisma.XOR<Prisma.TascoMaterialTypesCreateWithoutTascoLogInput, Prisma.TascoMaterialTypesUncheckedCreateWithoutTascoLogInput>
}

export type TascoMaterialTypesUpsertWithoutTascoLogInput = {
  update: Prisma.XOR<Prisma.TascoMaterialTypesUpdateWithoutTascoLogInput, Prisma.TascoMaterialTypesUncheckedUpdateWithoutTascoLogInput>
  create: Prisma.XOR<Prisma.TascoMaterialTypesCreateWithoutTascoLogInput, Prisma.TascoMaterialTypesUncheckedCreateWithoutTascoLogInput>
  where?: Prisma.TascoMaterialTypesWhereInput
}

export type TascoMaterialTypesUpdateToOneWithWhereWithoutTascoLogInput = {
  where?: Prisma.TascoMaterialTypesWhereInput
  data: Prisma.XOR<Prisma.TascoMaterialTypesUpdateWithoutTascoLogInput, Prisma.TascoMaterialTypesUncheckedUpdateWithoutTascoLogInput>
}

export type TascoMaterialTypesUpdateWithoutTascoLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TascoMaterialTypesUncheckedUpdateWithoutTascoLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TascoMaterialTypesCountOutputType
 */

export type TascoMaterialTypesCountOutputType = {
  TascoLog: number
}

export type TascoMaterialTypesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TascoLog?: boolean | TascoMaterialTypesCountOutputTypeCountTascoLogArgs
}

/**
 * TascoMaterialTypesCountOutputType without action
 */
export type TascoMaterialTypesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypesCountOutputType
   */
  select?: Prisma.TascoMaterialTypesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TascoMaterialTypesCountOutputType without action
 */
export type TascoMaterialTypesCountOutputTypeCountTascoLogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TascoLogWhereInput
}


export type TascoMaterialTypesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  TascoLog?: boolean | Prisma.TascoMaterialTypes$TascoLogArgs<ExtArgs>
  _count?: boolean | Prisma.TascoMaterialTypesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tascoMaterialTypes"]>

export type TascoMaterialTypesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["tascoMaterialTypes"]>

export type TascoMaterialTypesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["tascoMaterialTypes"]>

export type TascoMaterialTypesSelectScalar = {
  id?: boolean
  name?: boolean
}

export type TascoMaterialTypesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["tascoMaterialTypes"]>
export type TascoMaterialTypesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TascoLog?: boolean | Prisma.TascoMaterialTypes$TascoLogArgs<ExtArgs>
  _count?: boolean | Prisma.TascoMaterialTypesCountOutputTypeDefaultArgs<ExtArgs>
}
export type TascoMaterialTypesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TascoMaterialTypesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TascoMaterialTypesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TascoMaterialTypes"
  objects: {
    TascoLog: Prisma.$TascoLogPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
  }, ExtArgs["result"]["tascoMaterialTypes"]>
  composites: {}
}

export type TascoMaterialTypesGetPayload<S extends boolean | null | undefined | TascoMaterialTypesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload, S>

export type TascoMaterialTypesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TascoMaterialTypesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TascoMaterialTypesCountAggregateInputType | true
  }

export interface TascoMaterialTypesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TascoMaterialTypes'], meta: { name: 'TascoMaterialTypes' } }
  /**
   * Find zero or one TascoMaterialTypes that matches the filter.
   * @param {TascoMaterialTypesFindUniqueArgs} args - Arguments to find a TascoMaterialTypes
   * @example
   * // Get one TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TascoMaterialTypesFindUniqueArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TascoMaterialTypes that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TascoMaterialTypesFindUniqueOrThrowArgs} args - Arguments to find a TascoMaterialTypes
   * @example
   * // Get one TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TascoMaterialTypesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TascoMaterialTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesFindFirstArgs} args - Arguments to find a TascoMaterialTypes
   * @example
   * // Get one TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TascoMaterialTypesFindFirstArgs>(args?: Prisma.SelectSubset<T, TascoMaterialTypesFindFirstArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TascoMaterialTypes that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesFindFirstOrThrowArgs} args - Arguments to find a TascoMaterialTypes
   * @example
   * // Get one TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TascoMaterialTypesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TascoMaterialTypesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TascoMaterialTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.findMany()
   * 
   * // Get first 10 TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tascoMaterialTypesWithIdOnly = await prisma.tascoMaterialTypes.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TascoMaterialTypesFindManyArgs>(args?: Prisma.SelectSubset<T, TascoMaterialTypesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TascoMaterialTypes.
   * @param {TascoMaterialTypesCreateArgs} args - Arguments to create a TascoMaterialTypes.
   * @example
   * // Create one TascoMaterialTypes
   * const TascoMaterialTypes = await prisma.tascoMaterialTypes.create({
   *   data: {
   *     // ... data to create a TascoMaterialTypes
   *   }
   * })
   * 
   */
  create<T extends TascoMaterialTypesCreateArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesCreateArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TascoMaterialTypes.
   * @param {TascoMaterialTypesCreateManyArgs} args - Arguments to create many TascoMaterialTypes.
   * @example
   * // Create many TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TascoMaterialTypesCreateManyArgs>(args?: Prisma.SelectSubset<T, TascoMaterialTypesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TascoMaterialTypes and returns the data saved in the database.
   * @param {TascoMaterialTypesCreateManyAndReturnArgs} args - Arguments to create many TascoMaterialTypes.
   * @example
   * // Create many TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TascoMaterialTypes and only return the `id`
   * const tascoMaterialTypesWithIdOnly = await prisma.tascoMaterialTypes.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TascoMaterialTypesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TascoMaterialTypesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TascoMaterialTypes.
   * @param {TascoMaterialTypesDeleteArgs} args - Arguments to delete one TascoMaterialTypes.
   * @example
   * // Delete one TascoMaterialTypes
   * const TascoMaterialTypes = await prisma.tascoMaterialTypes.delete({
   *   where: {
   *     // ... filter to delete one TascoMaterialTypes
   *   }
   * })
   * 
   */
  delete<T extends TascoMaterialTypesDeleteArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesDeleteArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TascoMaterialTypes.
   * @param {TascoMaterialTypesUpdateArgs} args - Arguments to update one TascoMaterialTypes.
   * @example
   * // Update one TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TascoMaterialTypesUpdateArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesUpdateArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TascoMaterialTypes.
   * @param {TascoMaterialTypesDeleteManyArgs} args - Arguments to filter TascoMaterialTypes to delete.
   * @example
   * // Delete a few TascoMaterialTypes
   * const { count } = await prisma.tascoMaterialTypes.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TascoMaterialTypesDeleteManyArgs>(args?: Prisma.SelectSubset<T, TascoMaterialTypesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TascoMaterialTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TascoMaterialTypesUpdateManyArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TascoMaterialTypes and returns the data updated in the database.
   * @param {TascoMaterialTypesUpdateManyAndReturnArgs} args - Arguments to update many TascoMaterialTypes.
   * @example
   * // Update many TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TascoMaterialTypes and only return the `id`
   * const tascoMaterialTypesWithIdOnly = await prisma.tascoMaterialTypes.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TascoMaterialTypesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TascoMaterialTypes.
   * @param {TascoMaterialTypesUpsertArgs} args - Arguments to update or create a TascoMaterialTypes.
   * @example
   * // Update or create a TascoMaterialTypes
   * const tascoMaterialTypes = await prisma.tascoMaterialTypes.upsert({
   *   create: {
   *     // ... data to create a TascoMaterialTypes
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TascoMaterialTypes we want to update
   *   }
   * })
   */
  upsert<T extends TascoMaterialTypesUpsertArgs>(args: Prisma.SelectSubset<T, TascoMaterialTypesUpsertArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TascoMaterialTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesCountArgs} args - Arguments to filter TascoMaterialTypes to count.
   * @example
   * // Count the number of TascoMaterialTypes
   * const count = await prisma.tascoMaterialTypes.count({
   *   where: {
   *     // ... the filter for the TascoMaterialTypes we want to count
   *   }
   * })
  **/
  count<T extends TascoMaterialTypesCountArgs>(
    args?: Prisma.Subset<T, TascoMaterialTypesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TascoMaterialTypesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TascoMaterialTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TascoMaterialTypesAggregateArgs>(args: Prisma.Subset<T, TascoMaterialTypesAggregateArgs>): Prisma.PrismaPromise<GetTascoMaterialTypesAggregateType<T>>

  /**
   * Group by TascoMaterialTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoMaterialTypesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TascoMaterialTypesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TascoMaterialTypesGroupByArgs['orderBy'] }
      : { orderBy?: TascoMaterialTypesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TascoMaterialTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTascoMaterialTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TascoMaterialTypes model
 */
readonly fields: TascoMaterialTypesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TascoMaterialTypes.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TascoMaterialTypesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  TascoLog<T extends Prisma.TascoMaterialTypes$TascoLogArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TascoMaterialTypes$TascoLogArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TascoMaterialTypes model
 */
export interface TascoMaterialTypesFieldRefs {
  readonly id: Prisma.FieldRef<"TascoMaterialTypes", 'String'>
  readonly name: Prisma.FieldRef<"TascoMaterialTypes", 'String'>
}
    

// Custom InputTypes
/**
 * TascoMaterialTypes findUnique
 */
export type TascoMaterialTypesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * Filter, which TascoMaterialTypes to fetch.
   */
  where: Prisma.TascoMaterialTypesWhereUniqueInput
}

/**
 * TascoMaterialTypes findUniqueOrThrow
 */
export type TascoMaterialTypesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * Filter, which TascoMaterialTypes to fetch.
   */
  where: Prisma.TascoMaterialTypesWhereUniqueInput
}

/**
 * TascoMaterialTypes findFirst
 */
export type TascoMaterialTypesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * Filter, which TascoMaterialTypes to fetch.
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoMaterialTypes to fetch.
   */
  orderBy?: Prisma.TascoMaterialTypesOrderByWithRelationInput | Prisma.TascoMaterialTypesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TascoMaterialTypes.
   */
  cursor?: Prisma.TascoMaterialTypesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoMaterialTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoMaterialTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TascoMaterialTypes.
   */
  distinct?: Prisma.TascoMaterialTypesScalarFieldEnum | Prisma.TascoMaterialTypesScalarFieldEnum[]
}

/**
 * TascoMaterialTypes findFirstOrThrow
 */
export type TascoMaterialTypesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * Filter, which TascoMaterialTypes to fetch.
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoMaterialTypes to fetch.
   */
  orderBy?: Prisma.TascoMaterialTypesOrderByWithRelationInput | Prisma.TascoMaterialTypesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TascoMaterialTypes.
   */
  cursor?: Prisma.TascoMaterialTypesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoMaterialTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoMaterialTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TascoMaterialTypes.
   */
  distinct?: Prisma.TascoMaterialTypesScalarFieldEnum | Prisma.TascoMaterialTypesScalarFieldEnum[]
}

/**
 * TascoMaterialTypes findMany
 */
export type TascoMaterialTypesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * Filter, which TascoMaterialTypes to fetch.
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoMaterialTypes to fetch.
   */
  orderBy?: Prisma.TascoMaterialTypesOrderByWithRelationInput | Prisma.TascoMaterialTypesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TascoMaterialTypes.
   */
  cursor?: Prisma.TascoMaterialTypesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoMaterialTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoMaterialTypes.
   */
  skip?: number
  distinct?: Prisma.TascoMaterialTypesScalarFieldEnum | Prisma.TascoMaterialTypesScalarFieldEnum[]
}

/**
 * TascoMaterialTypes create
 */
export type TascoMaterialTypesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * The data needed to create a TascoMaterialTypes.
   */
  data: Prisma.XOR<Prisma.TascoMaterialTypesCreateInput, Prisma.TascoMaterialTypesUncheckedCreateInput>
}

/**
 * TascoMaterialTypes createMany
 */
export type TascoMaterialTypesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TascoMaterialTypes.
   */
  data: Prisma.TascoMaterialTypesCreateManyInput | Prisma.TascoMaterialTypesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TascoMaterialTypes createManyAndReturn
 */
export type TascoMaterialTypesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * The data used to create many TascoMaterialTypes.
   */
  data: Prisma.TascoMaterialTypesCreateManyInput | Prisma.TascoMaterialTypesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TascoMaterialTypes update
 */
export type TascoMaterialTypesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * The data needed to update a TascoMaterialTypes.
   */
  data: Prisma.XOR<Prisma.TascoMaterialTypesUpdateInput, Prisma.TascoMaterialTypesUncheckedUpdateInput>
  /**
   * Choose, which TascoMaterialTypes to update.
   */
  where: Prisma.TascoMaterialTypesWhereUniqueInput
}

/**
 * TascoMaterialTypes updateMany
 */
export type TascoMaterialTypesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TascoMaterialTypes.
   */
  data: Prisma.XOR<Prisma.TascoMaterialTypesUpdateManyMutationInput, Prisma.TascoMaterialTypesUncheckedUpdateManyInput>
  /**
   * Filter which TascoMaterialTypes to update
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * Limit how many TascoMaterialTypes to update.
   */
  limit?: number
}

/**
 * TascoMaterialTypes updateManyAndReturn
 */
export type TascoMaterialTypesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * The data used to update TascoMaterialTypes.
   */
  data: Prisma.XOR<Prisma.TascoMaterialTypesUpdateManyMutationInput, Prisma.TascoMaterialTypesUncheckedUpdateManyInput>
  /**
   * Filter which TascoMaterialTypes to update
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * Limit how many TascoMaterialTypes to update.
   */
  limit?: number
}

/**
 * TascoMaterialTypes upsert
 */
export type TascoMaterialTypesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * The filter to search for the TascoMaterialTypes to update in case it exists.
   */
  where: Prisma.TascoMaterialTypesWhereUniqueInput
  /**
   * In case the TascoMaterialTypes found by the `where` argument doesn't exist, create a new TascoMaterialTypes with this data.
   */
  create: Prisma.XOR<Prisma.TascoMaterialTypesCreateInput, Prisma.TascoMaterialTypesUncheckedCreateInput>
  /**
   * In case the TascoMaterialTypes was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TascoMaterialTypesUpdateInput, Prisma.TascoMaterialTypesUncheckedUpdateInput>
}

/**
 * TascoMaterialTypes delete
 */
export type TascoMaterialTypesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  /**
   * Filter which TascoMaterialTypes to delete.
   */
  where: Prisma.TascoMaterialTypesWhereUniqueInput
}

/**
 * TascoMaterialTypes deleteMany
 */
export type TascoMaterialTypesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TascoMaterialTypes to delete
   */
  where?: Prisma.TascoMaterialTypesWhereInput
  /**
   * Limit how many TascoMaterialTypes to delete.
   */
  limit?: number
}

/**
 * TascoMaterialTypes.TascoLog
 */
export type TascoMaterialTypes$TascoLogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  where?: Prisma.TascoLogWhereInput
  orderBy?: Prisma.TascoLogOrderByWithRelationInput | Prisma.TascoLogOrderByWithRelationInput[]
  cursor?: Prisma.TascoLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TascoLogScalarFieldEnum | Prisma.TascoLogScalarFieldEnum[]
}

/**
 * TascoMaterialTypes without action
 */
export type TascoMaterialTypesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
}
