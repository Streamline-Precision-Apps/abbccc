
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DocumentTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DocumentTag
 * 
 */
export type DocumentTagModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentTagPayload>

export type AggregateDocumentTag = {
  _count: DocumentTagCountAggregateOutputType | null
  _min: DocumentTagMinAggregateOutputType | null
  _max: DocumentTagMaxAggregateOutputType | null
}

export type DocumentTagMinAggregateOutputType = {
  id: string | null
  tagName: string | null
}

export type DocumentTagMaxAggregateOutputType = {
  id: string | null
  tagName: string | null
}

export type DocumentTagCountAggregateOutputType = {
  id: number
  tagName: number
  _all: number
}


export type DocumentTagMinAggregateInputType = {
  id?: true
  tagName?: true
}

export type DocumentTagMaxAggregateInputType = {
  id?: true
  tagName?: true
}

export type DocumentTagCountAggregateInputType = {
  id?: true
  tagName?: true
  _all?: true
}

export type DocumentTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentTag to aggregate.
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentTags to fetch.
   */
  orderBy?: Prisma.DocumentTagOrderByWithRelationInput | Prisma.DocumentTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DocumentTags
  **/
  _count?: true | DocumentTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentTagMaxAggregateInputType
}

export type GetDocumentTagAggregateType<T extends DocumentTagAggregateArgs> = {
      [P in keyof T & keyof AggregateDocumentTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocumentTag[P]>
    : Prisma.GetScalarType<T[P], AggregateDocumentTag[P]>
}




export type DocumentTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentTagWhereInput
  orderBy?: Prisma.DocumentTagOrderByWithAggregationInput | Prisma.DocumentTagOrderByWithAggregationInput[]
  by: Prisma.DocumentTagScalarFieldEnum[] | Prisma.DocumentTagScalarFieldEnum
  having?: Prisma.DocumentTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentTagCountAggregateInputType | true
  _min?: DocumentTagMinAggregateInputType
  _max?: DocumentTagMaxAggregateInputType
}

export type DocumentTagGroupByOutputType = {
  id: string
  tagName: string
  _count: DocumentTagCountAggregateOutputType | null
  _min: DocumentTagMinAggregateOutputType | null
  _max: DocumentTagMaxAggregateOutputType | null
}

type GetDocumentTagGroupByPayload<T extends DocumentTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentTagGroupByOutputType[P]>
      }
    >
  >



export type DocumentTagWhereInput = {
  AND?: Prisma.DocumentTagWhereInput | Prisma.DocumentTagWhereInput[]
  OR?: Prisma.DocumentTagWhereInput[]
  NOT?: Prisma.DocumentTagWhereInput | Prisma.DocumentTagWhereInput[]
  id?: Prisma.StringFilter<"DocumentTag"> | string
  tagName?: Prisma.StringFilter<"DocumentTag"> | string
  Equipment?: Prisma.EquipmentListRelationFilter
  Documents?: Prisma.PdfDocumentListRelationFilter
}

export type DocumentTagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tagName?: Prisma.SortOrder
  Equipment?: Prisma.EquipmentOrderByRelationAggregateInput
  Documents?: Prisma.PdfDocumentOrderByRelationAggregateInput
}

export type DocumentTagWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DocumentTagWhereInput | Prisma.DocumentTagWhereInput[]
  OR?: Prisma.DocumentTagWhereInput[]
  NOT?: Prisma.DocumentTagWhereInput | Prisma.DocumentTagWhereInput[]
  tagName?: Prisma.StringFilter<"DocumentTag"> | string
  Equipment?: Prisma.EquipmentListRelationFilter
  Documents?: Prisma.PdfDocumentListRelationFilter
}, "id">

export type DocumentTagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tagName?: Prisma.SortOrder
  _count?: Prisma.DocumentTagCountOrderByAggregateInput
  _max?: Prisma.DocumentTagMaxOrderByAggregateInput
  _min?: Prisma.DocumentTagMinOrderByAggregateInput
}

export type DocumentTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentTagScalarWhereWithAggregatesInput | Prisma.DocumentTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentTagScalarWhereWithAggregatesInput | Prisma.DocumentTagScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DocumentTag"> | string
  tagName?: Prisma.StringWithAggregatesFilter<"DocumentTag"> | string
}

export type DocumentTagCreateInput = {
  id?: string
  tagName: string
  Equipment?: Prisma.EquipmentCreateNestedManyWithoutDocumentTagsInput
  Documents?: Prisma.PdfDocumentCreateNestedManyWithoutDocumentTagsInput
}

export type DocumentTagUncheckedCreateInput = {
  id?: string
  tagName: string
  Equipment?: Prisma.EquipmentUncheckedCreateNestedManyWithoutDocumentTagsInput
  Documents?: Prisma.PdfDocumentUncheckedCreateNestedManyWithoutDocumentTagsInput
}

export type DocumentTagUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
  Equipment?: Prisma.EquipmentUpdateManyWithoutDocumentTagsNestedInput
  Documents?: Prisma.PdfDocumentUpdateManyWithoutDocumentTagsNestedInput
}

export type DocumentTagUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
  Equipment?: Prisma.EquipmentUncheckedUpdateManyWithoutDocumentTagsNestedInput
  Documents?: Prisma.PdfDocumentUncheckedUpdateManyWithoutDocumentTagsNestedInput
}

export type DocumentTagCreateManyInput = {
  id?: string
  tagName: string
}

export type DocumentTagUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DocumentTagUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DocumentTagListRelationFilter = {
  every?: Prisma.DocumentTagWhereInput
  some?: Prisma.DocumentTagWhereInput
  none?: Prisma.DocumentTagWhereInput
}

export type DocumentTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DocumentTagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tagName?: Prisma.SortOrder
}

export type DocumentTagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tagName?: Prisma.SortOrder
}

export type DocumentTagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tagName?: Prisma.SortOrder
}

export type DocumentTagCreateNestedManyWithoutDocumentsInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutDocumentsInput, Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput> | Prisma.DocumentTagCreateWithoutDocumentsInput[] | Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput | Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
}

export type DocumentTagUncheckedCreateNestedManyWithoutDocumentsInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutDocumentsInput, Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput> | Prisma.DocumentTagCreateWithoutDocumentsInput[] | Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput | Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
}

export type DocumentTagUpdateManyWithoutDocumentsNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutDocumentsInput, Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput> | Prisma.DocumentTagCreateWithoutDocumentsInput[] | Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput | Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput[]
  upsert?: Prisma.DocumentTagUpsertWithWhereUniqueWithoutDocumentsInput | Prisma.DocumentTagUpsertWithWhereUniqueWithoutDocumentsInput[]
  set?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  disconnect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  delete?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  update?: Prisma.DocumentTagUpdateWithWhereUniqueWithoutDocumentsInput | Prisma.DocumentTagUpdateWithWhereUniqueWithoutDocumentsInput[]
  updateMany?: Prisma.DocumentTagUpdateManyWithWhereWithoutDocumentsInput | Prisma.DocumentTagUpdateManyWithWhereWithoutDocumentsInput[]
  deleteMany?: Prisma.DocumentTagScalarWhereInput | Prisma.DocumentTagScalarWhereInput[]
}

export type DocumentTagUncheckedUpdateManyWithoutDocumentsNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutDocumentsInput, Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput> | Prisma.DocumentTagCreateWithoutDocumentsInput[] | Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput | Prisma.DocumentTagCreateOrConnectWithoutDocumentsInput[]
  upsert?: Prisma.DocumentTagUpsertWithWhereUniqueWithoutDocumentsInput | Prisma.DocumentTagUpsertWithWhereUniqueWithoutDocumentsInput[]
  set?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  disconnect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  delete?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  update?: Prisma.DocumentTagUpdateWithWhereUniqueWithoutDocumentsInput | Prisma.DocumentTagUpdateWithWhereUniqueWithoutDocumentsInput[]
  updateMany?: Prisma.DocumentTagUpdateManyWithWhereWithoutDocumentsInput | Prisma.DocumentTagUpdateManyWithWhereWithoutDocumentsInput[]
  deleteMany?: Prisma.DocumentTagScalarWhereInput | Prisma.DocumentTagScalarWhereInput[]
}

export type DocumentTagCreateNestedManyWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutEquipmentInput, Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput> | Prisma.DocumentTagCreateWithoutEquipmentInput[] | Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput | Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
}

export type DocumentTagUncheckedCreateNestedManyWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutEquipmentInput, Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput> | Prisma.DocumentTagCreateWithoutEquipmentInput[] | Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput | Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
}

export type DocumentTagUpdateManyWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutEquipmentInput, Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput> | Prisma.DocumentTagCreateWithoutEquipmentInput[] | Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput | Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput[]
  upsert?: Prisma.DocumentTagUpsertWithWhereUniqueWithoutEquipmentInput | Prisma.DocumentTagUpsertWithWhereUniqueWithoutEquipmentInput[]
  set?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  disconnect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  delete?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  update?: Prisma.DocumentTagUpdateWithWhereUniqueWithoutEquipmentInput | Prisma.DocumentTagUpdateWithWhereUniqueWithoutEquipmentInput[]
  updateMany?: Prisma.DocumentTagUpdateManyWithWhereWithoutEquipmentInput | Prisma.DocumentTagUpdateManyWithWhereWithoutEquipmentInput[]
  deleteMany?: Prisma.DocumentTagScalarWhereInput | Prisma.DocumentTagScalarWhereInput[]
}

export type DocumentTagUncheckedUpdateManyWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentTagCreateWithoutEquipmentInput, Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput> | Prisma.DocumentTagCreateWithoutEquipmentInput[] | Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput | Prisma.DocumentTagCreateOrConnectWithoutEquipmentInput[]
  upsert?: Prisma.DocumentTagUpsertWithWhereUniqueWithoutEquipmentInput | Prisma.DocumentTagUpsertWithWhereUniqueWithoutEquipmentInput[]
  set?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  disconnect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  delete?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  connect?: Prisma.DocumentTagWhereUniqueInput | Prisma.DocumentTagWhereUniqueInput[]
  update?: Prisma.DocumentTagUpdateWithWhereUniqueWithoutEquipmentInput | Prisma.DocumentTagUpdateWithWhereUniqueWithoutEquipmentInput[]
  updateMany?: Prisma.DocumentTagUpdateManyWithWhereWithoutEquipmentInput | Prisma.DocumentTagUpdateManyWithWhereWithoutEquipmentInput[]
  deleteMany?: Prisma.DocumentTagScalarWhereInput | Prisma.DocumentTagScalarWhereInput[]
}

export type DocumentTagCreateWithoutDocumentsInput = {
  id?: string
  tagName: string
  Equipment?: Prisma.EquipmentCreateNestedManyWithoutDocumentTagsInput
}

export type DocumentTagUncheckedCreateWithoutDocumentsInput = {
  id?: string
  tagName: string
  Equipment?: Prisma.EquipmentUncheckedCreateNestedManyWithoutDocumentTagsInput
}

export type DocumentTagCreateOrConnectWithoutDocumentsInput = {
  where: Prisma.DocumentTagWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentTagCreateWithoutDocumentsInput, Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput>
}

export type DocumentTagUpsertWithWhereUniqueWithoutDocumentsInput = {
  where: Prisma.DocumentTagWhereUniqueInput
  update: Prisma.XOR<Prisma.DocumentTagUpdateWithoutDocumentsInput, Prisma.DocumentTagUncheckedUpdateWithoutDocumentsInput>
  create: Prisma.XOR<Prisma.DocumentTagCreateWithoutDocumentsInput, Prisma.DocumentTagUncheckedCreateWithoutDocumentsInput>
}

export type DocumentTagUpdateWithWhereUniqueWithoutDocumentsInput = {
  where: Prisma.DocumentTagWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentTagUpdateWithoutDocumentsInput, Prisma.DocumentTagUncheckedUpdateWithoutDocumentsInput>
}

export type DocumentTagUpdateManyWithWhereWithoutDocumentsInput = {
  where: Prisma.DocumentTagScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentTagUpdateManyMutationInput, Prisma.DocumentTagUncheckedUpdateManyWithoutDocumentsInput>
}

export type DocumentTagScalarWhereInput = {
  AND?: Prisma.DocumentTagScalarWhereInput | Prisma.DocumentTagScalarWhereInput[]
  OR?: Prisma.DocumentTagScalarWhereInput[]
  NOT?: Prisma.DocumentTagScalarWhereInput | Prisma.DocumentTagScalarWhereInput[]
  id?: Prisma.StringFilter<"DocumentTag"> | string
  tagName?: Prisma.StringFilter<"DocumentTag"> | string
}

export type DocumentTagCreateWithoutEquipmentInput = {
  id?: string
  tagName: string
  Documents?: Prisma.PdfDocumentCreateNestedManyWithoutDocumentTagsInput
}

export type DocumentTagUncheckedCreateWithoutEquipmentInput = {
  id?: string
  tagName: string
  Documents?: Prisma.PdfDocumentUncheckedCreateNestedManyWithoutDocumentTagsInput
}

export type DocumentTagCreateOrConnectWithoutEquipmentInput = {
  where: Prisma.DocumentTagWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentTagCreateWithoutEquipmentInput, Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput>
}

export type DocumentTagUpsertWithWhereUniqueWithoutEquipmentInput = {
  where: Prisma.DocumentTagWhereUniqueInput
  update: Prisma.XOR<Prisma.DocumentTagUpdateWithoutEquipmentInput, Prisma.DocumentTagUncheckedUpdateWithoutEquipmentInput>
  create: Prisma.XOR<Prisma.DocumentTagCreateWithoutEquipmentInput, Prisma.DocumentTagUncheckedCreateWithoutEquipmentInput>
}

export type DocumentTagUpdateWithWhereUniqueWithoutEquipmentInput = {
  where: Prisma.DocumentTagWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentTagUpdateWithoutEquipmentInput, Prisma.DocumentTagUncheckedUpdateWithoutEquipmentInput>
}

export type DocumentTagUpdateManyWithWhereWithoutEquipmentInput = {
  where: Prisma.DocumentTagScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentTagUpdateManyMutationInput, Prisma.DocumentTagUncheckedUpdateManyWithoutEquipmentInput>
}

export type DocumentTagUpdateWithoutDocumentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
  Equipment?: Prisma.EquipmentUpdateManyWithoutDocumentTagsNestedInput
}

export type DocumentTagUncheckedUpdateWithoutDocumentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
  Equipment?: Prisma.EquipmentUncheckedUpdateManyWithoutDocumentTagsNestedInput
}

export type DocumentTagUncheckedUpdateManyWithoutDocumentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DocumentTagUpdateWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
  Documents?: Prisma.PdfDocumentUpdateManyWithoutDocumentTagsNestedInput
}

export type DocumentTagUncheckedUpdateWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
  Documents?: Prisma.PdfDocumentUncheckedUpdateManyWithoutDocumentTagsNestedInput
}

export type DocumentTagUncheckedUpdateManyWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagName?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type DocumentTagCountOutputType
 */

export type DocumentTagCountOutputType = {
  Equipment: number
  Documents: number
}

export type DocumentTagCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | DocumentTagCountOutputTypeCountEquipmentArgs
  Documents?: boolean | DocumentTagCountOutputTypeCountDocumentsArgs
}

/**
 * DocumentTagCountOutputType without action
 */
export type DocumentTagCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTagCountOutputType
   */
  select?: Prisma.DocumentTagCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DocumentTagCountOutputType without action
 */
export type DocumentTagCountOutputTypeCountEquipmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EquipmentWhereInput
}

/**
 * DocumentTagCountOutputType without action
 */
export type DocumentTagCountOutputTypeCountDocumentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PdfDocumentWhereInput
}


export type DocumentTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tagName?: boolean
  Equipment?: boolean | Prisma.DocumentTag$EquipmentArgs<ExtArgs>
  Documents?: boolean | Prisma.DocumentTag$DocumentsArgs<ExtArgs>
  _count?: boolean | Prisma.DocumentTagCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentTag"]>

export type DocumentTagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tagName?: boolean
}, ExtArgs["result"]["documentTag"]>

export type DocumentTagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tagName?: boolean
}, ExtArgs["result"]["documentTag"]>

export type DocumentTagSelectScalar = {
  id?: boolean
  tagName?: boolean
}

export type DocumentTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tagName", ExtArgs["result"]["documentTag"]>
export type DocumentTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.DocumentTag$EquipmentArgs<ExtArgs>
  Documents?: boolean | Prisma.DocumentTag$DocumentsArgs<ExtArgs>
  _count?: boolean | Prisma.DocumentTagCountOutputTypeDefaultArgs<ExtArgs>
}
export type DocumentTagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DocumentTagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DocumentTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DocumentTag"
  objects: {
    Equipment: Prisma.$EquipmentPayload<ExtArgs>[]
    Documents: Prisma.$PdfDocumentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    tagName: string
  }, ExtArgs["result"]["documentTag"]>
  composites: {}
}

export type DocumentTagGetPayload<S extends boolean | null | undefined | DocumentTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload, S>

export type DocumentTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentTagCountAggregateInputType | true
  }

export interface DocumentTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentTag'], meta: { name: 'DocumentTag' } }
  /**
   * Find zero or one DocumentTag that matches the filter.
   * @param {DocumentTagFindUniqueArgs} args - Arguments to find a DocumentTag
   * @example
   * // Get one DocumentTag
   * const documentTag = await prisma.documentTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentTagFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DocumentTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentTagFindUniqueOrThrowArgs} args - Arguments to find a DocumentTag
   * @example
   * // Get one DocumentTag
   * const documentTag = await prisma.documentTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagFindFirstArgs} args - Arguments to find a DocumentTag
   * @example
   * // Get one DocumentTag
   * const documentTag = await prisma.documentTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentTagFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagFindFirstOrThrowArgs} args - Arguments to find a DocumentTag
   * @example
   * // Get one DocumentTag
   * const documentTag = await prisma.documentTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DocumentTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DocumentTags
   * const documentTags = await prisma.documentTag.findMany()
   * 
   * // Get first 10 DocumentTags
   * const documentTags = await prisma.documentTag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentTagWithIdOnly = await prisma.documentTag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DocumentTagFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DocumentTag.
   * @param {DocumentTagCreateArgs} args - Arguments to create a DocumentTag.
   * @example
   * // Create one DocumentTag
   * const DocumentTag = await prisma.documentTag.create({
   *   data: {
   *     // ... data to create a DocumentTag
   *   }
   * })
   * 
   */
  create<T extends DocumentTagCreateArgs>(args: Prisma.SelectSubset<T, DocumentTagCreateArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DocumentTags.
   * @param {DocumentTagCreateManyArgs} args - Arguments to create many DocumentTags.
   * @example
   * // Create many DocumentTags
   * const documentTag = await prisma.documentTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DocumentTagCreateManyArgs>(args?: Prisma.SelectSubset<T, DocumentTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DocumentTags and returns the data saved in the database.
   * @param {DocumentTagCreateManyAndReturnArgs} args - Arguments to create many DocumentTags.
   * @example
   * // Create many DocumentTags
   * const documentTag = await prisma.documentTag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DocumentTags and only return the `id`
   * const documentTagWithIdOnly = await prisma.documentTag.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DocumentTagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DocumentTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DocumentTag.
   * @param {DocumentTagDeleteArgs} args - Arguments to delete one DocumentTag.
   * @example
   * // Delete one DocumentTag
   * const DocumentTag = await prisma.documentTag.delete({
   *   where: {
   *     // ... filter to delete one DocumentTag
   *   }
   * })
   * 
   */
  delete<T extends DocumentTagDeleteArgs>(args: Prisma.SelectSubset<T, DocumentTagDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DocumentTag.
   * @param {DocumentTagUpdateArgs} args - Arguments to update one DocumentTag.
   * @example
   * // Update one DocumentTag
   * const documentTag = await prisma.documentTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentTagUpdateArgs>(args: Prisma.SelectSubset<T, DocumentTagUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DocumentTags.
   * @param {DocumentTagDeleteManyArgs} args - Arguments to filter DocumentTags to delete.
   * @example
   * // Delete a few DocumentTags
   * const { count } = await prisma.documentTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DocumentTags
   * const documentTag = await prisma.documentTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentTagUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentTags and returns the data updated in the database.
   * @param {DocumentTagUpdateManyAndReturnArgs} args - Arguments to update many DocumentTags.
   * @example
   * // Update many DocumentTags
   * const documentTag = await prisma.documentTag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DocumentTags and only return the `id`
   * const documentTagWithIdOnly = await prisma.documentTag.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentTagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DocumentTag.
   * @param {DocumentTagUpsertArgs} args - Arguments to update or create a DocumentTag.
   * @example
   * // Update or create a DocumentTag
   * const documentTag = await prisma.documentTag.upsert({
   *   create: {
   *     // ... data to create a DocumentTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DocumentTag we want to update
   *   }
   * })
   */
  upsert<T extends DocumentTagUpsertArgs>(args: Prisma.SelectSubset<T, DocumentTagUpsertArgs<ExtArgs>>): Prisma.Prisma__DocumentTagClient<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DocumentTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagCountArgs} args - Arguments to filter DocumentTags to count.
   * @example
   * // Count the number of DocumentTags
   * const count = await prisma.documentTag.count({
   *   where: {
   *     // ... the filter for the DocumentTags we want to count
   *   }
   * })
  **/
  count<T extends DocumentTagCountArgs>(
    args?: Prisma.Subset<T, DocumentTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DocumentTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentTagAggregateArgs>(args: Prisma.Subset<T, DocumentTagAggregateArgs>): Prisma.PrismaPromise<GetDocumentTagAggregateType<T>>

  /**
   * Group by DocumentTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentTagGroupByArgs['orderBy'] }
      : { orderBy?: DocumentTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DocumentTag model
 */
readonly fields: DocumentTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DocumentTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Equipment<T extends Prisma.DocumentTag$EquipmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentTag$EquipmentArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Documents<T extends Prisma.DocumentTag$DocumentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentTag$DocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DocumentTag model
 */
export interface DocumentTagFieldRefs {
  readonly id: Prisma.FieldRef<"DocumentTag", 'String'>
  readonly tagName: Prisma.FieldRef<"DocumentTag", 'String'>
}
    

// Custom InputTypes
/**
 * DocumentTag findUnique
 */
export type DocumentTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * Filter, which DocumentTag to fetch.
   */
  where: Prisma.DocumentTagWhereUniqueInput
}

/**
 * DocumentTag findUniqueOrThrow
 */
export type DocumentTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * Filter, which DocumentTag to fetch.
   */
  where: Prisma.DocumentTagWhereUniqueInput
}

/**
 * DocumentTag findFirst
 */
export type DocumentTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * Filter, which DocumentTag to fetch.
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentTags to fetch.
   */
  orderBy?: Prisma.DocumentTagOrderByWithRelationInput | Prisma.DocumentTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentTags.
   */
  cursor?: Prisma.DocumentTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentTags.
   */
  distinct?: Prisma.DocumentTagScalarFieldEnum | Prisma.DocumentTagScalarFieldEnum[]
}

/**
 * DocumentTag findFirstOrThrow
 */
export type DocumentTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * Filter, which DocumentTag to fetch.
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentTags to fetch.
   */
  orderBy?: Prisma.DocumentTagOrderByWithRelationInput | Prisma.DocumentTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentTags.
   */
  cursor?: Prisma.DocumentTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentTags.
   */
  distinct?: Prisma.DocumentTagScalarFieldEnum | Prisma.DocumentTagScalarFieldEnum[]
}

/**
 * DocumentTag findMany
 */
export type DocumentTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * Filter, which DocumentTags to fetch.
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentTags to fetch.
   */
  orderBy?: Prisma.DocumentTagOrderByWithRelationInput | Prisma.DocumentTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DocumentTags.
   */
  cursor?: Prisma.DocumentTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentTags.
   */
  skip?: number
  distinct?: Prisma.DocumentTagScalarFieldEnum | Prisma.DocumentTagScalarFieldEnum[]
}

/**
 * DocumentTag create
 */
export type DocumentTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * The data needed to create a DocumentTag.
   */
  data: Prisma.XOR<Prisma.DocumentTagCreateInput, Prisma.DocumentTagUncheckedCreateInput>
}

/**
 * DocumentTag createMany
 */
export type DocumentTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DocumentTags.
   */
  data: Prisma.DocumentTagCreateManyInput | Prisma.DocumentTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DocumentTag createManyAndReturn
 */
export type DocumentTagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * The data used to create many DocumentTags.
   */
  data: Prisma.DocumentTagCreateManyInput | Prisma.DocumentTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DocumentTag update
 */
export type DocumentTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * The data needed to update a DocumentTag.
   */
  data: Prisma.XOR<Prisma.DocumentTagUpdateInput, Prisma.DocumentTagUncheckedUpdateInput>
  /**
   * Choose, which DocumentTag to update.
   */
  where: Prisma.DocumentTagWhereUniqueInput
}

/**
 * DocumentTag updateMany
 */
export type DocumentTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DocumentTags.
   */
  data: Prisma.XOR<Prisma.DocumentTagUpdateManyMutationInput, Prisma.DocumentTagUncheckedUpdateManyInput>
  /**
   * Filter which DocumentTags to update
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * Limit how many DocumentTags to update.
   */
  limit?: number
}

/**
 * DocumentTag updateManyAndReturn
 */
export type DocumentTagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * The data used to update DocumentTags.
   */
  data: Prisma.XOR<Prisma.DocumentTagUpdateManyMutationInput, Prisma.DocumentTagUncheckedUpdateManyInput>
  /**
   * Filter which DocumentTags to update
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * Limit how many DocumentTags to update.
   */
  limit?: number
}

/**
 * DocumentTag upsert
 */
export type DocumentTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * The filter to search for the DocumentTag to update in case it exists.
   */
  where: Prisma.DocumentTagWhereUniqueInput
  /**
   * In case the DocumentTag found by the `where` argument doesn't exist, create a new DocumentTag with this data.
   */
  create: Prisma.XOR<Prisma.DocumentTagCreateInput, Prisma.DocumentTagUncheckedCreateInput>
  /**
   * In case the DocumentTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DocumentTagUpdateInput, Prisma.DocumentTagUncheckedUpdateInput>
}

/**
 * DocumentTag delete
 */
export type DocumentTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  /**
   * Filter which DocumentTag to delete.
   */
  where: Prisma.DocumentTagWhereUniqueInput
}

/**
 * DocumentTag deleteMany
 */
export type DocumentTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentTags to delete
   */
  where?: Prisma.DocumentTagWhereInput
  /**
   * Limit how many DocumentTags to delete.
   */
  limit?: number
}

/**
 * DocumentTag.Equipment
 */
export type DocumentTag$EquipmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Equipment
   */
  select?: Prisma.EquipmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Equipment
   */
  omit?: Prisma.EquipmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentInclude<ExtArgs> | null
  where?: Prisma.EquipmentWhereInput
  orderBy?: Prisma.EquipmentOrderByWithRelationInput | Prisma.EquipmentOrderByWithRelationInput[]
  cursor?: Prisma.EquipmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EquipmentScalarFieldEnum | Prisma.EquipmentScalarFieldEnum[]
}

/**
 * DocumentTag.Documents
 */
export type DocumentTag$DocumentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  where?: Prisma.PdfDocumentWhereInput
  orderBy?: Prisma.PdfDocumentOrderByWithRelationInput | Prisma.PdfDocumentOrderByWithRelationInput[]
  cursor?: Prisma.PdfDocumentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PdfDocumentScalarFieldEnum | Prisma.PdfDocumentScalarFieldEnum[]
}

/**
 * DocumentTag without action
 */
export type DocumentTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
}
