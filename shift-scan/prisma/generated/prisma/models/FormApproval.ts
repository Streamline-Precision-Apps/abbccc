
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FormApproval` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FormApproval
 * 
 */
export type FormApprovalModel = runtime.Types.Result.DefaultSelection<Prisma.$FormApprovalPayload>

export type AggregateFormApproval = {
  _count: FormApprovalCountAggregateOutputType | null
  _min: FormApprovalMinAggregateOutputType | null
  _max: FormApprovalMaxAggregateOutputType | null
}

export type FormApprovalMinAggregateOutputType = {
  id: string | null
  formSubmissionId: string | null
  signedBy: string | null
  submittedAt: Date | null
  updatedAt: Date | null
  signature: string | null
  comment: string | null
}

export type FormApprovalMaxAggregateOutputType = {
  id: string | null
  formSubmissionId: string | null
  signedBy: string | null
  submittedAt: Date | null
  updatedAt: Date | null
  signature: string | null
  comment: string | null
}

export type FormApprovalCountAggregateOutputType = {
  id: number
  formSubmissionId: number
  signedBy: number
  submittedAt: number
  updatedAt: number
  signature: number
  comment: number
  _all: number
}


export type FormApprovalMinAggregateInputType = {
  id?: true
  formSubmissionId?: true
  signedBy?: true
  submittedAt?: true
  updatedAt?: true
  signature?: true
  comment?: true
}

export type FormApprovalMaxAggregateInputType = {
  id?: true
  formSubmissionId?: true
  signedBy?: true
  submittedAt?: true
  updatedAt?: true
  signature?: true
  comment?: true
}

export type FormApprovalCountAggregateInputType = {
  id?: true
  formSubmissionId?: true
  signedBy?: true
  submittedAt?: true
  updatedAt?: true
  signature?: true
  comment?: true
  _all?: true
}

export type FormApprovalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormApproval to aggregate.
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormApprovals to fetch.
   */
  orderBy?: Prisma.FormApprovalOrderByWithRelationInput | Prisma.FormApprovalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormApprovalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormApprovals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormApprovals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormApprovals
  **/
  _count?: true | FormApprovalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormApprovalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormApprovalMaxAggregateInputType
}

export type GetFormApprovalAggregateType<T extends FormApprovalAggregateArgs> = {
      [P in keyof T & keyof AggregateFormApproval]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormApproval[P]>
    : Prisma.GetScalarType<T[P], AggregateFormApproval[P]>
}




export type FormApprovalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormApprovalWhereInput
  orderBy?: Prisma.FormApprovalOrderByWithAggregationInput | Prisma.FormApprovalOrderByWithAggregationInput[]
  by: Prisma.FormApprovalScalarFieldEnum[] | Prisma.FormApprovalScalarFieldEnum
  having?: Prisma.FormApprovalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormApprovalCountAggregateInputType | true
  _min?: FormApprovalMinAggregateInputType
  _max?: FormApprovalMaxAggregateInputType
}

export type FormApprovalGroupByOutputType = {
  id: string
  formSubmissionId: string
  signedBy: string | null
  submittedAt: Date
  updatedAt: Date
  signature: string | null
  comment: string | null
  _count: FormApprovalCountAggregateOutputType | null
  _min: FormApprovalMinAggregateOutputType | null
  _max: FormApprovalMaxAggregateOutputType | null
}

type GetFormApprovalGroupByPayload<T extends FormApprovalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormApprovalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormApprovalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormApprovalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormApprovalGroupByOutputType[P]>
      }
    >
  >



export type FormApprovalWhereInput = {
  AND?: Prisma.FormApprovalWhereInput | Prisma.FormApprovalWhereInput[]
  OR?: Prisma.FormApprovalWhereInput[]
  NOT?: Prisma.FormApprovalWhereInput | Prisma.FormApprovalWhereInput[]
  id?: Prisma.StringFilter<"FormApproval"> | string
  formSubmissionId?: Prisma.StringFilter<"FormApproval"> | string
  signedBy?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  submittedAt?: Prisma.DateTimeFilter<"FormApproval"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormApproval"> | Date | string
  signature?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  comment?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  FormSubmission?: Prisma.XOR<Prisma.FormSubmissionScalarRelationFilter, Prisma.FormSubmissionWhereInput>
  Approver?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type FormApprovalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  formSubmissionId?: Prisma.SortOrder
  signedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  signature?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  FormSubmission?: Prisma.FormSubmissionOrderByWithRelationInput
  Approver?: Prisma.UserOrderByWithRelationInput
}

export type FormApprovalWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormApprovalWhereInput | Prisma.FormApprovalWhereInput[]
  OR?: Prisma.FormApprovalWhereInput[]
  NOT?: Prisma.FormApprovalWhereInput | Prisma.FormApprovalWhereInput[]
  formSubmissionId?: Prisma.StringFilter<"FormApproval"> | string
  signedBy?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  submittedAt?: Prisma.DateTimeFilter<"FormApproval"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormApproval"> | Date | string
  signature?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  comment?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  FormSubmission?: Prisma.XOR<Prisma.FormSubmissionScalarRelationFilter, Prisma.FormSubmissionWhereInput>
  Approver?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type FormApprovalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  formSubmissionId?: Prisma.SortOrder
  signedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  signature?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FormApprovalCountOrderByAggregateInput
  _max?: Prisma.FormApprovalMaxOrderByAggregateInput
  _min?: Prisma.FormApprovalMinOrderByAggregateInput
}

export type FormApprovalScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormApprovalScalarWhereWithAggregatesInput | Prisma.FormApprovalScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormApprovalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormApprovalScalarWhereWithAggregatesInput | Prisma.FormApprovalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormApproval"> | string
  formSubmissionId?: Prisma.StringWithAggregatesFilter<"FormApproval"> | string
  signedBy?: Prisma.StringNullableWithAggregatesFilter<"FormApproval"> | string | null
  submittedAt?: Prisma.DateTimeWithAggregatesFilter<"FormApproval"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FormApproval"> | Date | string
  signature?: Prisma.StringNullableWithAggregatesFilter<"FormApproval"> | string | null
  comment?: Prisma.StringNullableWithAggregatesFilter<"FormApproval"> | string | null
}

export type FormApprovalCreateInput = {
  id?: string
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
  FormSubmission: Prisma.FormSubmissionCreateNestedOneWithoutApprovalsInput
  Approver?: Prisma.UserCreateNestedOneWithoutFormApprovalsInput
}

export type FormApprovalUncheckedCreateInput = {
  id?: string
  formSubmissionId: string
  signedBy?: string | null
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
}

export type FormApprovalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  FormSubmission?: Prisma.FormSubmissionUpdateOneRequiredWithoutApprovalsNestedInput
  Approver?: Prisma.UserUpdateOneWithoutFormApprovalsNestedInput
}

export type FormApprovalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formSubmissionId?: Prisma.StringFieldUpdateOperationsInput | string
  signedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FormApprovalCreateManyInput = {
  id?: string
  formSubmissionId: string
  signedBy?: string | null
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
}

export type FormApprovalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FormApprovalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formSubmissionId?: Prisma.StringFieldUpdateOperationsInput | string
  signedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FormApprovalListRelationFilter = {
  every?: Prisma.FormApprovalWhereInput
  some?: Prisma.FormApprovalWhereInput
  none?: Prisma.FormApprovalWhereInput
}

export type FormApprovalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormApprovalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formSubmissionId?: Prisma.SortOrder
  signedBy?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type FormApprovalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formSubmissionId?: Prisma.SortOrder
  signedBy?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type FormApprovalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formSubmissionId?: Prisma.SortOrder
  signedBy?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type FormApprovalCreateNestedManyWithoutFormSubmissionInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput> | Prisma.FormApprovalCreateWithoutFormSubmissionInput[] | Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput | Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput[]
  createMany?: Prisma.FormApprovalCreateManyFormSubmissionInputEnvelope
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
}

export type FormApprovalUncheckedCreateNestedManyWithoutFormSubmissionInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput> | Prisma.FormApprovalCreateWithoutFormSubmissionInput[] | Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput | Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput[]
  createMany?: Prisma.FormApprovalCreateManyFormSubmissionInputEnvelope
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
}

export type FormApprovalUpdateManyWithoutFormSubmissionNestedInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput> | Prisma.FormApprovalCreateWithoutFormSubmissionInput[] | Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput | Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput[]
  upsert?: Prisma.FormApprovalUpsertWithWhereUniqueWithoutFormSubmissionInput | Prisma.FormApprovalUpsertWithWhereUniqueWithoutFormSubmissionInput[]
  createMany?: Prisma.FormApprovalCreateManyFormSubmissionInputEnvelope
  set?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  disconnect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  delete?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  update?: Prisma.FormApprovalUpdateWithWhereUniqueWithoutFormSubmissionInput | Prisma.FormApprovalUpdateWithWhereUniqueWithoutFormSubmissionInput[]
  updateMany?: Prisma.FormApprovalUpdateManyWithWhereWithoutFormSubmissionInput | Prisma.FormApprovalUpdateManyWithWhereWithoutFormSubmissionInput[]
  deleteMany?: Prisma.FormApprovalScalarWhereInput | Prisma.FormApprovalScalarWhereInput[]
}

export type FormApprovalUncheckedUpdateManyWithoutFormSubmissionNestedInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput> | Prisma.FormApprovalCreateWithoutFormSubmissionInput[] | Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput | Prisma.FormApprovalCreateOrConnectWithoutFormSubmissionInput[]
  upsert?: Prisma.FormApprovalUpsertWithWhereUniqueWithoutFormSubmissionInput | Prisma.FormApprovalUpsertWithWhereUniqueWithoutFormSubmissionInput[]
  createMany?: Prisma.FormApprovalCreateManyFormSubmissionInputEnvelope
  set?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  disconnect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  delete?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  update?: Prisma.FormApprovalUpdateWithWhereUniqueWithoutFormSubmissionInput | Prisma.FormApprovalUpdateWithWhereUniqueWithoutFormSubmissionInput[]
  updateMany?: Prisma.FormApprovalUpdateManyWithWhereWithoutFormSubmissionInput | Prisma.FormApprovalUpdateManyWithWhereWithoutFormSubmissionInput[]
  deleteMany?: Prisma.FormApprovalScalarWhereInput | Prisma.FormApprovalScalarWhereInput[]
}

export type FormApprovalCreateNestedManyWithoutApproverInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutApproverInput, Prisma.FormApprovalUncheckedCreateWithoutApproverInput> | Prisma.FormApprovalCreateWithoutApproverInput[] | Prisma.FormApprovalUncheckedCreateWithoutApproverInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutApproverInput | Prisma.FormApprovalCreateOrConnectWithoutApproverInput[]
  createMany?: Prisma.FormApprovalCreateManyApproverInputEnvelope
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
}

export type FormApprovalUncheckedCreateNestedManyWithoutApproverInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutApproverInput, Prisma.FormApprovalUncheckedCreateWithoutApproverInput> | Prisma.FormApprovalCreateWithoutApproverInput[] | Prisma.FormApprovalUncheckedCreateWithoutApproverInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutApproverInput | Prisma.FormApprovalCreateOrConnectWithoutApproverInput[]
  createMany?: Prisma.FormApprovalCreateManyApproverInputEnvelope
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
}

export type FormApprovalUpdateManyWithoutApproverNestedInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutApproverInput, Prisma.FormApprovalUncheckedCreateWithoutApproverInput> | Prisma.FormApprovalCreateWithoutApproverInput[] | Prisma.FormApprovalUncheckedCreateWithoutApproverInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutApproverInput | Prisma.FormApprovalCreateOrConnectWithoutApproverInput[]
  upsert?: Prisma.FormApprovalUpsertWithWhereUniqueWithoutApproverInput | Prisma.FormApprovalUpsertWithWhereUniqueWithoutApproverInput[]
  createMany?: Prisma.FormApprovalCreateManyApproverInputEnvelope
  set?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  disconnect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  delete?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  update?: Prisma.FormApprovalUpdateWithWhereUniqueWithoutApproverInput | Prisma.FormApprovalUpdateWithWhereUniqueWithoutApproverInput[]
  updateMany?: Prisma.FormApprovalUpdateManyWithWhereWithoutApproverInput | Prisma.FormApprovalUpdateManyWithWhereWithoutApproverInput[]
  deleteMany?: Prisma.FormApprovalScalarWhereInput | Prisma.FormApprovalScalarWhereInput[]
}

export type FormApprovalUncheckedUpdateManyWithoutApproverNestedInput = {
  create?: Prisma.XOR<Prisma.FormApprovalCreateWithoutApproverInput, Prisma.FormApprovalUncheckedCreateWithoutApproverInput> | Prisma.FormApprovalCreateWithoutApproverInput[] | Prisma.FormApprovalUncheckedCreateWithoutApproverInput[]
  connectOrCreate?: Prisma.FormApprovalCreateOrConnectWithoutApproverInput | Prisma.FormApprovalCreateOrConnectWithoutApproverInput[]
  upsert?: Prisma.FormApprovalUpsertWithWhereUniqueWithoutApproverInput | Prisma.FormApprovalUpsertWithWhereUniqueWithoutApproverInput[]
  createMany?: Prisma.FormApprovalCreateManyApproverInputEnvelope
  set?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  disconnect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  delete?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  connect?: Prisma.FormApprovalWhereUniqueInput | Prisma.FormApprovalWhereUniqueInput[]
  update?: Prisma.FormApprovalUpdateWithWhereUniqueWithoutApproverInput | Prisma.FormApprovalUpdateWithWhereUniqueWithoutApproverInput[]
  updateMany?: Prisma.FormApprovalUpdateManyWithWhereWithoutApproverInput | Prisma.FormApprovalUpdateManyWithWhereWithoutApproverInput[]
  deleteMany?: Prisma.FormApprovalScalarWhereInput | Prisma.FormApprovalScalarWhereInput[]
}

export type FormApprovalCreateWithoutFormSubmissionInput = {
  id?: string
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
  Approver?: Prisma.UserCreateNestedOneWithoutFormApprovalsInput
}

export type FormApprovalUncheckedCreateWithoutFormSubmissionInput = {
  id?: string
  signedBy?: string | null
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
}

export type FormApprovalCreateOrConnectWithoutFormSubmissionInput = {
  where: Prisma.FormApprovalWhereUniqueInput
  create: Prisma.XOR<Prisma.FormApprovalCreateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput>
}

export type FormApprovalCreateManyFormSubmissionInputEnvelope = {
  data: Prisma.FormApprovalCreateManyFormSubmissionInput | Prisma.FormApprovalCreateManyFormSubmissionInput[]
  skipDuplicates?: boolean
}

export type FormApprovalUpsertWithWhereUniqueWithoutFormSubmissionInput = {
  where: Prisma.FormApprovalWhereUniqueInput
  update: Prisma.XOR<Prisma.FormApprovalUpdateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedUpdateWithoutFormSubmissionInput>
  create: Prisma.XOR<Prisma.FormApprovalCreateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedCreateWithoutFormSubmissionInput>
}

export type FormApprovalUpdateWithWhereUniqueWithoutFormSubmissionInput = {
  where: Prisma.FormApprovalWhereUniqueInput
  data: Prisma.XOR<Prisma.FormApprovalUpdateWithoutFormSubmissionInput, Prisma.FormApprovalUncheckedUpdateWithoutFormSubmissionInput>
}

export type FormApprovalUpdateManyWithWhereWithoutFormSubmissionInput = {
  where: Prisma.FormApprovalScalarWhereInput
  data: Prisma.XOR<Prisma.FormApprovalUpdateManyMutationInput, Prisma.FormApprovalUncheckedUpdateManyWithoutFormSubmissionInput>
}

export type FormApprovalScalarWhereInput = {
  AND?: Prisma.FormApprovalScalarWhereInput | Prisma.FormApprovalScalarWhereInput[]
  OR?: Prisma.FormApprovalScalarWhereInput[]
  NOT?: Prisma.FormApprovalScalarWhereInput | Prisma.FormApprovalScalarWhereInput[]
  id?: Prisma.StringFilter<"FormApproval"> | string
  formSubmissionId?: Prisma.StringFilter<"FormApproval"> | string
  signedBy?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  submittedAt?: Prisma.DateTimeFilter<"FormApproval"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormApproval"> | Date | string
  signature?: Prisma.StringNullableFilter<"FormApproval"> | string | null
  comment?: Prisma.StringNullableFilter<"FormApproval"> | string | null
}

export type FormApprovalCreateWithoutApproverInput = {
  id?: string
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
  FormSubmission: Prisma.FormSubmissionCreateNestedOneWithoutApprovalsInput
}

export type FormApprovalUncheckedCreateWithoutApproverInput = {
  id?: string
  formSubmissionId: string
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
}

export type FormApprovalCreateOrConnectWithoutApproverInput = {
  where: Prisma.FormApprovalWhereUniqueInput
  create: Prisma.XOR<Prisma.FormApprovalCreateWithoutApproverInput, Prisma.FormApprovalUncheckedCreateWithoutApproverInput>
}

export type FormApprovalCreateManyApproverInputEnvelope = {
  data: Prisma.FormApprovalCreateManyApproverInput | Prisma.FormApprovalCreateManyApproverInput[]
  skipDuplicates?: boolean
}

export type FormApprovalUpsertWithWhereUniqueWithoutApproverInput = {
  where: Prisma.FormApprovalWhereUniqueInput
  update: Prisma.XOR<Prisma.FormApprovalUpdateWithoutApproverInput, Prisma.FormApprovalUncheckedUpdateWithoutApproverInput>
  create: Prisma.XOR<Prisma.FormApprovalCreateWithoutApproverInput, Prisma.FormApprovalUncheckedCreateWithoutApproverInput>
}

export type FormApprovalUpdateWithWhereUniqueWithoutApproverInput = {
  where: Prisma.FormApprovalWhereUniqueInput
  data: Prisma.XOR<Prisma.FormApprovalUpdateWithoutApproverInput, Prisma.FormApprovalUncheckedUpdateWithoutApproverInput>
}

export type FormApprovalUpdateManyWithWhereWithoutApproverInput = {
  where: Prisma.FormApprovalScalarWhereInput
  data: Prisma.XOR<Prisma.FormApprovalUpdateManyMutationInput, Prisma.FormApprovalUncheckedUpdateManyWithoutApproverInput>
}

export type FormApprovalCreateManyFormSubmissionInput = {
  id?: string
  signedBy?: string | null
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
}

export type FormApprovalUpdateWithoutFormSubmissionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Approver?: Prisma.UserUpdateOneWithoutFormApprovalsNestedInput
}

export type FormApprovalUncheckedUpdateWithoutFormSubmissionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  signedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FormApprovalUncheckedUpdateManyWithoutFormSubmissionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  signedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FormApprovalCreateManyApproverInput = {
  id?: string
  formSubmissionId: string
  submittedAt?: Date | string
  updatedAt?: Date | string
  signature?: string | null
  comment?: string | null
}

export type FormApprovalUpdateWithoutApproverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  FormSubmission?: Prisma.FormSubmissionUpdateOneRequiredWithoutApprovalsNestedInput
}

export type FormApprovalUncheckedUpdateWithoutApproverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formSubmissionId?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FormApprovalUncheckedUpdateManyWithoutApproverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formSubmissionId?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  signature?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type FormApprovalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formSubmissionId?: boolean
  signedBy?: boolean
  submittedAt?: boolean
  updatedAt?: boolean
  signature?: boolean
  comment?: boolean
  FormSubmission?: boolean | Prisma.FormSubmissionDefaultArgs<ExtArgs>
  Approver?: boolean | Prisma.FormApproval$ApproverArgs<ExtArgs>
}, ExtArgs["result"]["formApproval"]>

export type FormApprovalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formSubmissionId?: boolean
  signedBy?: boolean
  submittedAt?: boolean
  updatedAt?: boolean
  signature?: boolean
  comment?: boolean
  FormSubmission?: boolean | Prisma.FormSubmissionDefaultArgs<ExtArgs>
  Approver?: boolean | Prisma.FormApproval$ApproverArgs<ExtArgs>
}, ExtArgs["result"]["formApproval"]>

export type FormApprovalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formSubmissionId?: boolean
  signedBy?: boolean
  submittedAt?: boolean
  updatedAt?: boolean
  signature?: boolean
  comment?: boolean
  FormSubmission?: boolean | Prisma.FormSubmissionDefaultArgs<ExtArgs>
  Approver?: boolean | Prisma.FormApproval$ApproverArgs<ExtArgs>
}, ExtArgs["result"]["formApproval"]>

export type FormApprovalSelectScalar = {
  id?: boolean
  formSubmissionId?: boolean
  signedBy?: boolean
  submittedAt?: boolean
  updatedAt?: boolean
  signature?: boolean
  comment?: boolean
}

export type FormApprovalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "formSubmissionId" | "signedBy" | "submittedAt" | "updatedAt" | "signature" | "comment", ExtArgs["result"]["formApproval"]>
export type FormApprovalInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormSubmission?: boolean | Prisma.FormSubmissionDefaultArgs<ExtArgs>
  Approver?: boolean | Prisma.FormApproval$ApproverArgs<ExtArgs>
}
export type FormApprovalIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormSubmission?: boolean | Prisma.FormSubmissionDefaultArgs<ExtArgs>
  Approver?: boolean | Prisma.FormApproval$ApproverArgs<ExtArgs>
}
export type FormApprovalIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormSubmission?: boolean | Prisma.FormSubmissionDefaultArgs<ExtArgs>
  Approver?: boolean | Prisma.FormApproval$ApproverArgs<ExtArgs>
}

export type $FormApprovalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormApproval"
  objects: {
    FormSubmission: Prisma.$FormSubmissionPayload<ExtArgs>
    Approver: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    formSubmissionId: string
    signedBy: string | null
    submittedAt: Date
    updatedAt: Date
    signature: string | null
    comment: string | null
  }, ExtArgs["result"]["formApproval"]>
  composites: {}
}

export type FormApprovalGetPayload<S extends boolean | null | undefined | FormApprovalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload, S>

export type FormApprovalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormApprovalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormApprovalCountAggregateInputType | true
  }

export interface FormApprovalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormApproval'], meta: { name: 'FormApproval' } }
  /**
   * Find zero or one FormApproval that matches the filter.
   * @param {FormApprovalFindUniqueArgs} args - Arguments to find a FormApproval
   * @example
   * // Get one FormApproval
   * const formApproval = await prisma.formApproval.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormApprovalFindUniqueArgs>(args: Prisma.SelectSubset<T, FormApprovalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormApproval that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormApprovalFindUniqueOrThrowArgs} args - Arguments to find a FormApproval
   * @example
   * // Get one FormApproval
   * const formApproval = await prisma.formApproval.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormApprovalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormApproval that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalFindFirstArgs} args - Arguments to find a FormApproval
   * @example
   * // Get one FormApproval
   * const formApproval = await prisma.formApproval.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormApprovalFindFirstArgs>(args?: Prisma.SelectSubset<T, FormApprovalFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormApproval that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalFindFirstOrThrowArgs} args - Arguments to find a FormApproval
   * @example
   * // Get one FormApproval
   * const formApproval = await prisma.formApproval.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormApprovalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormApprovals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormApprovals
   * const formApprovals = await prisma.formApproval.findMany()
   * 
   * // Get first 10 FormApprovals
   * const formApprovals = await prisma.formApproval.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formApprovalWithIdOnly = await prisma.formApproval.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormApprovalFindManyArgs>(args?: Prisma.SelectSubset<T, FormApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormApproval.
   * @param {FormApprovalCreateArgs} args - Arguments to create a FormApproval.
   * @example
   * // Create one FormApproval
   * const FormApproval = await prisma.formApproval.create({
   *   data: {
   *     // ... data to create a FormApproval
   *   }
   * })
   * 
   */
  create<T extends FormApprovalCreateArgs>(args: Prisma.SelectSubset<T, FormApprovalCreateArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormApprovals.
   * @param {FormApprovalCreateManyArgs} args - Arguments to create many FormApprovals.
   * @example
   * // Create many FormApprovals
   * const formApproval = await prisma.formApproval.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormApprovalCreateManyArgs>(args?: Prisma.SelectSubset<T, FormApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormApprovals and returns the data saved in the database.
   * @param {FormApprovalCreateManyAndReturnArgs} args - Arguments to create many FormApprovals.
   * @example
   * // Create many FormApprovals
   * const formApproval = await prisma.formApproval.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormApprovals and only return the `id`
   * const formApprovalWithIdOnly = await prisma.formApproval.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormApprovalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormApprovalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormApproval.
   * @param {FormApprovalDeleteArgs} args - Arguments to delete one FormApproval.
   * @example
   * // Delete one FormApproval
   * const FormApproval = await prisma.formApproval.delete({
   *   where: {
   *     // ... filter to delete one FormApproval
   *   }
   * })
   * 
   */
  delete<T extends FormApprovalDeleteArgs>(args: Prisma.SelectSubset<T, FormApprovalDeleteArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormApproval.
   * @param {FormApprovalUpdateArgs} args - Arguments to update one FormApproval.
   * @example
   * // Update one FormApproval
   * const formApproval = await prisma.formApproval.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormApprovalUpdateArgs>(args: Prisma.SelectSubset<T, FormApprovalUpdateArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormApprovals.
   * @param {FormApprovalDeleteManyArgs} args - Arguments to filter FormApprovals to delete.
   * @example
   * // Delete a few FormApprovals
   * const { count } = await prisma.formApproval.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormApprovalDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormApprovals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormApprovals
   * const formApproval = await prisma.formApproval.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormApprovalUpdateManyArgs>(args: Prisma.SelectSubset<T, FormApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormApprovals and returns the data updated in the database.
   * @param {FormApprovalUpdateManyAndReturnArgs} args - Arguments to update many FormApprovals.
   * @example
   * // Update many FormApprovals
   * const formApproval = await prisma.formApproval.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormApprovals and only return the `id`
   * const formApprovalWithIdOnly = await prisma.formApproval.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormApprovalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormApprovalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormApproval.
   * @param {FormApprovalUpsertArgs} args - Arguments to update or create a FormApproval.
   * @example
   * // Update or create a FormApproval
   * const formApproval = await prisma.formApproval.upsert({
   *   create: {
   *     // ... data to create a FormApproval
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormApproval we want to update
   *   }
   * })
   */
  upsert<T extends FormApprovalUpsertArgs>(args: Prisma.SelectSubset<T, FormApprovalUpsertArgs<ExtArgs>>): Prisma.Prisma__FormApprovalClient<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormApprovals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalCountArgs} args - Arguments to filter FormApprovals to count.
   * @example
   * // Count the number of FormApprovals
   * const count = await prisma.formApproval.count({
   *   where: {
   *     // ... the filter for the FormApprovals we want to count
   *   }
   * })
  **/
  count<T extends FormApprovalCountArgs>(
    args?: Prisma.Subset<T, FormApprovalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormApprovalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormApproval.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormApprovalAggregateArgs>(args: Prisma.Subset<T, FormApprovalAggregateArgs>): Prisma.PrismaPromise<GetFormApprovalAggregateType<T>>

  /**
   * Group by FormApproval.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormApprovalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormApprovalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormApprovalGroupByArgs['orderBy'] }
      : { orderBy?: FormApprovalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormApproval model
 */
readonly fields: FormApprovalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormApproval.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormApprovalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  FormSubmission<T extends Prisma.FormSubmissionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormSubmissionDefaultArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Approver<T extends Prisma.FormApproval$ApproverArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormApproval$ApproverArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormApproval model
 */
export interface FormApprovalFieldRefs {
  readonly id: Prisma.FieldRef<"FormApproval", 'String'>
  readonly formSubmissionId: Prisma.FieldRef<"FormApproval", 'String'>
  readonly signedBy: Prisma.FieldRef<"FormApproval", 'String'>
  readonly submittedAt: Prisma.FieldRef<"FormApproval", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FormApproval", 'DateTime'>
  readonly signature: Prisma.FieldRef<"FormApproval", 'String'>
  readonly comment: Prisma.FieldRef<"FormApproval", 'String'>
}
    

// Custom InputTypes
/**
 * FormApproval findUnique
 */
export type FormApprovalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * Filter, which FormApproval to fetch.
   */
  where: Prisma.FormApprovalWhereUniqueInput
}

/**
 * FormApproval findUniqueOrThrow
 */
export type FormApprovalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * Filter, which FormApproval to fetch.
   */
  where: Prisma.FormApprovalWhereUniqueInput
}

/**
 * FormApproval findFirst
 */
export type FormApprovalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * Filter, which FormApproval to fetch.
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormApprovals to fetch.
   */
  orderBy?: Prisma.FormApprovalOrderByWithRelationInput | Prisma.FormApprovalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormApprovals.
   */
  cursor?: Prisma.FormApprovalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormApprovals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormApprovals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormApprovals.
   */
  distinct?: Prisma.FormApprovalScalarFieldEnum | Prisma.FormApprovalScalarFieldEnum[]
}

/**
 * FormApproval findFirstOrThrow
 */
export type FormApprovalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * Filter, which FormApproval to fetch.
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormApprovals to fetch.
   */
  orderBy?: Prisma.FormApprovalOrderByWithRelationInput | Prisma.FormApprovalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormApprovals.
   */
  cursor?: Prisma.FormApprovalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormApprovals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormApprovals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormApprovals.
   */
  distinct?: Prisma.FormApprovalScalarFieldEnum | Prisma.FormApprovalScalarFieldEnum[]
}

/**
 * FormApproval findMany
 */
export type FormApprovalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * Filter, which FormApprovals to fetch.
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormApprovals to fetch.
   */
  orderBy?: Prisma.FormApprovalOrderByWithRelationInput | Prisma.FormApprovalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormApprovals.
   */
  cursor?: Prisma.FormApprovalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormApprovals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormApprovals.
   */
  skip?: number
  distinct?: Prisma.FormApprovalScalarFieldEnum | Prisma.FormApprovalScalarFieldEnum[]
}

/**
 * FormApproval create
 */
export type FormApprovalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * The data needed to create a FormApproval.
   */
  data: Prisma.XOR<Prisma.FormApprovalCreateInput, Prisma.FormApprovalUncheckedCreateInput>
}

/**
 * FormApproval createMany
 */
export type FormApprovalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormApprovals.
   */
  data: Prisma.FormApprovalCreateManyInput | Prisma.FormApprovalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormApproval createManyAndReturn
 */
export type FormApprovalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * The data used to create many FormApprovals.
   */
  data: Prisma.FormApprovalCreateManyInput | Prisma.FormApprovalCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormApproval update
 */
export type FormApprovalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * The data needed to update a FormApproval.
   */
  data: Prisma.XOR<Prisma.FormApprovalUpdateInput, Prisma.FormApprovalUncheckedUpdateInput>
  /**
   * Choose, which FormApproval to update.
   */
  where: Prisma.FormApprovalWhereUniqueInput
}

/**
 * FormApproval updateMany
 */
export type FormApprovalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormApprovals.
   */
  data: Prisma.XOR<Prisma.FormApprovalUpdateManyMutationInput, Prisma.FormApprovalUncheckedUpdateManyInput>
  /**
   * Filter which FormApprovals to update
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * Limit how many FormApprovals to update.
   */
  limit?: number
}

/**
 * FormApproval updateManyAndReturn
 */
export type FormApprovalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * The data used to update FormApprovals.
   */
  data: Prisma.XOR<Prisma.FormApprovalUpdateManyMutationInput, Prisma.FormApprovalUncheckedUpdateManyInput>
  /**
   * Filter which FormApprovals to update
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * Limit how many FormApprovals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormApproval upsert
 */
export type FormApprovalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * The filter to search for the FormApproval to update in case it exists.
   */
  where: Prisma.FormApprovalWhereUniqueInput
  /**
   * In case the FormApproval found by the `where` argument doesn't exist, create a new FormApproval with this data.
   */
  create: Prisma.XOR<Prisma.FormApprovalCreateInput, Prisma.FormApprovalUncheckedCreateInput>
  /**
   * In case the FormApproval was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormApprovalUpdateInput, Prisma.FormApprovalUncheckedUpdateInput>
}

/**
 * FormApproval delete
 */
export type FormApprovalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  /**
   * Filter which FormApproval to delete.
   */
  where: Prisma.FormApprovalWhereUniqueInput
}

/**
 * FormApproval deleteMany
 */
export type FormApprovalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormApprovals to delete
   */
  where?: Prisma.FormApprovalWhereInput
  /**
   * Limit how many FormApprovals to delete.
   */
  limit?: number
}

/**
 * FormApproval.Approver
 */
export type FormApproval$ApproverArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * FormApproval without action
 */
export type FormApprovalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
}
