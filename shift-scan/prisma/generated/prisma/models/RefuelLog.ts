
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `RefuelLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RefuelLog
 * 
 */
export type RefuelLogModel = runtime.Types.Result.DefaultSelection<Prisma.$RefuelLogPayload>

export type AggregateRefuelLog = {
  _count: RefuelLogCountAggregateOutputType | null
  _avg: RefuelLogAvgAggregateOutputType | null
  _sum: RefuelLogSumAggregateOutputType | null
  _min: RefuelLogMinAggregateOutputType | null
  _max: RefuelLogMaxAggregateOutputType | null
}

export type RefuelLogAvgAggregateOutputType = {
  gallonsRefueled: number | null
  milesAtFueling: number | null
}

export type RefuelLogSumAggregateOutputType = {
  gallonsRefueled: number | null
  milesAtFueling: number | null
}

export type RefuelLogMinAggregateOutputType = {
  id: string | null
  employeeEquipmentLogId: string | null
  truckingLogId: string | null
  tascoLogId: string | null
  gallonsRefueled: number | null
  milesAtFueling: number | null
}

export type RefuelLogMaxAggregateOutputType = {
  id: string | null
  employeeEquipmentLogId: string | null
  truckingLogId: string | null
  tascoLogId: string | null
  gallonsRefueled: number | null
  milesAtFueling: number | null
}

export type RefuelLogCountAggregateOutputType = {
  id: number
  employeeEquipmentLogId: number
  truckingLogId: number
  tascoLogId: number
  gallonsRefueled: number
  milesAtFueling: number
  _all: number
}


export type RefuelLogAvgAggregateInputType = {
  gallonsRefueled?: true
  milesAtFueling?: true
}

export type RefuelLogSumAggregateInputType = {
  gallonsRefueled?: true
  milesAtFueling?: true
}

export type RefuelLogMinAggregateInputType = {
  id?: true
  employeeEquipmentLogId?: true
  truckingLogId?: true
  tascoLogId?: true
  gallonsRefueled?: true
  milesAtFueling?: true
}

export type RefuelLogMaxAggregateInputType = {
  id?: true
  employeeEquipmentLogId?: true
  truckingLogId?: true
  tascoLogId?: true
  gallonsRefueled?: true
  milesAtFueling?: true
}

export type RefuelLogCountAggregateInputType = {
  id?: true
  employeeEquipmentLogId?: true
  truckingLogId?: true
  tascoLogId?: true
  gallonsRefueled?: true
  milesAtFueling?: true
  _all?: true
}

export type RefuelLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RefuelLog to aggregate.
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefuelLogs to fetch.
   */
  orderBy?: Prisma.RefuelLogOrderByWithRelationInput | Prisma.RefuelLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RefuelLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefuelLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefuelLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RefuelLogs
  **/
  _count?: true | RefuelLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RefuelLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RefuelLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RefuelLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RefuelLogMaxAggregateInputType
}

export type GetRefuelLogAggregateType<T extends RefuelLogAggregateArgs> = {
      [P in keyof T & keyof AggregateRefuelLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRefuelLog[P]>
    : Prisma.GetScalarType<T[P], AggregateRefuelLog[P]>
}




export type RefuelLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RefuelLogWhereInput
  orderBy?: Prisma.RefuelLogOrderByWithAggregationInput | Prisma.RefuelLogOrderByWithAggregationInput[]
  by: Prisma.RefuelLogScalarFieldEnum[] | Prisma.RefuelLogScalarFieldEnum
  having?: Prisma.RefuelLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RefuelLogCountAggregateInputType | true
  _avg?: RefuelLogAvgAggregateInputType
  _sum?: RefuelLogSumAggregateInputType
  _min?: RefuelLogMinAggregateInputType
  _max?: RefuelLogMaxAggregateInputType
}

export type RefuelLogGroupByOutputType = {
  id: string
  employeeEquipmentLogId: string | null
  truckingLogId: string | null
  tascoLogId: string | null
  gallonsRefueled: number | null
  milesAtFueling: number | null
  _count: RefuelLogCountAggregateOutputType | null
  _avg: RefuelLogAvgAggregateOutputType | null
  _sum: RefuelLogSumAggregateOutputType | null
  _min: RefuelLogMinAggregateOutputType | null
  _max: RefuelLogMaxAggregateOutputType | null
}

type GetRefuelLogGroupByPayload<T extends RefuelLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RefuelLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RefuelLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RefuelLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RefuelLogGroupByOutputType[P]>
      }
    >
  >



export type RefuelLogWhereInput = {
  AND?: Prisma.RefuelLogWhereInput | Prisma.RefuelLogWhereInput[]
  OR?: Prisma.RefuelLogWhereInput[]
  NOT?: Prisma.RefuelLogWhereInput | Prisma.RefuelLogWhereInput[]
  id?: Prisma.StringFilter<"RefuelLog"> | string
  employeeEquipmentLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  truckingLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  tascoLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  gallonsRefueled?: Prisma.FloatNullableFilter<"RefuelLog"> | number | null
  milesAtFueling?: Prisma.IntNullableFilter<"RefuelLog"> | number | null
  EmployeeEquipmentLog?: Prisma.XOR<Prisma.EmployeeEquipmentLogNullableScalarRelationFilter, Prisma.EmployeeEquipmentLogWhereInput> | null
  TascoLog?: Prisma.XOR<Prisma.TascoLogNullableScalarRelationFilter, Prisma.TascoLogWhereInput> | null
  TruckingLog?: Prisma.XOR<Prisma.TruckingLogNullableScalarRelationFilter, Prisma.TruckingLogWhereInput> | null
}

export type RefuelLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  employeeEquipmentLogId?: Prisma.SortOrderInput | Prisma.SortOrder
  truckingLogId?: Prisma.SortOrderInput | Prisma.SortOrder
  tascoLogId?: Prisma.SortOrderInput | Prisma.SortOrder
  gallonsRefueled?: Prisma.SortOrderInput | Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrderInput | Prisma.SortOrder
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogOrderByWithRelationInput
  TascoLog?: Prisma.TascoLogOrderByWithRelationInput
  TruckingLog?: Prisma.TruckingLogOrderByWithRelationInput
}

export type RefuelLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  employeeEquipmentLogId?: string
  AND?: Prisma.RefuelLogWhereInput | Prisma.RefuelLogWhereInput[]
  OR?: Prisma.RefuelLogWhereInput[]
  NOT?: Prisma.RefuelLogWhereInput | Prisma.RefuelLogWhereInput[]
  truckingLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  tascoLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  gallonsRefueled?: Prisma.FloatNullableFilter<"RefuelLog"> | number | null
  milesAtFueling?: Prisma.IntNullableFilter<"RefuelLog"> | number | null
  EmployeeEquipmentLog?: Prisma.XOR<Prisma.EmployeeEquipmentLogNullableScalarRelationFilter, Prisma.EmployeeEquipmentLogWhereInput> | null
  TascoLog?: Prisma.XOR<Prisma.TascoLogNullableScalarRelationFilter, Prisma.TascoLogWhereInput> | null
  TruckingLog?: Prisma.XOR<Prisma.TruckingLogNullableScalarRelationFilter, Prisma.TruckingLogWhereInput> | null
}, "id" | "employeeEquipmentLogId">

export type RefuelLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  employeeEquipmentLogId?: Prisma.SortOrderInput | Prisma.SortOrder
  truckingLogId?: Prisma.SortOrderInput | Prisma.SortOrder
  tascoLogId?: Prisma.SortOrderInput | Prisma.SortOrder
  gallonsRefueled?: Prisma.SortOrderInput | Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RefuelLogCountOrderByAggregateInput
  _avg?: Prisma.RefuelLogAvgOrderByAggregateInput
  _max?: Prisma.RefuelLogMaxOrderByAggregateInput
  _min?: Prisma.RefuelLogMinOrderByAggregateInput
  _sum?: Prisma.RefuelLogSumOrderByAggregateInput
}

export type RefuelLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.RefuelLogScalarWhereWithAggregatesInput | Prisma.RefuelLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.RefuelLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RefuelLogScalarWhereWithAggregatesInput | Prisma.RefuelLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RefuelLog"> | string
  employeeEquipmentLogId?: Prisma.StringNullableWithAggregatesFilter<"RefuelLog"> | string | null
  truckingLogId?: Prisma.StringNullableWithAggregatesFilter<"RefuelLog"> | string | null
  tascoLogId?: Prisma.StringNullableWithAggregatesFilter<"RefuelLog"> | string | null
  gallonsRefueled?: Prisma.FloatNullableWithAggregatesFilter<"RefuelLog"> | number | null
  milesAtFueling?: Prisma.IntNullableWithAggregatesFilter<"RefuelLog"> | number | null
}

export type RefuelLogCreateInput = {
  id?: string
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogCreateNestedOneWithoutRefuelLogInput
  TascoLog?: Prisma.TascoLogCreateNestedOneWithoutRefuelLogsInput
  TruckingLog?: Prisma.TruckingLogCreateNestedOneWithoutRefuelLogsInput
}

export type RefuelLogUncheckedCreateInput = {
  id?: string
  employeeEquipmentLogId?: string | null
  truckingLogId?: string | null
  tascoLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogUpdateOneWithoutRefuelLogNestedInput
  TascoLog?: Prisma.TascoLogUpdateOneWithoutRefuelLogsNestedInput
  TruckingLog?: Prisma.TruckingLogUpdateOneWithoutRefuelLogsNestedInput
}

export type RefuelLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employeeEquipmentLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  truckingLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tascoLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogCreateManyInput = {
  id?: string
  employeeEquipmentLogId?: string | null
  truckingLogId?: string | null
  tascoLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employeeEquipmentLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  truckingLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tascoLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogNullableScalarRelationFilter = {
  is?: Prisma.RefuelLogWhereInput | null
  isNot?: Prisma.RefuelLogWhereInput | null
}

export type RefuelLogListRelationFilter = {
  every?: Prisma.RefuelLogWhereInput
  some?: Prisma.RefuelLogWhereInput
  none?: Prisma.RefuelLogWhereInput
}

export type RefuelLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RefuelLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  employeeEquipmentLogId?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  tascoLogId?: Prisma.SortOrder
  gallonsRefueled?: Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrder
}

export type RefuelLogAvgOrderByAggregateInput = {
  gallonsRefueled?: Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrder
}

export type RefuelLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  employeeEquipmentLogId?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  tascoLogId?: Prisma.SortOrder
  gallonsRefueled?: Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrder
}

export type RefuelLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  employeeEquipmentLogId?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  tascoLogId?: Prisma.SortOrder
  gallonsRefueled?: Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrder
}

export type RefuelLogSumOrderByAggregateInput = {
  gallonsRefueled?: Prisma.SortOrder
  milesAtFueling?: Prisma.SortOrder
}

export type RefuelLogCreateNestedOneWithoutEmployeeEquipmentLogInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput>
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutEmployeeEquipmentLogInput
  connect?: Prisma.RefuelLogWhereUniqueInput
}

export type RefuelLogUncheckedCreateNestedOneWithoutEmployeeEquipmentLogInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput>
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutEmployeeEquipmentLogInput
  connect?: Prisma.RefuelLogWhereUniqueInput
}

export type RefuelLogUpdateOneWithoutEmployeeEquipmentLogNestedInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput>
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutEmployeeEquipmentLogInput
  upsert?: Prisma.RefuelLogUpsertWithoutEmployeeEquipmentLogInput
  disconnect?: Prisma.RefuelLogWhereInput | boolean
  delete?: Prisma.RefuelLogWhereInput | boolean
  connect?: Prisma.RefuelLogWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RefuelLogUpdateToOneWithWhereWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUpdateWithoutEmployeeEquipmentLogInput>, Prisma.RefuelLogUncheckedUpdateWithoutEmployeeEquipmentLogInput>
}

export type RefuelLogUncheckedUpdateOneWithoutEmployeeEquipmentLogNestedInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput>
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutEmployeeEquipmentLogInput
  upsert?: Prisma.RefuelLogUpsertWithoutEmployeeEquipmentLogInput
  disconnect?: Prisma.RefuelLogWhereInput | boolean
  delete?: Prisma.RefuelLogWhereInput | boolean
  connect?: Prisma.RefuelLogWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RefuelLogUpdateToOneWithWhereWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUpdateWithoutEmployeeEquipmentLogInput>, Prisma.RefuelLogUncheckedUpdateWithoutEmployeeEquipmentLogInput>
}

export type RefuelLogCreateNestedManyWithoutTascoLogInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTascoLogInput, Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput> | Prisma.RefuelLogCreateWithoutTascoLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput | Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTascoLogInputEnvelope
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
}

export type RefuelLogUncheckedCreateNestedManyWithoutTascoLogInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTascoLogInput, Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput> | Prisma.RefuelLogCreateWithoutTascoLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput | Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTascoLogInputEnvelope
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
}

export type RefuelLogUpdateManyWithoutTascoLogNestedInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTascoLogInput, Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput> | Prisma.RefuelLogCreateWithoutTascoLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput | Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput[]
  upsert?: Prisma.RefuelLogUpsertWithWhereUniqueWithoutTascoLogInput | Prisma.RefuelLogUpsertWithWhereUniqueWithoutTascoLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTascoLogInputEnvelope
  set?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  disconnect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  delete?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  update?: Prisma.RefuelLogUpdateWithWhereUniqueWithoutTascoLogInput | Prisma.RefuelLogUpdateWithWhereUniqueWithoutTascoLogInput[]
  updateMany?: Prisma.RefuelLogUpdateManyWithWhereWithoutTascoLogInput | Prisma.RefuelLogUpdateManyWithWhereWithoutTascoLogInput[]
  deleteMany?: Prisma.RefuelLogScalarWhereInput | Prisma.RefuelLogScalarWhereInput[]
}

export type RefuelLogUncheckedUpdateManyWithoutTascoLogNestedInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTascoLogInput, Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput> | Prisma.RefuelLogCreateWithoutTascoLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput | Prisma.RefuelLogCreateOrConnectWithoutTascoLogInput[]
  upsert?: Prisma.RefuelLogUpsertWithWhereUniqueWithoutTascoLogInput | Prisma.RefuelLogUpsertWithWhereUniqueWithoutTascoLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTascoLogInputEnvelope
  set?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  disconnect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  delete?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  update?: Prisma.RefuelLogUpdateWithWhereUniqueWithoutTascoLogInput | Prisma.RefuelLogUpdateWithWhereUniqueWithoutTascoLogInput[]
  updateMany?: Prisma.RefuelLogUpdateManyWithWhereWithoutTascoLogInput | Prisma.RefuelLogUpdateManyWithWhereWithoutTascoLogInput[]
  deleteMany?: Prisma.RefuelLogScalarWhereInput | Prisma.RefuelLogScalarWhereInput[]
}

export type RefuelLogCreateNestedManyWithoutTruckingLogInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput> | Prisma.RefuelLogCreateWithoutTruckingLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput | Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTruckingLogInputEnvelope
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
}

export type RefuelLogUncheckedCreateNestedManyWithoutTruckingLogInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput> | Prisma.RefuelLogCreateWithoutTruckingLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput | Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTruckingLogInputEnvelope
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
}

export type RefuelLogUpdateManyWithoutTruckingLogNestedInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput> | Prisma.RefuelLogCreateWithoutTruckingLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput | Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput[]
  upsert?: Prisma.RefuelLogUpsertWithWhereUniqueWithoutTruckingLogInput | Prisma.RefuelLogUpsertWithWhereUniqueWithoutTruckingLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTruckingLogInputEnvelope
  set?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  disconnect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  delete?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  update?: Prisma.RefuelLogUpdateWithWhereUniqueWithoutTruckingLogInput | Prisma.RefuelLogUpdateWithWhereUniqueWithoutTruckingLogInput[]
  updateMany?: Prisma.RefuelLogUpdateManyWithWhereWithoutTruckingLogInput | Prisma.RefuelLogUpdateManyWithWhereWithoutTruckingLogInput[]
  deleteMany?: Prisma.RefuelLogScalarWhereInput | Prisma.RefuelLogScalarWhereInput[]
}

export type RefuelLogUncheckedUpdateManyWithoutTruckingLogNestedInput = {
  create?: Prisma.XOR<Prisma.RefuelLogCreateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput> | Prisma.RefuelLogCreateWithoutTruckingLogInput[] | Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput | Prisma.RefuelLogCreateOrConnectWithoutTruckingLogInput[]
  upsert?: Prisma.RefuelLogUpsertWithWhereUniqueWithoutTruckingLogInput | Prisma.RefuelLogUpsertWithWhereUniqueWithoutTruckingLogInput[]
  createMany?: Prisma.RefuelLogCreateManyTruckingLogInputEnvelope
  set?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  disconnect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  delete?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  connect?: Prisma.RefuelLogWhereUniqueInput | Prisma.RefuelLogWhereUniqueInput[]
  update?: Prisma.RefuelLogUpdateWithWhereUniqueWithoutTruckingLogInput | Prisma.RefuelLogUpdateWithWhereUniqueWithoutTruckingLogInput[]
  updateMany?: Prisma.RefuelLogUpdateManyWithWhereWithoutTruckingLogInput | Prisma.RefuelLogUpdateManyWithWhereWithoutTruckingLogInput[]
  deleteMany?: Prisma.RefuelLogScalarWhereInput | Prisma.RefuelLogScalarWhereInput[]
}

export type RefuelLogCreateWithoutEmployeeEquipmentLogInput = {
  id?: string
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
  TascoLog?: Prisma.TascoLogCreateNestedOneWithoutRefuelLogsInput
  TruckingLog?: Prisma.TruckingLogCreateNestedOneWithoutRefuelLogsInput
}

export type RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput = {
  id?: string
  truckingLogId?: string | null
  tascoLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogCreateOrConnectWithoutEmployeeEquipmentLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  create: Prisma.XOR<Prisma.RefuelLogCreateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput>
}

export type RefuelLogUpsertWithoutEmployeeEquipmentLogInput = {
  update: Prisma.XOR<Prisma.RefuelLogUpdateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedUpdateWithoutEmployeeEquipmentLogInput>
  create: Prisma.XOR<Prisma.RefuelLogCreateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedCreateWithoutEmployeeEquipmentLogInput>
  where?: Prisma.RefuelLogWhereInput
}

export type RefuelLogUpdateToOneWithWhereWithoutEmployeeEquipmentLogInput = {
  where?: Prisma.RefuelLogWhereInput
  data: Prisma.XOR<Prisma.RefuelLogUpdateWithoutEmployeeEquipmentLogInput, Prisma.RefuelLogUncheckedUpdateWithoutEmployeeEquipmentLogInput>
}

export type RefuelLogUpdateWithoutEmployeeEquipmentLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  TascoLog?: Prisma.TascoLogUpdateOneWithoutRefuelLogsNestedInput
  TruckingLog?: Prisma.TruckingLogUpdateOneWithoutRefuelLogsNestedInput
}

export type RefuelLogUncheckedUpdateWithoutEmployeeEquipmentLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  truckingLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tascoLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogCreateWithoutTascoLogInput = {
  id?: string
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogCreateNestedOneWithoutRefuelLogInput
  TruckingLog?: Prisma.TruckingLogCreateNestedOneWithoutRefuelLogsInput
}

export type RefuelLogUncheckedCreateWithoutTascoLogInput = {
  id?: string
  employeeEquipmentLogId?: string | null
  truckingLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogCreateOrConnectWithoutTascoLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  create: Prisma.XOR<Prisma.RefuelLogCreateWithoutTascoLogInput, Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput>
}

export type RefuelLogCreateManyTascoLogInputEnvelope = {
  data: Prisma.RefuelLogCreateManyTascoLogInput | Prisma.RefuelLogCreateManyTascoLogInput[]
  skipDuplicates?: boolean
}

export type RefuelLogUpsertWithWhereUniqueWithoutTascoLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  update: Prisma.XOR<Prisma.RefuelLogUpdateWithoutTascoLogInput, Prisma.RefuelLogUncheckedUpdateWithoutTascoLogInput>
  create: Prisma.XOR<Prisma.RefuelLogCreateWithoutTascoLogInput, Prisma.RefuelLogUncheckedCreateWithoutTascoLogInput>
}

export type RefuelLogUpdateWithWhereUniqueWithoutTascoLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  data: Prisma.XOR<Prisma.RefuelLogUpdateWithoutTascoLogInput, Prisma.RefuelLogUncheckedUpdateWithoutTascoLogInput>
}

export type RefuelLogUpdateManyWithWhereWithoutTascoLogInput = {
  where: Prisma.RefuelLogScalarWhereInput
  data: Prisma.XOR<Prisma.RefuelLogUpdateManyMutationInput, Prisma.RefuelLogUncheckedUpdateManyWithoutTascoLogInput>
}

export type RefuelLogScalarWhereInput = {
  AND?: Prisma.RefuelLogScalarWhereInput | Prisma.RefuelLogScalarWhereInput[]
  OR?: Prisma.RefuelLogScalarWhereInput[]
  NOT?: Prisma.RefuelLogScalarWhereInput | Prisma.RefuelLogScalarWhereInput[]
  id?: Prisma.StringFilter<"RefuelLog"> | string
  employeeEquipmentLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  truckingLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  tascoLogId?: Prisma.StringNullableFilter<"RefuelLog"> | string | null
  gallonsRefueled?: Prisma.FloatNullableFilter<"RefuelLog"> | number | null
  milesAtFueling?: Prisma.IntNullableFilter<"RefuelLog"> | number | null
}

export type RefuelLogCreateWithoutTruckingLogInput = {
  id?: string
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogCreateNestedOneWithoutRefuelLogInput
  TascoLog?: Prisma.TascoLogCreateNestedOneWithoutRefuelLogsInput
}

export type RefuelLogUncheckedCreateWithoutTruckingLogInput = {
  id?: string
  employeeEquipmentLogId?: string | null
  tascoLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogCreateOrConnectWithoutTruckingLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  create: Prisma.XOR<Prisma.RefuelLogCreateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput>
}

export type RefuelLogCreateManyTruckingLogInputEnvelope = {
  data: Prisma.RefuelLogCreateManyTruckingLogInput | Prisma.RefuelLogCreateManyTruckingLogInput[]
  skipDuplicates?: boolean
}

export type RefuelLogUpsertWithWhereUniqueWithoutTruckingLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  update: Prisma.XOR<Prisma.RefuelLogUpdateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedUpdateWithoutTruckingLogInput>
  create: Prisma.XOR<Prisma.RefuelLogCreateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedCreateWithoutTruckingLogInput>
}

export type RefuelLogUpdateWithWhereUniqueWithoutTruckingLogInput = {
  where: Prisma.RefuelLogWhereUniqueInput
  data: Prisma.XOR<Prisma.RefuelLogUpdateWithoutTruckingLogInput, Prisma.RefuelLogUncheckedUpdateWithoutTruckingLogInput>
}

export type RefuelLogUpdateManyWithWhereWithoutTruckingLogInput = {
  where: Prisma.RefuelLogScalarWhereInput
  data: Prisma.XOR<Prisma.RefuelLogUpdateManyMutationInput, Prisma.RefuelLogUncheckedUpdateManyWithoutTruckingLogInput>
}

export type RefuelLogCreateManyTascoLogInput = {
  id?: string
  employeeEquipmentLogId?: string | null
  truckingLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogUpdateWithoutTascoLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogUpdateOneWithoutRefuelLogNestedInput
  TruckingLog?: Prisma.TruckingLogUpdateOneWithoutRefuelLogsNestedInput
}

export type RefuelLogUncheckedUpdateWithoutTascoLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employeeEquipmentLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  truckingLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogUncheckedUpdateManyWithoutTascoLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employeeEquipmentLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  truckingLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogCreateManyTruckingLogInput = {
  id?: string
  employeeEquipmentLogId?: string | null
  tascoLogId?: string | null
  gallonsRefueled?: number | null
  milesAtFueling?: number | null
}

export type RefuelLogUpdateWithoutTruckingLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  EmployeeEquipmentLog?: Prisma.EmployeeEquipmentLogUpdateOneWithoutRefuelLogNestedInput
  TascoLog?: Prisma.TascoLogUpdateOneWithoutRefuelLogsNestedInput
}

export type RefuelLogUncheckedUpdateWithoutTruckingLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employeeEquipmentLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tascoLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RefuelLogUncheckedUpdateManyWithoutTruckingLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employeeEquipmentLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tascoLogId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  gallonsRefueled?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  milesAtFueling?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type RefuelLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  employeeEquipmentLogId?: boolean
  truckingLogId?: boolean
  tascoLogId?: boolean
  gallonsRefueled?: boolean
  milesAtFueling?: boolean
  EmployeeEquipmentLog?: boolean | Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>
  TascoLog?: boolean | Prisma.RefuelLog$TascoLogArgs<ExtArgs>
  TruckingLog?: boolean | Prisma.RefuelLog$TruckingLogArgs<ExtArgs>
}, ExtArgs["result"]["refuelLog"]>

export type RefuelLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  employeeEquipmentLogId?: boolean
  truckingLogId?: boolean
  tascoLogId?: boolean
  gallonsRefueled?: boolean
  milesAtFueling?: boolean
  EmployeeEquipmentLog?: boolean | Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>
  TascoLog?: boolean | Prisma.RefuelLog$TascoLogArgs<ExtArgs>
  TruckingLog?: boolean | Prisma.RefuelLog$TruckingLogArgs<ExtArgs>
}, ExtArgs["result"]["refuelLog"]>

export type RefuelLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  employeeEquipmentLogId?: boolean
  truckingLogId?: boolean
  tascoLogId?: boolean
  gallonsRefueled?: boolean
  milesAtFueling?: boolean
  EmployeeEquipmentLog?: boolean | Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>
  TascoLog?: boolean | Prisma.RefuelLog$TascoLogArgs<ExtArgs>
  TruckingLog?: boolean | Prisma.RefuelLog$TruckingLogArgs<ExtArgs>
}, ExtArgs["result"]["refuelLog"]>

export type RefuelLogSelectScalar = {
  id?: boolean
  employeeEquipmentLogId?: boolean
  truckingLogId?: boolean
  tascoLogId?: boolean
  gallonsRefueled?: boolean
  milesAtFueling?: boolean
}

export type RefuelLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "employeeEquipmentLogId" | "truckingLogId" | "tascoLogId" | "gallonsRefueled" | "milesAtFueling", ExtArgs["result"]["refuelLog"]>
export type RefuelLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EmployeeEquipmentLog?: boolean | Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>
  TascoLog?: boolean | Prisma.RefuelLog$TascoLogArgs<ExtArgs>
  TruckingLog?: boolean | Prisma.RefuelLog$TruckingLogArgs<ExtArgs>
}
export type RefuelLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EmployeeEquipmentLog?: boolean | Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>
  TascoLog?: boolean | Prisma.RefuelLog$TascoLogArgs<ExtArgs>
  TruckingLog?: boolean | Prisma.RefuelLog$TruckingLogArgs<ExtArgs>
}
export type RefuelLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EmployeeEquipmentLog?: boolean | Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>
  TascoLog?: boolean | Prisma.RefuelLog$TascoLogArgs<ExtArgs>
  TruckingLog?: boolean | Prisma.RefuelLog$TruckingLogArgs<ExtArgs>
}

export type $RefuelLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RefuelLog"
  objects: {
    EmployeeEquipmentLog: Prisma.$EmployeeEquipmentLogPayload<ExtArgs> | null
    TascoLog: Prisma.$TascoLogPayload<ExtArgs> | null
    TruckingLog: Prisma.$TruckingLogPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    employeeEquipmentLogId: string | null
    truckingLogId: string | null
    tascoLogId: string | null
    gallonsRefueled: number | null
    milesAtFueling: number | null
  }, ExtArgs["result"]["refuelLog"]>
  composites: {}
}

export type RefuelLogGetPayload<S extends boolean | null | undefined | RefuelLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload, S>

export type RefuelLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RefuelLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RefuelLogCountAggregateInputType | true
  }

export interface RefuelLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefuelLog'], meta: { name: 'RefuelLog' } }
  /**
   * Find zero or one RefuelLog that matches the filter.
   * @param {RefuelLogFindUniqueArgs} args - Arguments to find a RefuelLog
   * @example
   * // Get one RefuelLog
   * const refuelLog = await prisma.refuelLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RefuelLogFindUniqueArgs>(args: Prisma.SelectSubset<T, RefuelLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RefuelLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RefuelLogFindUniqueOrThrowArgs} args - Arguments to find a RefuelLog
   * @example
   * // Get one RefuelLog
   * const refuelLog = await prisma.refuelLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RefuelLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RefuelLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RefuelLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogFindFirstArgs} args - Arguments to find a RefuelLog
   * @example
   * // Get one RefuelLog
   * const refuelLog = await prisma.refuelLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RefuelLogFindFirstArgs>(args?: Prisma.SelectSubset<T, RefuelLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RefuelLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogFindFirstOrThrowArgs} args - Arguments to find a RefuelLog
   * @example
   * // Get one RefuelLog
   * const refuelLog = await prisma.refuelLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RefuelLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RefuelLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RefuelLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RefuelLogs
   * const refuelLogs = await prisma.refuelLog.findMany()
   * 
   * // Get first 10 RefuelLogs
   * const refuelLogs = await prisma.refuelLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const refuelLogWithIdOnly = await prisma.refuelLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RefuelLogFindManyArgs>(args?: Prisma.SelectSubset<T, RefuelLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RefuelLog.
   * @param {RefuelLogCreateArgs} args - Arguments to create a RefuelLog.
   * @example
   * // Create one RefuelLog
   * const RefuelLog = await prisma.refuelLog.create({
   *   data: {
   *     // ... data to create a RefuelLog
   *   }
   * })
   * 
   */
  create<T extends RefuelLogCreateArgs>(args: Prisma.SelectSubset<T, RefuelLogCreateArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RefuelLogs.
   * @param {RefuelLogCreateManyArgs} args - Arguments to create many RefuelLogs.
   * @example
   * // Create many RefuelLogs
   * const refuelLog = await prisma.refuelLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RefuelLogCreateManyArgs>(args?: Prisma.SelectSubset<T, RefuelLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RefuelLogs and returns the data saved in the database.
   * @param {RefuelLogCreateManyAndReturnArgs} args - Arguments to create many RefuelLogs.
   * @example
   * // Create many RefuelLogs
   * const refuelLog = await prisma.refuelLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RefuelLogs and only return the `id`
   * const refuelLogWithIdOnly = await prisma.refuelLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RefuelLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RefuelLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RefuelLog.
   * @param {RefuelLogDeleteArgs} args - Arguments to delete one RefuelLog.
   * @example
   * // Delete one RefuelLog
   * const RefuelLog = await prisma.refuelLog.delete({
   *   where: {
   *     // ... filter to delete one RefuelLog
   *   }
   * })
   * 
   */
  delete<T extends RefuelLogDeleteArgs>(args: Prisma.SelectSubset<T, RefuelLogDeleteArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RefuelLog.
   * @param {RefuelLogUpdateArgs} args - Arguments to update one RefuelLog.
   * @example
   * // Update one RefuelLog
   * const refuelLog = await prisma.refuelLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RefuelLogUpdateArgs>(args: Prisma.SelectSubset<T, RefuelLogUpdateArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RefuelLogs.
   * @param {RefuelLogDeleteManyArgs} args - Arguments to filter RefuelLogs to delete.
   * @example
   * // Delete a few RefuelLogs
   * const { count } = await prisma.refuelLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RefuelLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, RefuelLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RefuelLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RefuelLogs
   * const refuelLog = await prisma.refuelLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RefuelLogUpdateManyArgs>(args: Prisma.SelectSubset<T, RefuelLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RefuelLogs and returns the data updated in the database.
   * @param {RefuelLogUpdateManyAndReturnArgs} args - Arguments to update many RefuelLogs.
   * @example
   * // Update many RefuelLogs
   * const refuelLog = await prisma.refuelLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RefuelLogs and only return the `id`
   * const refuelLogWithIdOnly = await prisma.refuelLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RefuelLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RefuelLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RefuelLog.
   * @param {RefuelLogUpsertArgs} args - Arguments to update or create a RefuelLog.
   * @example
   * // Update or create a RefuelLog
   * const refuelLog = await prisma.refuelLog.upsert({
   *   create: {
   *     // ... data to create a RefuelLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RefuelLog we want to update
   *   }
   * })
   */
  upsert<T extends RefuelLogUpsertArgs>(args: Prisma.SelectSubset<T, RefuelLogUpsertArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RefuelLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogCountArgs} args - Arguments to filter RefuelLogs to count.
   * @example
   * // Count the number of RefuelLogs
   * const count = await prisma.refuelLog.count({
   *   where: {
   *     // ... the filter for the RefuelLogs we want to count
   *   }
   * })
  **/
  count<T extends RefuelLogCountArgs>(
    args?: Prisma.Subset<T, RefuelLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RefuelLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RefuelLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RefuelLogAggregateArgs>(args: Prisma.Subset<T, RefuelLogAggregateArgs>): Prisma.PrismaPromise<GetRefuelLogAggregateType<T>>

  /**
   * Group by RefuelLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RefuelLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RefuelLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RefuelLogGroupByArgs['orderBy'] }
      : { orderBy?: RefuelLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RefuelLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefuelLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RefuelLog model
 */
readonly fields: RefuelLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RefuelLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RefuelLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  EmployeeEquipmentLog<T extends Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RefuelLog$EmployeeEquipmentLogArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  TascoLog<T extends Prisma.RefuelLog$TascoLogArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RefuelLog$TascoLogArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  TruckingLog<T extends Prisma.RefuelLog$TruckingLogArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RefuelLog$TruckingLogArgs<ExtArgs>>): Prisma.Prisma__TruckingLogClient<runtime.Types.Result.GetResult<Prisma.$TruckingLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RefuelLog model
 */
export interface RefuelLogFieldRefs {
  readonly id: Prisma.FieldRef<"RefuelLog", 'String'>
  readonly employeeEquipmentLogId: Prisma.FieldRef<"RefuelLog", 'String'>
  readonly truckingLogId: Prisma.FieldRef<"RefuelLog", 'String'>
  readonly tascoLogId: Prisma.FieldRef<"RefuelLog", 'String'>
  readonly gallonsRefueled: Prisma.FieldRef<"RefuelLog", 'Float'>
  readonly milesAtFueling: Prisma.FieldRef<"RefuelLog", 'Int'>
}
    

// Custom InputTypes
/**
 * RefuelLog findUnique
 */
export type RefuelLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * Filter, which RefuelLog to fetch.
   */
  where: Prisma.RefuelLogWhereUniqueInput
}

/**
 * RefuelLog findUniqueOrThrow
 */
export type RefuelLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * Filter, which RefuelLog to fetch.
   */
  where: Prisma.RefuelLogWhereUniqueInput
}

/**
 * RefuelLog findFirst
 */
export type RefuelLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * Filter, which RefuelLog to fetch.
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefuelLogs to fetch.
   */
  orderBy?: Prisma.RefuelLogOrderByWithRelationInput | Prisma.RefuelLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RefuelLogs.
   */
  cursor?: Prisma.RefuelLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefuelLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefuelLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RefuelLogs.
   */
  distinct?: Prisma.RefuelLogScalarFieldEnum | Prisma.RefuelLogScalarFieldEnum[]
}

/**
 * RefuelLog findFirstOrThrow
 */
export type RefuelLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * Filter, which RefuelLog to fetch.
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefuelLogs to fetch.
   */
  orderBy?: Prisma.RefuelLogOrderByWithRelationInput | Prisma.RefuelLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RefuelLogs.
   */
  cursor?: Prisma.RefuelLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefuelLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefuelLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RefuelLogs.
   */
  distinct?: Prisma.RefuelLogScalarFieldEnum | Prisma.RefuelLogScalarFieldEnum[]
}

/**
 * RefuelLog findMany
 */
export type RefuelLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * Filter, which RefuelLogs to fetch.
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RefuelLogs to fetch.
   */
  orderBy?: Prisma.RefuelLogOrderByWithRelationInput | Prisma.RefuelLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RefuelLogs.
   */
  cursor?: Prisma.RefuelLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RefuelLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RefuelLogs.
   */
  skip?: number
  distinct?: Prisma.RefuelLogScalarFieldEnum | Prisma.RefuelLogScalarFieldEnum[]
}

/**
 * RefuelLog create
 */
export type RefuelLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * The data needed to create a RefuelLog.
   */
  data?: Prisma.XOR<Prisma.RefuelLogCreateInput, Prisma.RefuelLogUncheckedCreateInput>
}

/**
 * RefuelLog createMany
 */
export type RefuelLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RefuelLogs.
   */
  data: Prisma.RefuelLogCreateManyInput | Prisma.RefuelLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RefuelLog createManyAndReturn
 */
export type RefuelLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * The data used to create many RefuelLogs.
   */
  data: Prisma.RefuelLogCreateManyInput | Prisma.RefuelLogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RefuelLog update
 */
export type RefuelLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * The data needed to update a RefuelLog.
   */
  data: Prisma.XOR<Prisma.RefuelLogUpdateInput, Prisma.RefuelLogUncheckedUpdateInput>
  /**
   * Choose, which RefuelLog to update.
   */
  where: Prisma.RefuelLogWhereUniqueInput
}

/**
 * RefuelLog updateMany
 */
export type RefuelLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RefuelLogs.
   */
  data: Prisma.XOR<Prisma.RefuelLogUpdateManyMutationInput, Prisma.RefuelLogUncheckedUpdateManyInput>
  /**
   * Filter which RefuelLogs to update
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * Limit how many RefuelLogs to update.
   */
  limit?: number
}

/**
 * RefuelLog updateManyAndReturn
 */
export type RefuelLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * The data used to update RefuelLogs.
   */
  data: Prisma.XOR<Prisma.RefuelLogUpdateManyMutationInput, Prisma.RefuelLogUncheckedUpdateManyInput>
  /**
   * Filter which RefuelLogs to update
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * Limit how many RefuelLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RefuelLog upsert
 */
export type RefuelLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * The filter to search for the RefuelLog to update in case it exists.
   */
  where: Prisma.RefuelLogWhereUniqueInput
  /**
   * In case the RefuelLog found by the `where` argument doesn't exist, create a new RefuelLog with this data.
   */
  create: Prisma.XOR<Prisma.RefuelLogCreateInput, Prisma.RefuelLogUncheckedCreateInput>
  /**
   * In case the RefuelLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RefuelLogUpdateInput, Prisma.RefuelLogUncheckedUpdateInput>
}

/**
 * RefuelLog delete
 */
export type RefuelLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  /**
   * Filter which RefuelLog to delete.
   */
  where: Prisma.RefuelLogWhereUniqueInput
}

/**
 * RefuelLog deleteMany
 */
export type RefuelLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RefuelLogs to delete
   */
  where?: Prisma.RefuelLogWhereInput
  /**
   * Limit how many RefuelLogs to delete.
   */
  limit?: number
}

/**
 * RefuelLog.EmployeeEquipmentLog
 */
export type RefuelLog$EmployeeEquipmentLogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  where?: Prisma.EmployeeEquipmentLogWhereInput
}

/**
 * RefuelLog.TascoLog
 */
export type RefuelLog$TascoLogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  where?: Prisma.TascoLogWhereInput
}

/**
 * RefuelLog.TruckingLog
 */
export type RefuelLog$TruckingLogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TruckingLog
   */
  select?: Prisma.TruckingLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TruckingLog
   */
  omit?: Prisma.TruckingLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TruckingLogInclude<ExtArgs> | null
  where?: Prisma.TruckingLogWhereInput
}

/**
 * RefuelLog without action
 */
export type RefuelLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
}
