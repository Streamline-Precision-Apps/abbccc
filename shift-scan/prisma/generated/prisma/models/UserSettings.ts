
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserSettings
 * 
 */
export type UserSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$UserSettingsPayload>

export type AggregateUserSettings = {
  _count: UserSettingsCountAggregateOutputType | null
  _min: UserSettingsMinAggregateOutputType | null
  _max: UserSettingsMaxAggregateOutputType | null
}

export type UserSettingsMinAggregateOutputType = {
  id: string | null
  userId: string | null
  language: string | null
  generalReminders: boolean | null
  personalReminders: boolean | null
  cameraAccess: boolean | null
  locationAccess: boolean | null
  cookiesAccess: boolean | null
}

export type UserSettingsMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  language: string | null
  generalReminders: boolean | null
  personalReminders: boolean | null
  cameraAccess: boolean | null
  locationAccess: boolean | null
  cookiesAccess: boolean | null
}

export type UserSettingsCountAggregateOutputType = {
  id: number
  userId: number
  language: number
  generalReminders: number
  personalReminders: number
  cameraAccess: number
  locationAccess: number
  cookiesAccess: number
  _all: number
}


export type UserSettingsMinAggregateInputType = {
  id?: true
  userId?: true
  language?: true
  generalReminders?: true
  personalReminders?: true
  cameraAccess?: true
  locationAccess?: true
  cookiesAccess?: true
}

export type UserSettingsMaxAggregateInputType = {
  id?: true
  userId?: true
  language?: true
  generalReminders?: true
  personalReminders?: true
  cameraAccess?: true
  locationAccess?: true
  cookiesAccess?: true
}

export type UserSettingsCountAggregateInputType = {
  id?: true
  userId?: true
  language?: true
  generalReminders?: true
  personalReminders?: true
  cameraAccess?: true
  locationAccess?: true
  cookiesAccess?: true
  _all?: true
}

export type UserSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSettings to aggregate.
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSettings to fetch.
   */
  orderBy?: Prisma.UserSettingsOrderByWithRelationInput | Prisma.UserSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserSettings
  **/
  _count?: true | UserSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserSettingsMaxAggregateInputType
}

export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateUserSettings[P]>
}




export type UserSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserSettingsWhereInput
  orderBy?: Prisma.UserSettingsOrderByWithAggregationInput | Prisma.UserSettingsOrderByWithAggregationInput[]
  by: Prisma.UserSettingsScalarFieldEnum[] | Prisma.UserSettingsScalarFieldEnum
  having?: Prisma.UserSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserSettingsCountAggregateInputType | true
  _min?: UserSettingsMinAggregateInputType
  _max?: UserSettingsMaxAggregateInputType
}

export type UserSettingsGroupByOutputType = {
  id: string
  userId: string
  language: string
  generalReminders: boolean
  personalReminders: boolean
  cameraAccess: boolean
  locationAccess: boolean
  cookiesAccess: boolean
  _count: UserSettingsCountAggregateOutputType | null
  _min: UserSettingsMinAggregateOutputType | null
  _max: UserSettingsMaxAggregateOutputType | null
}

type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
      }
    >
  >



export type UserSettingsWhereInput = {
  AND?: Prisma.UserSettingsWhereInput | Prisma.UserSettingsWhereInput[]
  OR?: Prisma.UserSettingsWhereInput[]
  NOT?: Prisma.UserSettingsWhereInput | Prisma.UserSettingsWhereInput[]
  id?: Prisma.StringFilter<"UserSettings"> | string
  userId?: Prisma.StringFilter<"UserSettings"> | string
  language?: Prisma.StringFilter<"UserSettings"> | string
  generalReminders?: Prisma.BoolFilter<"UserSettings"> | boolean
  personalReminders?: Prisma.BoolFilter<"UserSettings"> | boolean
  cameraAccess?: Prisma.BoolFilter<"UserSettings"> | boolean
  locationAccess?: Prisma.BoolFilter<"UserSettings"> | boolean
  cookiesAccess?: Prisma.BoolFilter<"UserSettings"> | boolean
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  generalReminders?: Prisma.SortOrder
  personalReminders?: Prisma.SortOrder
  cameraAccess?: Prisma.SortOrder
  locationAccess?: Prisma.SortOrder
  cookiesAccess?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
}

export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.UserSettingsWhereInput | Prisma.UserSettingsWhereInput[]
  OR?: Prisma.UserSettingsWhereInput[]
  NOT?: Prisma.UserSettingsWhereInput | Prisma.UserSettingsWhereInput[]
  language?: Prisma.StringFilter<"UserSettings"> | string
  generalReminders?: Prisma.BoolFilter<"UserSettings"> | boolean
  personalReminders?: Prisma.BoolFilter<"UserSettings"> | boolean
  cameraAccess?: Prisma.BoolFilter<"UserSettings"> | boolean
  locationAccess?: Prisma.BoolFilter<"UserSettings"> | boolean
  cookiesAccess?: Prisma.BoolFilter<"UserSettings"> | boolean
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type UserSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  generalReminders?: Prisma.SortOrder
  personalReminders?: Prisma.SortOrder
  cameraAccess?: Prisma.SortOrder
  locationAccess?: Prisma.SortOrder
  cookiesAccess?: Prisma.SortOrder
  _count?: Prisma.UserSettingsCountOrderByAggregateInput
  _max?: Prisma.UserSettingsMaxOrderByAggregateInput
  _min?: Prisma.UserSettingsMinOrderByAggregateInput
}

export type UserSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserSettingsScalarWhereWithAggregatesInput | Prisma.UserSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserSettingsScalarWhereWithAggregatesInput | Prisma.UserSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserSettings"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserSettings"> | string
  language?: Prisma.StringWithAggregatesFilter<"UserSettings"> | string
  generalReminders?: Prisma.BoolWithAggregatesFilter<"UserSettings"> | boolean
  personalReminders?: Prisma.BoolWithAggregatesFilter<"UserSettings"> | boolean
  cameraAccess?: Prisma.BoolWithAggregatesFilter<"UserSettings"> | boolean
  locationAccess?: Prisma.BoolWithAggregatesFilter<"UserSettings"> | boolean
  cookiesAccess?: Prisma.BoolWithAggregatesFilter<"UserSettings"> | boolean
}

export type UserSettingsCreateInput = {
  id?: string
  language?: string
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
  User: Prisma.UserCreateNestedOneWithoutUserSettingsInput
}

export type UserSettingsUncheckedCreateInput = {
  id?: string
  userId: string
  language?: string
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
}

export type UserSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.StringFieldUpdateOperationsInput | string
  generalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  personalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cameraAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  locationAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cookiesAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  User?: Prisma.UserUpdateOneRequiredWithoutUserSettingsNestedInput
}

export type UserSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.StringFieldUpdateOperationsInput | string
  generalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  personalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cameraAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  locationAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cookiesAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserSettingsCreateManyInput = {
  id?: string
  userId: string
  language?: string
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
}

export type UserSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.StringFieldUpdateOperationsInput | string
  generalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  personalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cameraAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  locationAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cookiesAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.StringFieldUpdateOperationsInput | string
  generalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  personalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cameraAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  locationAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cookiesAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserSettingsNullableScalarRelationFilter = {
  is?: Prisma.UserSettingsWhereInput | null
  isNot?: Prisma.UserSettingsWhereInput | null
}

export type UserSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  generalReminders?: Prisma.SortOrder
  personalReminders?: Prisma.SortOrder
  cameraAccess?: Prisma.SortOrder
  locationAccess?: Prisma.SortOrder
  cookiesAccess?: Prisma.SortOrder
}

export type UserSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  generalReminders?: Prisma.SortOrder
  personalReminders?: Prisma.SortOrder
  cameraAccess?: Prisma.SortOrder
  locationAccess?: Prisma.SortOrder
  cookiesAccess?: Prisma.SortOrder
}

export type UserSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  language?: Prisma.SortOrder
  generalReminders?: Prisma.SortOrder
  personalReminders?: Prisma.SortOrder
  cameraAccess?: Prisma.SortOrder
  locationAccess?: Prisma.SortOrder
  cookiesAccess?: Prisma.SortOrder
}

export type UserSettingsCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSettingsCreateWithoutUserInput, Prisma.UserSettingsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSettingsCreateOrConnectWithoutUserInput
  connect?: Prisma.UserSettingsWhereUniqueInput
}

export type UserSettingsUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSettingsCreateWithoutUserInput, Prisma.UserSettingsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSettingsCreateOrConnectWithoutUserInput
  connect?: Prisma.UserSettingsWhereUniqueInput
}

export type UserSettingsUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSettingsCreateWithoutUserInput, Prisma.UserSettingsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSettingsCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserSettingsUpsertWithoutUserInput
  disconnect?: Prisma.UserSettingsWhereInput | boolean
  delete?: Prisma.UserSettingsWhereInput | boolean
  connect?: Prisma.UserSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserSettingsUpdateToOneWithWhereWithoutUserInput, Prisma.UserSettingsUpdateWithoutUserInput>, Prisma.UserSettingsUncheckedUpdateWithoutUserInput>
}

export type UserSettingsUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSettingsCreateWithoutUserInput, Prisma.UserSettingsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSettingsCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserSettingsUpsertWithoutUserInput
  disconnect?: Prisma.UserSettingsWhereInput | boolean
  delete?: Prisma.UserSettingsWhereInput | boolean
  connect?: Prisma.UserSettingsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserSettingsUpdateToOneWithWhereWithoutUserInput, Prisma.UserSettingsUpdateWithoutUserInput>, Prisma.UserSettingsUncheckedUpdateWithoutUserInput>
}

export type UserSettingsCreateWithoutUserInput = {
  id?: string
  language?: string
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
}

export type UserSettingsUncheckedCreateWithoutUserInput = {
  id?: string
  language?: string
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
}

export type UserSettingsCreateOrConnectWithoutUserInput = {
  where: Prisma.UserSettingsWhereUniqueInput
  create: Prisma.XOR<Prisma.UserSettingsCreateWithoutUserInput, Prisma.UserSettingsUncheckedCreateWithoutUserInput>
}

export type UserSettingsUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserSettingsUpdateWithoutUserInput, Prisma.UserSettingsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserSettingsCreateWithoutUserInput, Prisma.UserSettingsUncheckedCreateWithoutUserInput>
  where?: Prisma.UserSettingsWhereInput
}

export type UserSettingsUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserSettingsWhereInput
  data: Prisma.XOR<Prisma.UserSettingsUpdateWithoutUserInput, Prisma.UserSettingsUncheckedUpdateWithoutUserInput>
}

export type UserSettingsUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.StringFieldUpdateOperationsInput | string
  generalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  personalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cameraAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  locationAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cookiesAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type UserSettingsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  language?: Prisma.StringFieldUpdateOperationsInput | string
  generalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  personalReminders?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cameraAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  locationAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cookiesAccess?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type UserSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  language?: boolean
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSettings"]>

export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  language?: boolean
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSettings"]>

export type UserSettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  language?: boolean
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSettings"]>

export type UserSettingsSelectScalar = {
  id?: boolean
  userId?: boolean
  language?: boolean
  generalReminders?: boolean
  personalReminders?: boolean
  cameraAccess?: boolean
  locationAccess?: boolean
  cookiesAccess?: boolean
}

export type UserSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "language" | "generalReminders" | "personalReminders" | "cameraAccess" | "locationAccess" | "cookiesAccess", ExtArgs["result"]["userSettings"]>
export type UserSettingsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserSettingsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserSettingsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserSettings"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    language: string
    generalReminders: boolean
    personalReminders: boolean
    cameraAccess: boolean
    locationAccess: boolean
    cookiesAccess: boolean
  }, ExtArgs["result"]["userSettings"]>
  composites: {}
}

export type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload, S>

export type UserSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserSettingsCountAggregateInputType | true
  }

export interface UserSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
  /**
   * Find zero or one UserSettings that matches the filter.
   * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
   * @example
   * // Get one UserSettings
   * const userSettings = await prisma.userSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
   * @example
   * // Get one UserSettings
   * const userSettings = await prisma.userSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
   * @example
   * // Get one UserSettings
   * const userSettings = await prisma.userSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
   * @example
   * // Get one UserSettings
   * const userSettings = await prisma.userSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserSettings
   * const userSettings = await prisma.userSettings.findMany()
   * 
   * // Get first 10 UserSettings
   * const userSettings = await prisma.userSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserSettings.
   * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
   * @example
   * // Create one UserSettings
   * const UserSettings = await prisma.userSettings.create({
   *   data: {
   *     // ... data to create a UserSettings
   *   }
   * })
   * 
   */
  create<T extends UserSettingsCreateArgs>(args: Prisma.SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserSettings.
   * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
   * @example
   * // Create many UserSettings
   * const userSettings = await prisma.userSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserSettings and returns the data saved in the database.
   * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
   * @example
   * // Create many UserSettings
   * const userSettings = await prisma.userSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserSettings and only return the `id`
   * const userSettingsWithIdOnly = await prisma.userSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserSettings.
   * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
   * @example
   * // Delete one UserSettings
   * const UserSettings = await prisma.userSettings.delete({
   *   where: {
   *     // ... filter to delete one UserSettings
   *   }
   * })
   * 
   */
  delete<T extends UserSettingsDeleteArgs>(args: Prisma.SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserSettings.
   * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
   * @example
   * // Update one UserSettings
   * const userSettings = await prisma.userSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserSettingsUpdateArgs>(args: Prisma.SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserSettings.
   * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
   * @example
   * // Delete a few UserSettings
   * const { count } = await prisma.userSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserSettings
   * const userSettings = await prisma.userSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSettings and returns the data updated in the database.
   * @param {UserSettingsUpdateManyAndReturnArgs} args - Arguments to update many UserSettings.
   * @example
   * // Update many UserSettings
   * const userSettings = await prisma.userSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserSettings and only return the `id`
   * const userSettingsWithIdOnly = await prisma.userSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserSettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserSettings.
   * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
   * @example
   * // Update or create a UserSettings
   * const userSettings = await prisma.userSettings.upsert({
   *   create: {
   *     // ... data to create a UserSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserSettings we want to update
   *   }
   * })
   */
  upsert<T extends UserSettingsUpsertArgs>(args: Prisma.SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__UserSettingsClient<runtime.Types.Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
   * @example
   * // Count the number of UserSettings
   * const count = await prisma.userSettings.count({
   *   where: {
   *     // ... the filter for the UserSettings we want to count
   *   }
   * })
  **/
  count<T extends UserSettingsCountArgs>(
    args?: Prisma.Subset<T, UserSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserSettingsAggregateArgs>(args: Prisma.Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

  /**
   * Group by UserSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
      : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserSettings model
 */
readonly fields: UserSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserSettings model
 */
export interface UserSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"UserSettings", 'String'>
  readonly userId: Prisma.FieldRef<"UserSettings", 'String'>
  readonly language: Prisma.FieldRef<"UserSettings", 'String'>
  readonly generalReminders: Prisma.FieldRef<"UserSettings", 'Boolean'>
  readonly personalReminders: Prisma.FieldRef<"UserSettings", 'Boolean'>
  readonly cameraAccess: Prisma.FieldRef<"UserSettings", 'Boolean'>
  readonly locationAccess: Prisma.FieldRef<"UserSettings", 'Boolean'>
  readonly cookiesAccess: Prisma.FieldRef<"UserSettings", 'Boolean'>
}
    

// Custom InputTypes
/**
 * UserSettings findUnique
 */
export type UserSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * Filter, which UserSettings to fetch.
   */
  where: Prisma.UserSettingsWhereUniqueInput
}

/**
 * UserSettings findUniqueOrThrow
 */
export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * Filter, which UserSettings to fetch.
   */
  where: Prisma.UserSettingsWhereUniqueInput
}

/**
 * UserSettings findFirst
 */
export type UserSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * Filter, which UserSettings to fetch.
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSettings to fetch.
   */
  orderBy?: Prisma.UserSettingsOrderByWithRelationInput | Prisma.UserSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSettings.
   */
  cursor?: Prisma.UserSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSettings.
   */
  distinct?: Prisma.UserSettingsScalarFieldEnum | Prisma.UserSettingsScalarFieldEnum[]
}

/**
 * UserSettings findFirstOrThrow
 */
export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * Filter, which UserSettings to fetch.
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSettings to fetch.
   */
  orderBy?: Prisma.UserSettingsOrderByWithRelationInput | Prisma.UserSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSettings.
   */
  cursor?: Prisma.UserSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSettings.
   */
  distinct?: Prisma.UserSettingsScalarFieldEnum | Prisma.UserSettingsScalarFieldEnum[]
}

/**
 * UserSettings findMany
 */
export type UserSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * Filter, which UserSettings to fetch.
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSettings to fetch.
   */
  orderBy?: Prisma.UserSettingsOrderByWithRelationInput | Prisma.UserSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserSettings.
   */
  cursor?: Prisma.UserSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSettings.
   */
  skip?: number
  distinct?: Prisma.UserSettingsScalarFieldEnum | Prisma.UserSettingsScalarFieldEnum[]
}

/**
 * UserSettings create
 */
export type UserSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * The data needed to create a UserSettings.
   */
  data: Prisma.XOR<Prisma.UserSettingsCreateInput, Prisma.UserSettingsUncheckedCreateInput>
}

/**
 * UserSettings createMany
 */
export type UserSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserSettings.
   */
  data: Prisma.UserSettingsCreateManyInput | Prisma.UserSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserSettings createManyAndReturn
 */
export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * The data used to create many UserSettings.
   */
  data: Prisma.UserSettingsCreateManyInput | Prisma.UserSettingsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserSettings update
 */
export type UserSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * The data needed to update a UserSettings.
   */
  data: Prisma.XOR<Prisma.UserSettingsUpdateInput, Prisma.UserSettingsUncheckedUpdateInput>
  /**
   * Choose, which UserSettings to update.
   */
  where: Prisma.UserSettingsWhereUniqueInput
}

/**
 * UserSettings updateMany
 */
export type UserSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserSettings.
   */
  data: Prisma.XOR<Prisma.UserSettingsUpdateManyMutationInput, Prisma.UserSettingsUncheckedUpdateManyInput>
  /**
   * Filter which UserSettings to update
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * Limit how many UserSettings to update.
   */
  limit?: number
}

/**
 * UserSettings updateManyAndReturn
 */
export type UserSettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * The data used to update UserSettings.
   */
  data: Prisma.XOR<Prisma.UserSettingsUpdateManyMutationInput, Prisma.UserSettingsUncheckedUpdateManyInput>
  /**
   * Filter which UserSettings to update
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * Limit how many UserSettings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserSettings upsert
 */
export type UserSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * The filter to search for the UserSettings to update in case it exists.
   */
  where: Prisma.UserSettingsWhereUniqueInput
  /**
   * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
   */
  create: Prisma.XOR<Prisma.UserSettingsCreateInput, Prisma.UserSettingsUncheckedCreateInput>
  /**
   * In case the UserSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserSettingsUpdateInput, Prisma.UserSettingsUncheckedUpdateInput>
}

/**
 * UserSettings delete
 */
export type UserSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
  /**
   * Filter which UserSettings to delete.
   */
  where: Prisma.UserSettingsWhereUniqueInput
}

/**
 * UserSettings deleteMany
 */
export type UserSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSettings to delete
   */
  where?: Prisma.UserSettingsWhereInput
  /**
   * Limit how many UserSettings to delete.
   */
  limit?: number
}

/**
 * UserSettings without action
 */
export type UserSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSettings
   */
  select?: Prisma.UserSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSettings
   */
  omit?: Prisma.UserSettingsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSettingsInclude<ExtArgs> | null
}
