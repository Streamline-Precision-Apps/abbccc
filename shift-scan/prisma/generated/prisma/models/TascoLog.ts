
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TascoLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TascoLog
 * 
 */
export type TascoLogModel = runtime.Types.Result.DefaultSelection<Prisma.$TascoLogPayload>

export type AggregateTascoLog = {
  _count: TascoLogCountAggregateOutputType | null
  _avg: TascoLogAvgAggregateOutputType | null
  _sum: TascoLogSumAggregateOutputType | null
  _min: TascoLogMinAggregateOutputType | null
  _max: TascoLogMaxAggregateOutputType | null
}

export type TascoLogAvgAggregateOutputType = {
  LoadQuantity: number | null
}

export type TascoLogSumAggregateOutputType = {
  LoadQuantity: number | null
}

export type TascoLogMinAggregateOutputType = {
  id: string | null
  timeSheetId: string | null
  shiftType: string | null
  equipmentId: string | null
  laborType: string | null
  materialType: string | null
  screenType: $Enums.LoadType | null
  LoadQuantity: number | null
}

export type TascoLogMaxAggregateOutputType = {
  id: string | null
  timeSheetId: string | null
  shiftType: string | null
  equipmentId: string | null
  laborType: string | null
  materialType: string | null
  screenType: $Enums.LoadType | null
  LoadQuantity: number | null
}

export type TascoLogCountAggregateOutputType = {
  id: number
  timeSheetId: number
  shiftType: number
  equipmentId: number
  laborType: number
  materialType: number
  screenType: number
  LoadQuantity: number
  _all: number
}


export type TascoLogAvgAggregateInputType = {
  LoadQuantity?: true
}

export type TascoLogSumAggregateInputType = {
  LoadQuantity?: true
}

export type TascoLogMinAggregateInputType = {
  id?: true
  timeSheetId?: true
  shiftType?: true
  equipmentId?: true
  laborType?: true
  materialType?: true
  screenType?: true
  LoadQuantity?: true
}

export type TascoLogMaxAggregateInputType = {
  id?: true
  timeSheetId?: true
  shiftType?: true
  equipmentId?: true
  laborType?: true
  materialType?: true
  screenType?: true
  LoadQuantity?: true
}

export type TascoLogCountAggregateInputType = {
  id?: true
  timeSheetId?: true
  shiftType?: true
  equipmentId?: true
  laborType?: true
  materialType?: true
  screenType?: true
  LoadQuantity?: true
  _all?: true
}

export type TascoLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TascoLog to aggregate.
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoLogs to fetch.
   */
  orderBy?: Prisma.TascoLogOrderByWithRelationInput | Prisma.TascoLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TascoLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TascoLogs
  **/
  _count?: true | TascoLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TascoLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TascoLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TascoLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TascoLogMaxAggregateInputType
}

export type GetTascoLogAggregateType<T extends TascoLogAggregateArgs> = {
      [P in keyof T & keyof AggregateTascoLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTascoLog[P]>
    : Prisma.GetScalarType<T[P], AggregateTascoLog[P]>
}




export type TascoLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TascoLogWhereInput
  orderBy?: Prisma.TascoLogOrderByWithAggregationInput | Prisma.TascoLogOrderByWithAggregationInput[]
  by: Prisma.TascoLogScalarFieldEnum[] | Prisma.TascoLogScalarFieldEnum
  having?: Prisma.TascoLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TascoLogCountAggregateInputType | true
  _avg?: TascoLogAvgAggregateInputType
  _sum?: TascoLogSumAggregateInputType
  _min?: TascoLogMinAggregateInputType
  _max?: TascoLogMaxAggregateInputType
}

export type TascoLogGroupByOutputType = {
  id: string
  timeSheetId: string
  shiftType: string
  equipmentId: string | null
  laborType: string | null
  materialType: string | null
  screenType: $Enums.LoadType | null
  LoadQuantity: number
  _count: TascoLogCountAggregateOutputType | null
  _avg: TascoLogAvgAggregateOutputType | null
  _sum: TascoLogSumAggregateOutputType | null
  _min: TascoLogMinAggregateOutputType | null
  _max: TascoLogMaxAggregateOutputType | null
}

type GetTascoLogGroupByPayload<T extends TascoLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TascoLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TascoLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TascoLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TascoLogGroupByOutputType[P]>
      }
    >
  >



export type TascoLogWhereInput = {
  AND?: Prisma.TascoLogWhereInput | Prisma.TascoLogWhereInput[]
  OR?: Prisma.TascoLogWhereInput[]
  NOT?: Prisma.TascoLogWhereInput | Prisma.TascoLogWhereInput[]
  id?: Prisma.StringFilter<"TascoLog"> | string
  timeSheetId?: Prisma.StringFilter<"TascoLog"> | string
  shiftType?: Prisma.StringFilter<"TascoLog"> | string
  equipmentId?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  laborType?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  materialType?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  screenType?: Prisma.EnumLoadTypeNullableFilter<"TascoLog"> | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFilter<"TascoLog"> | number
  RefuelLogs?: Prisma.RefuelLogListRelationFilter
  Equipment?: Prisma.XOR<Prisma.EquipmentNullableScalarRelationFilter, Prisma.EquipmentWhereInput> | null
  TascoMaterialTypes?: Prisma.XOR<Prisma.TascoMaterialTypesNullableScalarRelationFilter, Prisma.TascoMaterialTypesWhereInput> | null
  TimeSheet?: Prisma.XOR<Prisma.TimeSheetScalarRelationFilter, Prisma.TimeSheetWhereInput>
}

export type TascoLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  shiftType?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  laborType?: Prisma.SortOrderInput | Prisma.SortOrder
  materialType?: Prisma.SortOrderInput | Prisma.SortOrder
  screenType?: Prisma.SortOrderInput | Prisma.SortOrder
  LoadQuantity?: Prisma.SortOrder
  RefuelLogs?: Prisma.RefuelLogOrderByRelationAggregateInput
  Equipment?: Prisma.EquipmentOrderByWithRelationInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesOrderByWithRelationInput
  TimeSheet?: Prisma.TimeSheetOrderByWithRelationInput
}

export type TascoLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TascoLogWhereInput | Prisma.TascoLogWhereInput[]
  OR?: Prisma.TascoLogWhereInput[]
  NOT?: Prisma.TascoLogWhereInput | Prisma.TascoLogWhereInput[]
  timeSheetId?: Prisma.StringFilter<"TascoLog"> | string
  shiftType?: Prisma.StringFilter<"TascoLog"> | string
  equipmentId?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  laborType?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  materialType?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  screenType?: Prisma.EnumLoadTypeNullableFilter<"TascoLog"> | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFilter<"TascoLog"> | number
  RefuelLogs?: Prisma.RefuelLogListRelationFilter
  Equipment?: Prisma.XOR<Prisma.EquipmentNullableScalarRelationFilter, Prisma.EquipmentWhereInput> | null
  TascoMaterialTypes?: Prisma.XOR<Prisma.TascoMaterialTypesNullableScalarRelationFilter, Prisma.TascoMaterialTypesWhereInput> | null
  TimeSheet?: Prisma.XOR<Prisma.TimeSheetScalarRelationFilter, Prisma.TimeSheetWhereInput>
}, "id">

export type TascoLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  shiftType?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  laborType?: Prisma.SortOrderInput | Prisma.SortOrder
  materialType?: Prisma.SortOrderInput | Prisma.SortOrder
  screenType?: Prisma.SortOrderInput | Prisma.SortOrder
  LoadQuantity?: Prisma.SortOrder
  _count?: Prisma.TascoLogCountOrderByAggregateInput
  _avg?: Prisma.TascoLogAvgOrderByAggregateInput
  _max?: Prisma.TascoLogMaxOrderByAggregateInput
  _min?: Prisma.TascoLogMinOrderByAggregateInput
  _sum?: Prisma.TascoLogSumOrderByAggregateInput
}

export type TascoLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.TascoLogScalarWhereWithAggregatesInput | Prisma.TascoLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.TascoLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TascoLogScalarWhereWithAggregatesInput | Prisma.TascoLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TascoLog"> | string
  timeSheetId?: Prisma.StringWithAggregatesFilter<"TascoLog"> | string
  shiftType?: Prisma.StringWithAggregatesFilter<"TascoLog"> | string
  equipmentId?: Prisma.StringNullableWithAggregatesFilter<"TascoLog"> | string | null
  laborType?: Prisma.StringNullableWithAggregatesFilter<"TascoLog"> | string | null
  materialType?: Prisma.StringNullableWithAggregatesFilter<"TascoLog"> | string | null
  screenType?: Prisma.EnumLoadTypeNullableWithAggregatesFilter<"TascoLog"> | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntWithAggregatesFilter<"TascoLog"> | number
}

export type TascoLogCreateInput = {
  id?: string
  shiftType: string
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogCreateNestedManyWithoutTascoLogInput
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutTascoLogsInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesCreateNestedOneWithoutTascoLogInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutTascoLogsInput
}

export type TascoLogUncheckedCreateInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogUncheckedCreateNestedManyWithoutTascoLogInput
}

export type TascoLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUpdateManyWithoutTascoLogNestedInput
  Equipment?: Prisma.EquipmentUpdateOneWithoutTascoLogsNestedInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesUpdateOneWithoutTascoLogNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutTascoLogsNestedInput
}

export type TascoLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUncheckedUpdateManyWithoutTascoLogNestedInput
}

export type TascoLogCreateManyInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
}

export type TascoLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TascoLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TascoLogListRelationFilter = {
  every?: Prisma.TascoLogWhereInput
  some?: Prisma.TascoLogWhereInput
  none?: Prisma.TascoLogWhereInput
}

export type TascoLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TascoLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  shiftType?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrder
  laborType?: Prisma.SortOrder
  materialType?: Prisma.SortOrder
  screenType?: Prisma.SortOrder
  LoadQuantity?: Prisma.SortOrder
}

export type TascoLogAvgOrderByAggregateInput = {
  LoadQuantity?: Prisma.SortOrder
}

export type TascoLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  shiftType?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrder
  laborType?: Prisma.SortOrder
  materialType?: Prisma.SortOrder
  screenType?: Prisma.SortOrder
  LoadQuantity?: Prisma.SortOrder
}

export type TascoLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  shiftType?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrder
  laborType?: Prisma.SortOrder
  materialType?: Prisma.SortOrder
  screenType?: Prisma.SortOrder
  LoadQuantity?: Prisma.SortOrder
}

export type TascoLogSumOrderByAggregateInput = {
  LoadQuantity?: Prisma.SortOrder
}

export type TascoLogNullableScalarRelationFilter = {
  is?: Prisma.TascoLogWhereInput | null
  isNot?: Prisma.TascoLogWhereInput | null
}

export type TascoLogCreateNestedManyWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutEquipmentInput, Prisma.TascoLogUncheckedCreateWithoutEquipmentInput> | Prisma.TascoLogCreateWithoutEquipmentInput[] | Prisma.TascoLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutEquipmentInput | Prisma.TascoLogCreateOrConnectWithoutEquipmentInput[]
  createMany?: Prisma.TascoLogCreateManyEquipmentInputEnvelope
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
}

export type TascoLogUncheckedCreateNestedManyWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutEquipmentInput, Prisma.TascoLogUncheckedCreateWithoutEquipmentInput> | Prisma.TascoLogCreateWithoutEquipmentInput[] | Prisma.TascoLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutEquipmentInput | Prisma.TascoLogCreateOrConnectWithoutEquipmentInput[]
  createMany?: Prisma.TascoLogCreateManyEquipmentInputEnvelope
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
}

export type TascoLogUpdateManyWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutEquipmentInput, Prisma.TascoLogUncheckedCreateWithoutEquipmentInput> | Prisma.TascoLogCreateWithoutEquipmentInput[] | Prisma.TascoLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutEquipmentInput | Prisma.TascoLogCreateOrConnectWithoutEquipmentInput[]
  upsert?: Prisma.TascoLogUpsertWithWhereUniqueWithoutEquipmentInput | Prisma.TascoLogUpsertWithWhereUniqueWithoutEquipmentInput[]
  createMany?: Prisma.TascoLogCreateManyEquipmentInputEnvelope
  set?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  disconnect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  delete?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  update?: Prisma.TascoLogUpdateWithWhereUniqueWithoutEquipmentInput | Prisma.TascoLogUpdateWithWhereUniqueWithoutEquipmentInput[]
  updateMany?: Prisma.TascoLogUpdateManyWithWhereWithoutEquipmentInput | Prisma.TascoLogUpdateManyWithWhereWithoutEquipmentInput[]
  deleteMany?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
}

export type TascoLogUncheckedUpdateManyWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutEquipmentInput, Prisma.TascoLogUncheckedCreateWithoutEquipmentInput> | Prisma.TascoLogCreateWithoutEquipmentInput[] | Prisma.TascoLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutEquipmentInput | Prisma.TascoLogCreateOrConnectWithoutEquipmentInput[]
  upsert?: Prisma.TascoLogUpsertWithWhereUniqueWithoutEquipmentInput | Prisma.TascoLogUpsertWithWhereUniqueWithoutEquipmentInput[]
  createMany?: Prisma.TascoLogCreateManyEquipmentInputEnvelope
  set?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  disconnect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  delete?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  update?: Prisma.TascoLogUpdateWithWhereUniqueWithoutEquipmentInput | Prisma.TascoLogUpdateWithWhereUniqueWithoutEquipmentInput[]
  updateMany?: Prisma.TascoLogUpdateManyWithWhereWithoutEquipmentInput | Prisma.TascoLogUpdateManyWithWhereWithoutEquipmentInput[]
  deleteMany?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
}

export type TascoLogCreateNestedManyWithoutTimeSheetInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTimeSheetInput, Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput> | Prisma.TascoLogCreateWithoutTimeSheetInput[] | Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput | Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput[]
  createMany?: Prisma.TascoLogCreateManyTimeSheetInputEnvelope
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
}

export type TascoLogUncheckedCreateNestedManyWithoutTimeSheetInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTimeSheetInput, Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput> | Prisma.TascoLogCreateWithoutTimeSheetInput[] | Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput | Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput[]
  createMany?: Prisma.TascoLogCreateManyTimeSheetInputEnvelope
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
}

export type TascoLogUpdateManyWithoutTimeSheetNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTimeSheetInput, Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput> | Prisma.TascoLogCreateWithoutTimeSheetInput[] | Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput | Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput[]
  upsert?: Prisma.TascoLogUpsertWithWhereUniqueWithoutTimeSheetInput | Prisma.TascoLogUpsertWithWhereUniqueWithoutTimeSheetInput[]
  createMany?: Prisma.TascoLogCreateManyTimeSheetInputEnvelope
  set?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  disconnect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  delete?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  update?: Prisma.TascoLogUpdateWithWhereUniqueWithoutTimeSheetInput | Prisma.TascoLogUpdateWithWhereUniqueWithoutTimeSheetInput[]
  updateMany?: Prisma.TascoLogUpdateManyWithWhereWithoutTimeSheetInput | Prisma.TascoLogUpdateManyWithWhereWithoutTimeSheetInput[]
  deleteMany?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
}

export type TascoLogUncheckedUpdateManyWithoutTimeSheetNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTimeSheetInput, Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput> | Prisma.TascoLogCreateWithoutTimeSheetInput[] | Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput | Prisma.TascoLogCreateOrConnectWithoutTimeSheetInput[]
  upsert?: Prisma.TascoLogUpsertWithWhereUniqueWithoutTimeSheetInput | Prisma.TascoLogUpsertWithWhereUniqueWithoutTimeSheetInput[]
  createMany?: Prisma.TascoLogCreateManyTimeSheetInputEnvelope
  set?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  disconnect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  delete?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  update?: Prisma.TascoLogUpdateWithWhereUniqueWithoutTimeSheetInput | Prisma.TascoLogUpdateWithWhereUniqueWithoutTimeSheetInput[]
  updateMany?: Prisma.TascoLogUpdateManyWithWhereWithoutTimeSheetInput | Prisma.TascoLogUpdateManyWithWhereWithoutTimeSheetInput[]
  deleteMany?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
}

export type NullableEnumLoadTypeFieldUpdateOperationsInput = {
  set?: $Enums.LoadType | null
}

export type TascoLogCreateNestedManyWithoutTascoMaterialTypesInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput> | Prisma.TascoLogCreateWithoutTascoMaterialTypesInput[] | Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput | Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput[]
  createMany?: Prisma.TascoLogCreateManyTascoMaterialTypesInputEnvelope
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
}

export type TascoLogUncheckedCreateNestedManyWithoutTascoMaterialTypesInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput> | Prisma.TascoLogCreateWithoutTascoMaterialTypesInput[] | Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput | Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput[]
  createMany?: Prisma.TascoLogCreateManyTascoMaterialTypesInputEnvelope
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
}

export type TascoLogUpdateManyWithoutTascoMaterialTypesNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput> | Prisma.TascoLogCreateWithoutTascoMaterialTypesInput[] | Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput | Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput[]
  upsert?: Prisma.TascoLogUpsertWithWhereUniqueWithoutTascoMaterialTypesInput | Prisma.TascoLogUpsertWithWhereUniqueWithoutTascoMaterialTypesInput[]
  createMany?: Prisma.TascoLogCreateManyTascoMaterialTypesInputEnvelope
  set?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  disconnect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  delete?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  update?: Prisma.TascoLogUpdateWithWhereUniqueWithoutTascoMaterialTypesInput | Prisma.TascoLogUpdateWithWhereUniqueWithoutTascoMaterialTypesInput[]
  updateMany?: Prisma.TascoLogUpdateManyWithWhereWithoutTascoMaterialTypesInput | Prisma.TascoLogUpdateManyWithWhereWithoutTascoMaterialTypesInput[]
  deleteMany?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
}

export type TascoLogUncheckedUpdateManyWithoutTascoMaterialTypesNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput> | Prisma.TascoLogCreateWithoutTascoMaterialTypesInput[] | Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput[]
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput | Prisma.TascoLogCreateOrConnectWithoutTascoMaterialTypesInput[]
  upsert?: Prisma.TascoLogUpsertWithWhereUniqueWithoutTascoMaterialTypesInput | Prisma.TascoLogUpsertWithWhereUniqueWithoutTascoMaterialTypesInput[]
  createMany?: Prisma.TascoLogCreateManyTascoMaterialTypesInputEnvelope
  set?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  disconnect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  delete?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  connect?: Prisma.TascoLogWhereUniqueInput | Prisma.TascoLogWhereUniqueInput[]
  update?: Prisma.TascoLogUpdateWithWhereUniqueWithoutTascoMaterialTypesInput | Prisma.TascoLogUpdateWithWhereUniqueWithoutTascoMaterialTypesInput[]
  updateMany?: Prisma.TascoLogUpdateManyWithWhereWithoutTascoMaterialTypesInput | Prisma.TascoLogUpdateManyWithWhereWithoutTascoMaterialTypesInput[]
  deleteMany?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
}

export type TascoLogCreateNestedOneWithoutRefuelLogsInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutRefuelLogsInput, Prisma.TascoLogUncheckedCreateWithoutRefuelLogsInput>
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutRefuelLogsInput
  connect?: Prisma.TascoLogWhereUniqueInput
}

export type TascoLogUpdateOneWithoutRefuelLogsNestedInput = {
  create?: Prisma.XOR<Prisma.TascoLogCreateWithoutRefuelLogsInput, Prisma.TascoLogUncheckedCreateWithoutRefuelLogsInput>
  connectOrCreate?: Prisma.TascoLogCreateOrConnectWithoutRefuelLogsInput
  upsert?: Prisma.TascoLogUpsertWithoutRefuelLogsInput
  disconnect?: Prisma.TascoLogWhereInput | boolean
  delete?: Prisma.TascoLogWhereInput | boolean
  connect?: Prisma.TascoLogWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TascoLogUpdateToOneWithWhereWithoutRefuelLogsInput, Prisma.TascoLogUpdateWithoutRefuelLogsInput>, Prisma.TascoLogUncheckedUpdateWithoutRefuelLogsInput>
}

export type TascoLogCreateWithoutEquipmentInput = {
  id?: string
  shiftType: string
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogCreateNestedManyWithoutTascoLogInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesCreateNestedOneWithoutTascoLogInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutTascoLogsInput
}

export type TascoLogUncheckedCreateWithoutEquipmentInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogUncheckedCreateNestedManyWithoutTascoLogInput
}

export type TascoLogCreateOrConnectWithoutEquipmentInput = {
  where: Prisma.TascoLogWhereUniqueInput
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutEquipmentInput, Prisma.TascoLogUncheckedCreateWithoutEquipmentInput>
}

export type TascoLogCreateManyEquipmentInputEnvelope = {
  data: Prisma.TascoLogCreateManyEquipmentInput | Prisma.TascoLogCreateManyEquipmentInput[]
  skipDuplicates?: boolean
}

export type TascoLogUpsertWithWhereUniqueWithoutEquipmentInput = {
  where: Prisma.TascoLogWhereUniqueInput
  update: Prisma.XOR<Prisma.TascoLogUpdateWithoutEquipmentInput, Prisma.TascoLogUncheckedUpdateWithoutEquipmentInput>
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutEquipmentInput, Prisma.TascoLogUncheckedCreateWithoutEquipmentInput>
}

export type TascoLogUpdateWithWhereUniqueWithoutEquipmentInput = {
  where: Prisma.TascoLogWhereUniqueInput
  data: Prisma.XOR<Prisma.TascoLogUpdateWithoutEquipmentInput, Prisma.TascoLogUncheckedUpdateWithoutEquipmentInput>
}

export type TascoLogUpdateManyWithWhereWithoutEquipmentInput = {
  where: Prisma.TascoLogScalarWhereInput
  data: Prisma.XOR<Prisma.TascoLogUpdateManyMutationInput, Prisma.TascoLogUncheckedUpdateManyWithoutEquipmentInput>
}

export type TascoLogScalarWhereInput = {
  AND?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
  OR?: Prisma.TascoLogScalarWhereInput[]
  NOT?: Prisma.TascoLogScalarWhereInput | Prisma.TascoLogScalarWhereInput[]
  id?: Prisma.StringFilter<"TascoLog"> | string
  timeSheetId?: Prisma.StringFilter<"TascoLog"> | string
  shiftType?: Prisma.StringFilter<"TascoLog"> | string
  equipmentId?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  laborType?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  materialType?: Prisma.StringNullableFilter<"TascoLog"> | string | null
  screenType?: Prisma.EnumLoadTypeNullableFilter<"TascoLog"> | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFilter<"TascoLog"> | number
}

export type TascoLogCreateWithoutTimeSheetInput = {
  id?: string
  shiftType: string
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogCreateNestedManyWithoutTascoLogInput
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutTascoLogsInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesCreateNestedOneWithoutTascoLogInput
}

export type TascoLogUncheckedCreateWithoutTimeSheetInput = {
  id?: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogUncheckedCreateNestedManyWithoutTascoLogInput
}

export type TascoLogCreateOrConnectWithoutTimeSheetInput = {
  where: Prisma.TascoLogWhereUniqueInput
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutTimeSheetInput, Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput>
}

export type TascoLogCreateManyTimeSheetInputEnvelope = {
  data: Prisma.TascoLogCreateManyTimeSheetInput | Prisma.TascoLogCreateManyTimeSheetInput[]
  skipDuplicates?: boolean
}

export type TascoLogUpsertWithWhereUniqueWithoutTimeSheetInput = {
  where: Prisma.TascoLogWhereUniqueInput
  update: Prisma.XOR<Prisma.TascoLogUpdateWithoutTimeSheetInput, Prisma.TascoLogUncheckedUpdateWithoutTimeSheetInput>
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutTimeSheetInput, Prisma.TascoLogUncheckedCreateWithoutTimeSheetInput>
}

export type TascoLogUpdateWithWhereUniqueWithoutTimeSheetInput = {
  where: Prisma.TascoLogWhereUniqueInput
  data: Prisma.XOR<Prisma.TascoLogUpdateWithoutTimeSheetInput, Prisma.TascoLogUncheckedUpdateWithoutTimeSheetInput>
}

export type TascoLogUpdateManyWithWhereWithoutTimeSheetInput = {
  where: Prisma.TascoLogScalarWhereInput
  data: Prisma.XOR<Prisma.TascoLogUpdateManyMutationInput, Prisma.TascoLogUncheckedUpdateManyWithoutTimeSheetInput>
}

export type TascoLogCreateWithoutTascoMaterialTypesInput = {
  id?: string
  shiftType: string
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogCreateNestedManyWithoutTascoLogInput
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutTascoLogsInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutTascoLogsInput
}

export type TascoLogUncheckedCreateWithoutTascoMaterialTypesInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  RefuelLogs?: Prisma.RefuelLogUncheckedCreateNestedManyWithoutTascoLogInput
}

export type TascoLogCreateOrConnectWithoutTascoMaterialTypesInput = {
  where: Prisma.TascoLogWhereUniqueInput
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput>
}

export type TascoLogCreateManyTascoMaterialTypesInputEnvelope = {
  data: Prisma.TascoLogCreateManyTascoMaterialTypesInput | Prisma.TascoLogCreateManyTascoMaterialTypesInput[]
  skipDuplicates?: boolean
}

export type TascoLogUpsertWithWhereUniqueWithoutTascoMaterialTypesInput = {
  where: Prisma.TascoLogWhereUniqueInput
  update: Prisma.XOR<Prisma.TascoLogUpdateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedUpdateWithoutTascoMaterialTypesInput>
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedCreateWithoutTascoMaterialTypesInput>
}

export type TascoLogUpdateWithWhereUniqueWithoutTascoMaterialTypesInput = {
  where: Prisma.TascoLogWhereUniqueInput
  data: Prisma.XOR<Prisma.TascoLogUpdateWithoutTascoMaterialTypesInput, Prisma.TascoLogUncheckedUpdateWithoutTascoMaterialTypesInput>
}

export type TascoLogUpdateManyWithWhereWithoutTascoMaterialTypesInput = {
  where: Prisma.TascoLogScalarWhereInput
  data: Prisma.XOR<Prisma.TascoLogUpdateManyMutationInput, Prisma.TascoLogUncheckedUpdateManyWithoutTascoMaterialTypesInput>
}

export type TascoLogCreateWithoutRefuelLogsInput = {
  id?: string
  shiftType: string
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutTascoLogsInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesCreateNestedOneWithoutTascoLogInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutTascoLogsInput
}

export type TascoLogUncheckedCreateWithoutRefuelLogsInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
}

export type TascoLogCreateOrConnectWithoutRefuelLogsInput = {
  where: Prisma.TascoLogWhereUniqueInput
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutRefuelLogsInput, Prisma.TascoLogUncheckedCreateWithoutRefuelLogsInput>
}

export type TascoLogUpsertWithoutRefuelLogsInput = {
  update: Prisma.XOR<Prisma.TascoLogUpdateWithoutRefuelLogsInput, Prisma.TascoLogUncheckedUpdateWithoutRefuelLogsInput>
  create: Prisma.XOR<Prisma.TascoLogCreateWithoutRefuelLogsInput, Prisma.TascoLogUncheckedCreateWithoutRefuelLogsInput>
  where?: Prisma.TascoLogWhereInput
}

export type TascoLogUpdateToOneWithWhereWithoutRefuelLogsInput = {
  where?: Prisma.TascoLogWhereInput
  data: Prisma.XOR<Prisma.TascoLogUpdateWithoutRefuelLogsInput, Prisma.TascoLogUncheckedUpdateWithoutRefuelLogsInput>
}

export type TascoLogUpdateWithoutRefuelLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  Equipment?: Prisma.EquipmentUpdateOneWithoutTascoLogsNestedInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesUpdateOneWithoutTascoLogNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutTascoLogsNestedInput
}

export type TascoLogUncheckedUpdateWithoutRefuelLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TascoLogCreateManyEquipmentInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
}

export type TascoLogUpdateWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUpdateManyWithoutTascoLogNestedInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesUpdateOneWithoutTascoLogNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutTascoLogsNestedInput
}

export type TascoLogUncheckedUpdateWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUncheckedUpdateManyWithoutTascoLogNestedInput
}

export type TascoLogUncheckedUpdateManyWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TascoLogCreateManyTimeSheetInput = {
  id?: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  materialType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
}

export type TascoLogUpdateWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUpdateManyWithoutTascoLogNestedInput
  Equipment?: Prisma.EquipmentUpdateOneWithoutTascoLogsNestedInput
  TascoMaterialTypes?: Prisma.TascoMaterialTypesUpdateOneWithoutTascoLogNestedInput
}

export type TascoLogUncheckedUpdateWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUncheckedUpdateManyWithoutTascoLogNestedInput
}

export type TascoLogUncheckedUpdateManyWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  materialType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TascoLogCreateManyTascoMaterialTypesInput = {
  id?: string
  timeSheetId: string
  shiftType: string
  equipmentId?: string | null
  laborType?: string | null
  screenType?: $Enums.LoadType | null
  LoadQuantity?: number
}

export type TascoLogUpdateWithoutTascoMaterialTypesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUpdateManyWithoutTascoLogNestedInput
  Equipment?: Prisma.EquipmentUpdateOneWithoutTascoLogsNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutTascoLogsNestedInput
}

export type TascoLogUncheckedUpdateWithoutTascoMaterialTypesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
  RefuelLogs?: Prisma.RefuelLogUncheckedUpdateManyWithoutTascoLogNestedInput
}

export type TascoLogUncheckedUpdateManyWithoutTascoMaterialTypesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  shiftType?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  laborType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  screenType?: Prisma.NullableEnumLoadTypeFieldUpdateOperationsInput | $Enums.LoadType | null
  LoadQuantity?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type TascoLogCountOutputType
 */

export type TascoLogCountOutputType = {
  RefuelLogs: number
}

export type TascoLogCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  RefuelLogs?: boolean | TascoLogCountOutputTypeCountRefuelLogsArgs
}

/**
 * TascoLogCountOutputType without action
 */
export type TascoLogCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLogCountOutputType
   */
  select?: Prisma.TascoLogCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TascoLogCountOutputType without action
 */
export type TascoLogCountOutputTypeCountRefuelLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RefuelLogWhereInput
}


export type TascoLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  shiftType?: boolean
  equipmentId?: boolean
  laborType?: boolean
  materialType?: boolean
  screenType?: boolean
  LoadQuantity?: boolean
  RefuelLogs?: boolean | Prisma.TascoLog$RefuelLogsArgs<ExtArgs>
  Equipment?: boolean | Prisma.TascoLog$EquipmentArgs<ExtArgs>
  TascoMaterialTypes?: boolean | Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.TascoLogCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tascoLog"]>

export type TascoLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  shiftType?: boolean
  equipmentId?: boolean
  laborType?: boolean
  materialType?: boolean
  screenType?: boolean
  LoadQuantity?: boolean
  Equipment?: boolean | Prisma.TascoLog$EquipmentArgs<ExtArgs>
  TascoMaterialTypes?: boolean | Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tascoLog"]>

export type TascoLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  shiftType?: boolean
  equipmentId?: boolean
  laborType?: boolean
  materialType?: boolean
  screenType?: boolean
  LoadQuantity?: boolean
  Equipment?: boolean | Prisma.TascoLog$EquipmentArgs<ExtArgs>
  TascoMaterialTypes?: boolean | Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tascoLog"]>

export type TascoLogSelectScalar = {
  id?: boolean
  timeSheetId?: boolean
  shiftType?: boolean
  equipmentId?: boolean
  laborType?: boolean
  materialType?: boolean
  screenType?: boolean
  LoadQuantity?: boolean
}

export type TascoLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "timeSheetId" | "shiftType" | "equipmentId" | "laborType" | "materialType" | "screenType" | "LoadQuantity", ExtArgs["result"]["tascoLog"]>
export type TascoLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  RefuelLogs?: boolean | Prisma.TascoLog$RefuelLogsArgs<ExtArgs>
  Equipment?: boolean | Prisma.TascoLog$EquipmentArgs<ExtArgs>
  TascoMaterialTypes?: boolean | Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.TascoLogCountOutputTypeDefaultArgs<ExtArgs>
}
export type TascoLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.TascoLog$EquipmentArgs<ExtArgs>
  TascoMaterialTypes?: boolean | Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}
export type TascoLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.TascoLog$EquipmentArgs<ExtArgs>
  TascoMaterialTypes?: boolean | Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}

export type $TascoLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TascoLog"
  objects: {
    RefuelLogs: Prisma.$RefuelLogPayload<ExtArgs>[]
    Equipment: Prisma.$EquipmentPayload<ExtArgs> | null
    TascoMaterialTypes: Prisma.$TascoMaterialTypesPayload<ExtArgs> | null
    TimeSheet: Prisma.$TimeSheetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    timeSheetId: string
    shiftType: string
    equipmentId: string | null
    laborType: string | null
    materialType: string | null
    screenType: $Enums.LoadType | null
    LoadQuantity: number
  }, ExtArgs["result"]["tascoLog"]>
  composites: {}
}

export type TascoLogGetPayload<S extends boolean | null | undefined | TascoLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TascoLogPayload, S>

export type TascoLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TascoLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TascoLogCountAggregateInputType | true
  }

export interface TascoLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TascoLog'], meta: { name: 'TascoLog' } }
  /**
   * Find zero or one TascoLog that matches the filter.
   * @param {TascoLogFindUniqueArgs} args - Arguments to find a TascoLog
   * @example
   * // Get one TascoLog
   * const tascoLog = await prisma.tascoLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TascoLogFindUniqueArgs>(args: Prisma.SelectSubset<T, TascoLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TascoLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TascoLogFindUniqueOrThrowArgs} args - Arguments to find a TascoLog
   * @example
   * // Get one TascoLog
   * const tascoLog = await prisma.tascoLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TascoLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TascoLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TascoLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogFindFirstArgs} args - Arguments to find a TascoLog
   * @example
   * // Get one TascoLog
   * const tascoLog = await prisma.tascoLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TascoLogFindFirstArgs>(args?: Prisma.SelectSubset<T, TascoLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TascoLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogFindFirstOrThrowArgs} args - Arguments to find a TascoLog
   * @example
   * // Get one TascoLog
   * const tascoLog = await prisma.tascoLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TascoLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TascoLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TascoLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TascoLogs
   * const tascoLogs = await prisma.tascoLog.findMany()
   * 
   * // Get first 10 TascoLogs
   * const tascoLogs = await prisma.tascoLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tascoLogWithIdOnly = await prisma.tascoLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TascoLogFindManyArgs>(args?: Prisma.SelectSubset<T, TascoLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TascoLog.
   * @param {TascoLogCreateArgs} args - Arguments to create a TascoLog.
   * @example
   * // Create one TascoLog
   * const TascoLog = await prisma.tascoLog.create({
   *   data: {
   *     // ... data to create a TascoLog
   *   }
   * })
   * 
   */
  create<T extends TascoLogCreateArgs>(args: Prisma.SelectSubset<T, TascoLogCreateArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TascoLogs.
   * @param {TascoLogCreateManyArgs} args - Arguments to create many TascoLogs.
   * @example
   * // Create many TascoLogs
   * const tascoLog = await prisma.tascoLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TascoLogCreateManyArgs>(args?: Prisma.SelectSubset<T, TascoLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TascoLogs and returns the data saved in the database.
   * @param {TascoLogCreateManyAndReturnArgs} args - Arguments to create many TascoLogs.
   * @example
   * // Create many TascoLogs
   * const tascoLog = await prisma.tascoLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TascoLogs and only return the `id`
   * const tascoLogWithIdOnly = await prisma.tascoLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TascoLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TascoLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TascoLog.
   * @param {TascoLogDeleteArgs} args - Arguments to delete one TascoLog.
   * @example
   * // Delete one TascoLog
   * const TascoLog = await prisma.tascoLog.delete({
   *   where: {
   *     // ... filter to delete one TascoLog
   *   }
   * })
   * 
   */
  delete<T extends TascoLogDeleteArgs>(args: Prisma.SelectSubset<T, TascoLogDeleteArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TascoLog.
   * @param {TascoLogUpdateArgs} args - Arguments to update one TascoLog.
   * @example
   * // Update one TascoLog
   * const tascoLog = await prisma.tascoLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TascoLogUpdateArgs>(args: Prisma.SelectSubset<T, TascoLogUpdateArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TascoLogs.
   * @param {TascoLogDeleteManyArgs} args - Arguments to filter TascoLogs to delete.
   * @example
   * // Delete a few TascoLogs
   * const { count } = await prisma.tascoLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TascoLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, TascoLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TascoLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TascoLogs
   * const tascoLog = await prisma.tascoLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TascoLogUpdateManyArgs>(args: Prisma.SelectSubset<T, TascoLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TascoLogs and returns the data updated in the database.
   * @param {TascoLogUpdateManyAndReturnArgs} args - Arguments to update many TascoLogs.
   * @example
   * // Update many TascoLogs
   * const tascoLog = await prisma.tascoLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TascoLogs and only return the `id`
   * const tascoLogWithIdOnly = await prisma.tascoLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TascoLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TascoLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TascoLog.
   * @param {TascoLogUpsertArgs} args - Arguments to update or create a TascoLog.
   * @example
   * // Update or create a TascoLog
   * const tascoLog = await prisma.tascoLog.upsert({
   *   create: {
   *     // ... data to create a TascoLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TascoLog we want to update
   *   }
   * })
   */
  upsert<T extends TascoLogUpsertArgs>(args: Prisma.SelectSubset<T, TascoLogUpsertArgs<ExtArgs>>): Prisma.Prisma__TascoLogClient<runtime.Types.Result.GetResult<Prisma.$TascoLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TascoLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogCountArgs} args - Arguments to filter TascoLogs to count.
   * @example
   * // Count the number of TascoLogs
   * const count = await prisma.tascoLog.count({
   *   where: {
   *     // ... the filter for the TascoLogs we want to count
   *   }
   * })
  **/
  count<T extends TascoLogCountArgs>(
    args?: Prisma.Subset<T, TascoLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TascoLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TascoLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TascoLogAggregateArgs>(args: Prisma.Subset<T, TascoLogAggregateArgs>): Prisma.PrismaPromise<GetTascoLogAggregateType<T>>

  /**
   * Group by TascoLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TascoLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TascoLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TascoLogGroupByArgs['orderBy'] }
      : { orderBy?: TascoLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TascoLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTascoLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TascoLog model
 */
readonly fields: TascoLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TascoLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TascoLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  RefuelLogs<T extends Prisma.TascoLog$RefuelLogsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TascoLog$RefuelLogsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Equipment<T extends Prisma.TascoLog$EquipmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TascoLog$EquipmentArgs<ExtArgs>>): Prisma.Prisma__EquipmentClient<runtime.Types.Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  TascoMaterialTypes<T extends Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TascoLog$TascoMaterialTypesArgs<ExtArgs>>): Prisma.Prisma__TascoMaterialTypesClient<runtime.Types.Result.GetResult<Prisma.$TascoMaterialTypesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  TimeSheet<T extends Prisma.TimeSheetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TimeSheetDefaultArgs<ExtArgs>>): Prisma.Prisma__TimeSheetClient<runtime.Types.Result.GetResult<Prisma.$TimeSheetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TascoLog model
 */
export interface TascoLogFieldRefs {
  readonly id: Prisma.FieldRef<"TascoLog", 'String'>
  readonly timeSheetId: Prisma.FieldRef<"TascoLog", 'String'>
  readonly shiftType: Prisma.FieldRef<"TascoLog", 'String'>
  readonly equipmentId: Prisma.FieldRef<"TascoLog", 'String'>
  readonly laborType: Prisma.FieldRef<"TascoLog", 'String'>
  readonly materialType: Prisma.FieldRef<"TascoLog", 'String'>
  readonly screenType: Prisma.FieldRef<"TascoLog", 'LoadType'>
  readonly LoadQuantity: Prisma.FieldRef<"TascoLog", 'Int'>
}
    

// Custom InputTypes
/**
 * TascoLog findUnique
 */
export type TascoLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * Filter, which TascoLog to fetch.
   */
  where: Prisma.TascoLogWhereUniqueInput
}

/**
 * TascoLog findUniqueOrThrow
 */
export type TascoLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * Filter, which TascoLog to fetch.
   */
  where: Prisma.TascoLogWhereUniqueInput
}

/**
 * TascoLog findFirst
 */
export type TascoLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * Filter, which TascoLog to fetch.
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoLogs to fetch.
   */
  orderBy?: Prisma.TascoLogOrderByWithRelationInput | Prisma.TascoLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TascoLogs.
   */
  cursor?: Prisma.TascoLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TascoLogs.
   */
  distinct?: Prisma.TascoLogScalarFieldEnum | Prisma.TascoLogScalarFieldEnum[]
}

/**
 * TascoLog findFirstOrThrow
 */
export type TascoLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * Filter, which TascoLog to fetch.
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoLogs to fetch.
   */
  orderBy?: Prisma.TascoLogOrderByWithRelationInput | Prisma.TascoLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TascoLogs.
   */
  cursor?: Prisma.TascoLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TascoLogs.
   */
  distinct?: Prisma.TascoLogScalarFieldEnum | Prisma.TascoLogScalarFieldEnum[]
}

/**
 * TascoLog findMany
 */
export type TascoLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * Filter, which TascoLogs to fetch.
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TascoLogs to fetch.
   */
  orderBy?: Prisma.TascoLogOrderByWithRelationInput | Prisma.TascoLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TascoLogs.
   */
  cursor?: Prisma.TascoLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TascoLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TascoLogs.
   */
  skip?: number
  distinct?: Prisma.TascoLogScalarFieldEnum | Prisma.TascoLogScalarFieldEnum[]
}

/**
 * TascoLog create
 */
export type TascoLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * The data needed to create a TascoLog.
   */
  data: Prisma.XOR<Prisma.TascoLogCreateInput, Prisma.TascoLogUncheckedCreateInput>
}

/**
 * TascoLog createMany
 */
export type TascoLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TascoLogs.
   */
  data: Prisma.TascoLogCreateManyInput | Prisma.TascoLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TascoLog createManyAndReturn
 */
export type TascoLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * The data used to create many TascoLogs.
   */
  data: Prisma.TascoLogCreateManyInput | Prisma.TascoLogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TascoLog update
 */
export type TascoLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * The data needed to update a TascoLog.
   */
  data: Prisma.XOR<Prisma.TascoLogUpdateInput, Prisma.TascoLogUncheckedUpdateInput>
  /**
   * Choose, which TascoLog to update.
   */
  where: Prisma.TascoLogWhereUniqueInput
}

/**
 * TascoLog updateMany
 */
export type TascoLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TascoLogs.
   */
  data: Prisma.XOR<Prisma.TascoLogUpdateManyMutationInput, Prisma.TascoLogUncheckedUpdateManyInput>
  /**
   * Filter which TascoLogs to update
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * Limit how many TascoLogs to update.
   */
  limit?: number
}

/**
 * TascoLog updateManyAndReturn
 */
export type TascoLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * The data used to update TascoLogs.
   */
  data: Prisma.XOR<Prisma.TascoLogUpdateManyMutationInput, Prisma.TascoLogUncheckedUpdateManyInput>
  /**
   * Filter which TascoLogs to update
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * Limit how many TascoLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TascoLog upsert
 */
export type TascoLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * The filter to search for the TascoLog to update in case it exists.
   */
  where: Prisma.TascoLogWhereUniqueInput
  /**
   * In case the TascoLog found by the `where` argument doesn't exist, create a new TascoLog with this data.
   */
  create: Prisma.XOR<Prisma.TascoLogCreateInput, Prisma.TascoLogUncheckedCreateInput>
  /**
   * In case the TascoLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TascoLogUpdateInput, Prisma.TascoLogUncheckedUpdateInput>
}

/**
 * TascoLog delete
 */
export type TascoLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
  /**
   * Filter which TascoLog to delete.
   */
  where: Prisma.TascoLogWhereUniqueInput
}

/**
 * TascoLog deleteMany
 */
export type TascoLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TascoLogs to delete
   */
  where?: Prisma.TascoLogWhereInput
  /**
   * Limit how many TascoLogs to delete.
   */
  limit?: number
}

/**
 * TascoLog.RefuelLogs
 */
export type TascoLog$RefuelLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  where?: Prisma.RefuelLogWhereInput
  orderBy?: Prisma.RefuelLogOrderByWithRelationInput | Prisma.RefuelLogOrderByWithRelationInput[]
  cursor?: Prisma.RefuelLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RefuelLogScalarFieldEnum | Prisma.RefuelLogScalarFieldEnum[]
}

/**
 * TascoLog.Equipment
 */
export type TascoLog$EquipmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Equipment
   */
  select?: Prisma.EquipmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Equipment
   */
  omit?: Prisma.EquipmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentInclude<ExtArgs> | null
  where?: Prisma.EquipmentWhereInput
}

/**
 * TascoLog.TascoMaterialTypes
 */
export type TascoLog$TascoMaterialTypesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoMaterialTypes
   */
  select?: Prisma.TascoMaterialTypesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoMaterialTypes
   */
  omit?: Prisma.TascoMaterialTypesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoMaterialTypesInclude<ExtArgs> | null
  where?: Prisma.TascoMaterialTypesWhereInput
}

/**
 * TascoLog without action
 */
export type TascoLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TascoLog
   */
  select?: Prisma.TascoLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TascoLog
   */
  omit?: Prisma.TascoLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TascoLogInclude<ExtArgs> | null
}
