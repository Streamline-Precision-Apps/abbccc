
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ReportRun` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ReportRun
 * 
 */
export type ReportRunModel = runtime.Types.Result.DefaultSelection<Prisma.$ReportRunPayload>

export type AggregateReportRun = {
  _count: ReportRunCountAggregateOutputType | null
  _avg: ReportRunAvgAggregateOutputType | null
  _sum: ReportRunSumAggregateOutputType | null
  _min: ReportRunMinAggregateOutputType | null
  _max: ReportRunMaxAggregateOutputType | null
}

export type ReportRunAvgAggregateOutputType = {
  duration: number | null
}

export type ReportRunSumAggregateOutputType = {
  duration: number | null
}

export type ReportRunMinAggregateOutputType = {
  id: string | null
  reportId: string | null
  runAt: Date | null
  status: $Enums.ReportStatus | null
  duration: number | null
  startDate: Date | null
  endDate: Date | null
  lastExportedAt: Date | null
}

export type ReportRunMaxAggregateOutputType = {
  id: string | null
  reportId: string | null
  runAt: Date | null
  status: $Enums.ReportStatus | null
  duration: number | null
  startDate: Date | null
  endDate: Date | null
  lastExportedAt: Date | null
}

export type ReportRunCountAggregateOutputType = {
  id: number
  reportId: number
  runAt: number
  status: number
  results: number
  duration: number
  startDate: number
  endDate: number
  customParams: number
  exportFormats: number
  lastExportedAt: number
  _all: number
}


export type ReportRunAvgAggregateInputType = {
  duration?: true
}

export type ReportRunSumAggregateInputType = {
  duration?: true
}

export type ReportRunMinAggregateInputType = {
  id?: true
  reportId?: true
  runAt?: true
  status?: true
  duration?: true
  startDate?: true
  endDate?: true
  lastExportedAt?: true
}

export type ReportRunMaxAggregateInputType = {
  id?: true
  reportId?: true
  runAt?: true
  status?: true
  duration?: true
  startDate?: true
  endDate?: true
  lastExportedAt?: true
}

export type ReportRunCountAggregateInputType = {
  id?: true
  reportId?: true
  runAt?: true
  status?: true
  results?: true
  duration?: true
  startDate?: true
  endDate?: true
  customParams?: true
  exportFormats?: true
  lastExportedAt?: true
  _all?: true
}

export type ReportRunAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ReportRun to aggregate.
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportRuns to fetch.
   */
  orderBy?: Prisma.ReportRunOrderByWithRelationInput | Prisma.ReportRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ReportRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ReportRuns
  **/
  _count?: true | ReportRunCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ReportRunAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ReportRunSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ReportRunMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ReportRunMaxAggregateInputType
}

export type GetReportRunAggregateType<T extends ReportRunAggregateArgs> = {
      [P in keyof T & keyof AggregateReportRun]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReportRun[P]>
    : Prisma.GetScalarType<T[P], AggregateReportRun[P]>
}




export type ReportRunGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReportRunWhereInput
  orderBy?: Prisma.ReportRunOrderByWithAggregationInput | Prisma.ReportRunOrderByWithAggregationInput[]
  by: Prisma.ReportRunScalarFieldEnum[] | Prisma.ReportRunScalarFieldEnum
  having?: Prisma.ReportRunScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReportRunCountAggregateInputType | true
  _avg?: ReportRunAvgAggregateInputType
  _sum?: ReportRunSumAggregateInputType
  _min?: ReportRunMinAggregateInputType
  _max?: ReportRunMaxAggregateInputType
}

export type ReportRunGroupByOutputType = {
  id: string
  reportId: string
  runAt: Date
  status: $Enums.ReportStatus
  results: runtime.JsonValue | null
  duration: number | null
  startDate: Date | null
  endDate: Date | null
  customParams: runtime.JsonValue | null
  exportFormats: string[]
  lastExportedAt: Date | null
  _count: ReportRunCountAggregateOutputType | null
  _avg: ReportRunAvgAggregateOutputType | null
  _sum: ReportRunSumAggregateOutputType | null
  _min: ReportRunMinAggregateOutputType | null
  _max: ReportRunMaxAggregateOutputType | null
}

type GetReportRunGroupByPayload<T extends ReportRunGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReportRunGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ReportRunGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportRunGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportRunGroupByOutputType[P]>
      }
    >
  >



export type ReportRunWhereInput = {
  AND?: Prisma.ReportRunWhereInput | Prisma.ReportRunWhereInput[]
  OR?: Prisma.ReportRunWhereInput[]
  NOT?: Prisma.ReportRunWhereInput | Prisma.ReportRunWhereInput[]
  id?: Prisma.StringFilter<"ReportRun"> | string
  reportId?: Prisma.StringFilter<"ReportRun"> | string
  runAt?: Prisma.DateTimeFilter<"ReportRun"> | Date | string
  status?: Prisma.EnumReportStatusFilter<"ReportRun"> | $Enums.ReportStatus
  results?: Prisma.JsonNullableFilter<"ReportRun">
  duration?: Prisma.IntNullableFilter<"ReportRun"> | number | null
  startDate?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  customParams?: Prisma.JsonNullableFilter<"ReportRun">
  exportFormats?: Prisma.StringNullableListFilter<"ReportRun">
  lastExportedAt?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  Report?: Prisma.XOR<Prisma.ReportScalarRelationFilter, Prisma.ReportWhereInput>
}

export type ReportRunOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  runAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  results?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  customParams?: Prisma.SortOrderInput | Prisma.SortOrder
  exportFormats?: Prisma.SortOrder
  lastExportedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  Report?: Prisma.ReportOrderByWithRelationInput
}

export type ReportRunWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ReportRunWhereInput | Prisma.ReportRunWhereInput[]
  OR?: Prisma.ReportRunWhereInput[]
  NOT?: Prisma.ReportRunWhereInput | Prisma.ReportRunWhereInput[]
  reportId?: Prisma.StringFilter<"ReportRun"> | string
  runAt?: Prisma.DateTimeFilter<"ReportRun"> | Date | string
  status?: Prisma.EnumReportStatusFilter<"ReportRun"> | $Enums.ReportStatus
  results?: Prisma.JsonNullableFilter<"ReportRun">
  duration?: Prisma.IntNullableFilter<"ReportRun"> | number | null
  startDate?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  customParams?: Prisma.JsonNullableFilter<"ReportRun">
  exportFormats?: Prisma.StringNullableListFilter<"ReportRun">
  lastExportedAt?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  Report?: Prisma.XOR<Prisma.ReportScalarRelationFilter, Prisma.ReportWhereInput>
}, "id">

export type ReportRunOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  runAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  results?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  customParams?: Prisma.SortOrderInput | Prisma.SortOrder
  exportFormats?: Prisma.SortOrder
  lastExportedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ReportRunCountOrderByAggregateInput
  _avg?: Prisma.ReportRunAvgOrderByAggregateInput
  _max?: Prisma.ReportRunMaxOrderByAggregateInput
  _min?: Prisma.ReportRunMinOrderByAggregateInput
  _sum?: Prisma.ReportRunSumOrderByAggregateInput
}

export type ReportRunScalarWhereWithAggregatesInput = {
  AND?: Prisma.ReportRunScalarWhereWithAggregatesInput | Prisma.ReportRunScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReportRunScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ReportRunScalarWhereWithAggregatesInput | Prisma.ReportRunScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ReportRun"> | string
  reportId?: Prisma.StringWithAggregatesFilter<"ReportRun"> | string
  runAt?: Prisma.DateTimeWithAggregatesFilter<"ReportRun"> | Date | string
  status?: Prisma.EnumReportStatusWithAggregatesFilter<"ReportRun"> | $Enums.ReportStatus
  results?: Prisma.JsonNullableWithAggregatesFilter<"ReportRun">
  duration?: Prisma.IntNullableWithAggregatesFilter<"ReportRun"> | number | null
  startDate?: Prisma.DateTimeNullableWithAggregatesFilter<"ReportRun"> | Date | string | null
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"ReportRun"> | Date | string | null
  customParams?: Prisma.JsonNullableWithAggregatesFilter<"ReportRun">
  exportFormats?: Prisma.StringNullableListFilter<"ReportRun">
  lastExportedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ReportRun"> | Date | string | null
}

export type ReportRunCreateInput = {
  id?: string
  runAt?: Date | string
  status: $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: number | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunCreateexportFormatsInput | string[]
  lastExportedAt?: Date | string | null
  Report: Prisma.ReportCreateNestedOneWithoutReportRunsInput
}

export type ReportRunUncheckedCreateInput = {
  id?: string
  reportId: string
  runAt?: Date | string
  status: $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: number | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunCreateexportFormatsInput | string[]
  lastExportedAt?: Date | string | null
}

export type ReportRunUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  Report?: Prisma.ReportUpdateOneRequiredWithoutReportRunsNestedInput
}

export type ReportRunUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ReportRunCreateManyInput = {
  id?: string
  reportId: string
  runAt?: Date | string
  status: $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: number | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunCreateexportFormatsInput | string[]
  lastExportedAt?: Date | string | null
}

export type ReportRunUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ReportRunUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ReportRunListRelationFilter = {
  every?: Prisma.ReportRunWhereInput
  some?: Prisma.ReportRunWhereInput
  none?: Prisma.ReportRunWhereInput
}

export type ReportRunOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReportRunCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  runAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  results?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  customParams?: Prisma.SortOrder
  exportFormats?: Prisma.SortOrder
  lastExportedAt?: Prisma.SortOrder
}

export type ReportRunAvgOrderByAggregateInput = {
  duration?: Prisma.SortOrder
}

export type ReportRunMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  runAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  lastExportedAt?: Prisma.SortOrder
}

export type ReportRunMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  runAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  lastExportedAt?: Prisma.SortOrder
}

export type ReportRunSumOrderByAggregateInput = {
  duration?: Prisma.SortOrder
}

export type ReportRunCreateNestedManyWithoutReportInput = {
  create?: Prisma.XOR<Prisma.ReportRunCreateWithoutReportInput, Prisma.ReportRunUncheckedCreateWithoutReportInput> | Prisma.ReportRunCreateWithoutReportInput[] | Prisma.ReportRunUncheckedCreateWithoutReportInput[]
  connectOrCreate?: Prisma.ReportRunCreateOrConnectWithoutReportInput | Prisma.ReportRunCreateOrConnectWithoutReportInput[]
  createMany?: Prisma.ReportRunCreateManyReportInputEnvelope
  connect?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
}

export type ReportRunUncheckedCreateNestedManyWithoutReportInput = {
  create?: Prisma.XOR<Prisma.ReportRunCreateWithoutReportInput, Prisma.ReportRunUncheckedCreateWithoutReportInput> | Prisma.ReportRunCreateWithoutReportInput[] | Prisma.ReportRunUncheckedCreateWithoutReportInput[]
  connectOrCreate?: Prisma.ReportRunCreateOrConnectWithoutReportInput | Prisma.ReportRunCreateOrConnectWithoutReportInput[]
  createMany?: Prisma.ReportRunCreateManyReportInputEnvelope
  connect?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
}

export type ReportRunUpdateManyWithoutReportNestedInput = {
  create?: Prisma.XOR<Prisma.ReportRunCreateWithoutReportInput, Prisma.ReportRunUncheckedCreateWithoutReportInput> | Prisma.ReportRunCreateWithoutReportInput[] | Prisma.ReportRunUncheckedCreateWithoutReportInput[]
  connectOrCreate?: Prisma.ReportRunCreateOrConnectWithoutReportInput | Prisma.ReportRunCreateOrConnectWithoutReportInput[]
  upsert?: Prisma.ReportRunUpsertWithWhereUniqueWithoutReportInput | Prisma.ReportRunUpsertWithWhereUniqueWithoutReportInput[]
  createMany?: Prisma.ReportRunCreateManyReportInputEnvelope
  set?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  disconnect?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  delete?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  connect?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  update?: Prisma.ReportRunUpdateWithWhereUniqueWithoutReportInput | Prisma.ReportRunUpdateWithWhereUniqueWithoutReportInput[]
  updateMany?: Prisma.ReportRunUpdateManyWithWhereWithoutReportInput | Prisma.ReportRunUpdateManyWithWhereWithoutReportInput[]
  deleteMany?: Prisma.ReportRunScalarWhereInput | Prisma.ReportRunScalarWhereInput[]
}

export type ReportRunUncheckedUpdateManyWithoutReportNestedInput = {
  create?: Prisma.XOR<Prisma.ReportRunCreateWithoutReportInput, Prisma.ReportRunUncheckedCreateWithoutReportInput> | Prisma.ReportRunCreateWithoutReportInput[] | Prisma.ReportRunUncheckedCreateWithoutReportInput[]
  connectOrCreate?: Prisma.ReportRunCreateOrConnectWithoutReportInput | Prisma.ReportRunCreateOrConnectWithoutReportInput[]
  upsert?: Prisma.ReportRunUpsertWithWhereUniqueWithoutReportInput | Prisma.ReportRunUpsertWithWhereUniqueWithoutReportInput[]
  createMany?: Prisma.ReportRunCreateManyReportInputEnvelope
  set?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  disconnect?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  delete?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  connect?: Prisma.ReportRunWhereUniqueInput | Prisma.ReportRunWhereUniqueInput[]
  update?: Prisma.ReportRunUpdateWithWhereUniqueWithoutReportInput | Prisma.ReportRunUpdateWithWhereUniqueWithoutReportInput[]
  updateMany?: Prisma.ReportRunUpdateManyWithWhereWithoutReportInput | Prisma.ReportRunUpdateManyWithWhereWithoutReportInput[]
  deleteMany?: Prisma.ReportRunScalarWhereInput | Prisma.ReportRunScalarWhereInput[]
}

export type ReportRunCreateexportFormatsInput = {
  set: string[]
}

export type EnumReportStatusFieldUpdateOperationsInput = {
  set?: $Enums.ReportStatus
}

export type ReportRunUpdateexportFormatsInput = {
  set?: string[]
  push?: string | string[]
}

export type ReportRunCreateWithoutReportInput = {
  id?: string
  runAt?: Date | string
  status: $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: number | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunCreateexportFormatsInput | string[]
  lastExportedAt?: Date | string | null
}

export type ReportRunUncheckedCreateWithoutReportInput = {
  id?: string
  runAt?: Date | string
  status: $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: number | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunCreateexportFormatsInput | string[]
  lastExportedAt?: Date | string | null
}

export type ReportRunCreateOrConnectWithoutReportInput = {
  where: Prisma.ReportRunWhereUniqueInput
  create: Prisma.XOR<Prisma.ReportRunCreateWithoutReportInput, Prisma.ReportRunUncheckedCreateWithoutReportInput>
}

export type ReportRunCreateManyReportInputEnvelope = {
  data: Prisma.ReportRunCreateManyReportInput | Prisma.ReportRunCreateManyReportInput[]
  skipDuplicates?: boolean
}

export type ReportRunUpsertWithWhereUniqueWithoutReportInput = {
  where: Prisma.ReportRunWhereUniqueInput
  update: Prisma.XOR<Prisma.ReportRunUpdateWithoutReportInput, Prisma.ReportRunUncheckedUpdateWithoutReportInput>
  create: Prisma.XOR<Prisma.ReportRunCreateWithoutReportInput, Prisma.ReportRunUncheckedCreateWithoutReportInput>
}

export type ReportRunUpdateWithWhereUniqueWithoutReportInput = {
  where: Prisma.ReportRunWhereUniqueInput
  data: Prisma.XOR<Prisma.ReportRunUpdateWithoutReportInput, Prisma.ReportRunUncheckedUpdateWithoutReportInput>
}

export type ReportRunUpdateManyWithWhereWithoutReportInput = {
  where: Prisma.ReportRunScalarWhereInput
  data: Prisma.XOR<Prisma.ReportRunUpdateManyMutationInput, Prisma.ReportRunUncheckedUpdateManyWithoutReportInput>
}

export type ReportRunScalarWhereInput = {
  AND?: Prisma.ReportRunScalarWhereInput | Prisma.ReportRunScalarWhereInput[]
  OR?: Prisma.ReportRunScalarWhereInput[]
  NOT?: Prisma.ReportRunScalarWhereInput | Prisma.ReportRunScalarWhereInput[]
  id?: Prisma.StringFilter<"ReportRun"> | string
  reportId?: Prisma.StringFilter<"ReportRun"> | string
  runAt?: Prisma.DateTimeFilter<"ReportRun"> | Date | string
  status?: Prisma.EnumReportStatusFilter<"ReportRun"> | $Enums.ReportStatus
  results?: Prisma.JsonNullableFilter<"ReportRun">
  duration?: Prisma.IntNullableFilter<"ReportRun"> | number | null
  startDate?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
  customParams?: Prisma.JsonNullableFilter<"ReportRun">
  exportFormats?: Prisma.StringNullableListFilter<"ReportRun">
  lastExportedAt?: Prisma.DateTimeNullableFilter<"ReportRun"> | Date | string | null
}

export type ReportRunCreateManyReportInput = {
  id?: string
  runAt?: Date | string
  status: $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: number | null
  startDate?: Date | string | null
  endDate?: Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunCreateexportFormatsInput | string[]
  lastExportedAt?: Date | string | null
}

export type ReportRunUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ReportRunUncheckedUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ReportRunUncheckedUpdateManyWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  runAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumReportStatusFieldUpdateOperationsInput | $Enums.ReportStatus
  results?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  duration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  customParams?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  exportFormats?: Prisma.ReportRunUpdateexportFormatsInput | string[]
  lastExportedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type ReportRunSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  reportId?: boolean
  runAt?: boolean
  status?: boolean
  results?: boolean
  duration?: boolean
  startDate?: boolean
  endDate?: boolean
  customParams?: boolean
  exportFormats?: boolean
  lastExportedAt?: boolean
  Report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reportRun"]>

export type ReportRunSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  reportId?: boolean
  runAt?: boolean
  status?: boolean
  results?: boolean
  duration?: boolean
  startDate?: boolean
  endDate?: boolean
  customParams?: boolean
  exportFormats?: boolean
  lastExportedAt?: boolean
  Report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reportRun"]>

export type ReportRunSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  reportId?: boolean
  runAt?: boolean
  status?: boolean
  results?: boolean
  duration?: boolean
  startDate?: boolean
  endDate?: boolean
  customParams?: boolean
  exportFormats?: boolean
  lastExportedAt?: boolean
  Report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reportRun"]>

export type ReportRunSelectScalar = {
  id?: boolean
  reportId?: boolean
  runAt?: boolean
  status?: boolean
  results?: boolean
  duration?: boolean
  startDate?: boolean
  endDate?: boolean
  customParams?: boolean
  exportFormats?: boolean
  lastExportedAt?: boolean
}

export type ReportRunOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "reportId" | "runAt" | "status" | "results" | "duration" | "startDate" | "endDate" | "customParams" | "exportFormats" | "lastExportedAt", ExtArgs["result"]["reportRun"]>
export type ReportRunInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
}
export type ReportRunIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
}
export type ReportRunIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
}

export type $ReportRunPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ReportRun"
  objects: {
    Report: Prisma.$ReportPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    reportId: string
    runAt: Date
    status: $Enums.ReportStatus
    results: runtime.JsonValue | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    customParams: runtime.JsonValue | null
    exportFormats: string[]
    lastExportedAt: Date | null
  }, ExtArgs["result"]["reportRun"]>
  composites: {}
}

export type ReportRunGetPayload<S extends boolean | null | undefined | ReportRunDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ReportRunPayload, S>

export type ReportRunCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ReportRunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ReportRunCountAggregateInputType | true
  }

export interface ReportRunDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportRun'], meta: { name: 'ReportRun' } }
  /**
   * Find zero or one ReportRun that matches the filter.
   * @param {ReportRunFindUniqueArgs} args - Arguments to find a ReportRun
   * @example
   * // Get one ReportRun
   * const reportRun = await prisma.reportRun.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportRunFindUniqueArgs>(args: Prisma.SelectSubset<T, ReportRunFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ReportRun that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportRunFindUniqueOrThrowArgs} args - Arguments to find a ReportRun
   * @example
   * // Get one ReportRun
   * const reportRun = await prisma.reportRun.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportRunFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ReportRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ReportRun that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunFindFirstArgs} args - Arguments to find a ReportRun
   * @example
   * // Get one ReportRun
   * const reportRun = await prisma.reportRun.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportRunFindFirstArgs>(args?: Prisma.SelectSubset<T, ReportRunFindFirstArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ReportRun that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunFindFirstOrThrowArgs} args - Arguments to find a ReportRun
   * @example
   * // Get one ReportRun
   * const reportRun = await prisma.reportRun.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportRunFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ReportRunFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ReportRuns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ReportRuns
   * const reportRuns = await prisma.reportRun.findMany()
   * 
   * // Get first 10 ReportRuns
   * const reportRuns = await prisma.reportRun.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const reportRunWithIdOnly = await prisma.reportRun.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ReportRunFindManyArgs>(args?: Prisma.SelectSubset<T, ReportRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ReportRun.
   * @param {ReportRunCreateArgs} args - Arguments to create a ReportRun.
   * @example
   * // Create one ReportRun
   * const ReportRun = await prisma.reportRun.create({
   *   data: {
   *     // ... data to create a ReportRun
   *   }
   * })
   * 
   */
  create<T extends ReportRunCreateArgs>(args: Prisma.SelectSubset<T, ReportRunCreateArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ReportRuns.
   * @param {ReportRunCreateManyArgs} args - Arguments to create many ReportRuns.
   * @example
   * // Create many ReportRuns
   * const reportRun = await prisma.reportRun.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ReportRunCreateManyArgs>(args?: Prisma.SelectSubset<T, ReportRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ReportRuns and returns the data saved in the database.
   * @param {ReportRunCreateManyAndReturnArgs} args - Arguments to create many ReportRuns.
   * @example
   * // Create many ReportRuns
   * const reportRun = await prisma.reportRun.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ReportRuns and only return the `id`
   * const reportRunWithIdOnly = await prisma.reportRun.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ReportRunCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ReportRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ReportRun.
   * @param {ReportRunDeleteArgs} args - Arguments to delete one ReportRun.
   * @example
   * // Delete one ReportRun
   * const ReportRun = await prisma.reportRun.delete({
   *   where: {
   *     // ... filter to delete one ReportRun
   *   }
   * })
   * 
   */
  delete<T extends ReportRunDeleteArgs>(args: Prisma.SelectSubset<T, ReportRunDeleteArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ReportRun.
   * @param {ReportRunUpdateArgs} args - Arguments to update one ReportRun.
   * @example
   * // Update one ReportRun
   * const reportRun = await prisma.reportRun.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ReportRunUpdateArgs>(args: Prisma.SelectSubset<T, ReportRunUpdateArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ReportRuns.
   * @param {ReportRunDeleteManyArgs} args - Arguments to filter ReportRuns to delete.
   * @example
   * // Delete a few ReportRuns
   * const { count } = await prisma.reportRun.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ReportRunDeleteManyArgs>(args?: Prisma.SelectSubset<T, ReportRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReportRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ReportRuns
   * const reportRun = await prisma.reportRun.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ReportRunUpdateManyArgs>(args: Prisma.SelectSubset<T, ReportRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReportRuns and returns the data updated in the database.
   * @param {ReportRunUpdateManyAndReturnArgs} args - Arguments to update many ReportRuns.
   * @example
   * // Update many ReportRuns
   * const reportRun = await prisma.reportRun.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ReportRuns and only return the `id`
   * const reportRunWithIdOnly = await prisma.reportRun.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ReportRunUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ReportRunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ReportRun.
   * @param {ReportRunUpsertArgs} args - Arguments to update or create a ReportRun.
   * @example
   * // Update or create a ReportRun
   * const reportRun = await prisma.reportRun.upsert({
   *   create: {
   *     // ... data to create a ReportRun
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ReportRun we want to update
   *   }
   * })
   */
  upsert<T extends ReportRunUpsertArgs>(args: Prisma.SelectSubset<T, ReportRunUpsertArgs<ExtArgs>>): Prisma.Prisma__ReportRunClient<runtime.Types.Result.GetResult<Prisma.$ReportRunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ReportRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunCountArgs} args - Arguments to filter ReportRuns to count.
   * @example
   * // Count the number of ReportRuns
   * const count = await prisma.reportRun.count({
   *   where: {
   *     // ... the filter for the ReportRuns we want to count
   *   }
   * })
  **/
  count<T extends ReportRunCountArgs>(
    args?: Prisma.Subset<T, ReportRunCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReportRunCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ReportRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ReportRunAggregateArgs>(args: Prisma.Subset<T, ReportRunAggregateArgs>): Prisma.PrismaPromise<GetReportRunAggregateType<T>>

  /**
   * Group by ReportRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportRunGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ReportRunGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportRunGroupByArgs['orderBy'] }
      : { orderBy?: ReportRunGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ReportRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ReportRun model
 */
readonly fields: ReportRunFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ReportRun.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportRunClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Report<T extends Prisma.ReportDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ReportDefaultArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ReportRun model
 */
export interface ReportRunFieldRefs {
  readonly id: Prisma.FieldRef<"ReportRun", 'String'>
  readonly reportId: Prisma.FieldRef<"ReportRun", 'String'>
  readonly runAt: Prisma.FieldRef<"ReportRun", 'DateTime'>
  readonly status: Prisma.FieldRef<"ReportRun", 'ReportStatus'>
  readonly results: Prisma.FieldRef<"ReportRun", 'Json'>
  readonly duration: Prisma.FieldRef<"ReportRun", 'Int'>
  readonly startDate: Prisma.FieldRef<"ReportRun", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"ReportRun", 'DateTime'>
  readonly customParams: Prisma.FieldRef<"ReportRun", 'Json'>
  readonly exportFormats: Prisma.FieldRef<"ReportRun", 'String[]'>
  readonly lastExportedAt: Prisma.FieldRef<"ReportRun", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ReportRun findUnique
 */
export type ReportRunFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * Filter, which ReportRun to fetch.
   */
  where: Prisma.ReportRunWhereUniqueInput
}

/**
 * ReportRun findUniqueOrThrow
 */
export type ReportRunFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * Filter, which ReportRun to fetch.
   */
  where: Prisma.ReportRunWhereUniqueInput
}

/**
 * ReportRun findFirst
 */
export type ReportRunFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * Filter, which ReportRun to fetch.
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportRuns to fetch.
   */
  orderBy?: Prisma.ReportRunOrderByWithRelationInput | Prisma.ReportRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ReportRuns.
   */
  cursor?: Prisma.ReportRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ReportRuns.
   */
  distinct?: Prisma.ReportRunScalarFieldEnum | Prisma.ReportRunScalarFieldEnum[]
}

/**
 * ReportRun findFirstOrThrow
 */
export type ReportRunFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * Filter, which ReportRun to fetch.
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportRuns to fetch.
   */
  orderBy?: Prisma.ReportRunOrderByWithRelationInput | Prisma.ReportRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ReportRuns.
   */
  cursor?: Prisma.ReportRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ReportRuns.
   */
  distinct?: Prisma.ReportRunScalarFieldEnum | Prisma.ReportRunScalarFieldEnum[]
}

/**
 * ReportRun findMany
 */
export type ReportRunFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * Filter, which ReportRuns to fetch.
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ReportRuns to fetch.
   */
  orderBy?: Prisma.ReportRunOrderByWithRelationInput | Prisma.ReportRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ReportRuns.
   */
  cursor?: Prisma.ReportRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ReportRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ReportRuns.
   */
  skip?: number
  distinct?: Prisma.ReportRunScalarFieldEnum | Prisma.ReportRunScalarFieldEnum[]
}

/**
 * ReportRun create
 */
export type ReportRunCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * The data needed to create a ReportRun.
   */
  data: Prisma.XOR<Prisma.ReportRunCreateInput, Prisma.ReportRunUncheckedCreateInput>
}

/**
 * ReportRun createMany
 */
export type ReportRunCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ReportRuns.
   */
  data: Prisma.ReportRunCreateManyInput | Prisma.ReportRunCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ReportRun createManyAndReturn
 */
export type ReportRunCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * The data used to create many ReportRuns.
   */
  data: Prisma.ReportRunCreateManyInput | Prisma.ReportRunCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ReportRun update
 */
export type ReportRunUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * The data needed to update a ReportRun.
   */
  data: Prisma.XOR<Prisma.ReportRunUpdateInput, Prisma.ReportRunUncheckedUpdateInput>
  /**
   * Choose, which ReportRun to update.
   */
  where: Prisma.ReportRunWhereUniqueInput
}

/**
 * ReportRun updateMany
 */
export type ReportRunUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ReportRuns.
   */
  data: Prisma.XOR<Prisma.ReportRunUpdateManyMutationInput, Prisma.ReportRunUncheckedUpdateManyInput>
  /**
   * Filter which ReportRuns to update
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * Limit how many ReportRuns to update.
   */
  limit?: number
}

/**
 * ReportRun updateManyAndReturn
 */
export type ReportRunUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * The data used to update ReportRuns.
   */
  data: Prisma.XOR<Prisma.ReportRunUpdateManyMutationInput, Prisma.ReportRunUncheckedUpdateManyInput>
  /**
   * Filter which ReportRuns to update
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * Limit how many ReportRuns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ReportRun upsert
 */
export type ReportRunUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * The filter to search for the ReportRun to update in case it exists.
   */
  where: Prisma.ReportRunWhereUniqueInput
  /**
   * In case the ReportRun found by the `where` argument doesn't exist, create a new ReportRun with this data.
   */
  create: Prisma.XOR<Prisma.ReportRunCreateInput, Prisma.ReportRunUncheckedCreateInput>
  /**
   * In case the ReportRun was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReportRunUpdateInput, Prisma.ReportRunUncheckedUpdateInput>
}

/**
 * ReportRun delete
 */
export type ReportRunDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
  /**
   * Filter which ReportRun to delete.
   */
  where: Prisma.ReportRunWhereUniqueInput
}

/**
 * ReportRun deleteMany
 */
export type ReportRunDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ReportRuns to delete
   */
  where?: Prisma.ReportRunWhereInput
  /**
   * Limit how many ReportRuns to delete.
   */
  limit?: number
}

/**
 * ReportRun without action
 */
export type ReportRunDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ReportRun
   */
  select?: Prisma.ReportRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportRun
   */
  omit?: Prisma.ReportRunOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportRunInclude<ExtArgs> | null
}
