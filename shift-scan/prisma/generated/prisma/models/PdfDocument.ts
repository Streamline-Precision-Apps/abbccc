
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PdfDocument` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PdfDocument
 * 
 */
export type PdfDocumentModel = runtime.Types.Result.DefaultSelection<Prisma.$PdfDocumentPayload>

export type AggregatePdfDocument = {
  _count: PdfDocumentCountAggregateOutputType | null
  _avg: PdfDocumentAvgAggregateOutputType | null
  _sum: PdfDocumentSumAggregateOutputType | null
  _min: PdfDocumentMinAggregateOutputType | null
  _max: PdfDocumentMaxAggregateOutputType | null
}

export type PdfDocumentAvgAggregateOutputType = {
  size: number | null
}

export type PdfDocumentSumAggregateOutputType = {
  size: number | null
}

export type PdfDocumentMinAggregateOutputType = {
  id: string | null
  qrId: string | null
  fileName: string | null
  description: string | null
  fileData: Uint8Array | null
  contentType: string | null
  size: number | null
  isActive: boolean | null
  createdAt: Date | null
  uploadDate: Date | null
}

export type PdfDocumentMaxAggregateOutputType = {
  id: string | null
  qrId: string | null
  fileName: string | null
  description: string | null
  fileData: Uint8Array | null
  contentType: string | null
  size: number | null
  isActive: boolean | null
  createdAt: Date | null
  uploadDate: Date | null
}

export type PdfDocumentCountAggregateOutputType = {
  id: number
  qrId: number
  fileName: number
  description: number
  fileData: number
  contentType: number
  size: number
  isActive: number
  createdAt: number
  uploadDate: number
  _all: number
}


export type PdfDocumentAvgAggregateInputType = {
  size?: true
}

export type PdfDocumentSumAggregateInputType = {
  size?: true
}

export type PdfDocumentMinAggregateInputType = {
  id?: true
  qrId?: true
  fileName?: true
  description?: true
  fileData?: true
  contentType?: true
  size?: true
  isActive?: true
  createdAt?: true
  uploadDate?: true
}

export type PdfDocumentMaxAggregateInputType = {
  id?: true
  qrId?: true
  fileName?: true
  description?: true
  fileData?: true
  contentType?: true
  size?: true
  isActive?: true
  createdAt?: true
  uploadDate?: true
}

export type PdfDocumentCountAggregateInputType = {
  id?: true
  qrId?: true
  fileName?: true
  description?: true
  fileData?: true
  contentType?: true
  size?: true
  isActive?: true
  createdAt?: true
  uploadDate?: true
  _all?: true
}

export type PdfDocumentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PdfDocument to aggregate.
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PdfDocuments to fetch.
   */
  orderBy?: Prisma.PdfDocumentOrderByWithRelationInput | Prisma.PdfDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PdfDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PdfDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PdfDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PdfDocuments
  **/
  _count?: true | PdfDocumentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PdfDocumentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PdfDocumentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PdfDocumentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PdfDocumentMaxAggregateInputType
}

export type GetPdfDocumentAggregateType<T extends PdfDocumentAggregateArgs> = {
      [P in keyof T & keyof AggregatePdfDocument]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePdfDocument[P]>
    : Prisma.GetScalarType<T[P], AggregatePdfDocument[P]>
}




export type PdfDocumentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PdfDocumentWhereInput
  orderBy?: Prisma.PdfDocumentOrderByWithAggregationInput | Prisma.PdfDocumentOrderByWithAggregationInput[]
  by: Prisma.PdfDocumentScalarFieldEnum[] | Prisma.PdfDocumentScalarFieldEnum
  having?: Prisma.PdfDocumentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PdfDocumentCountAggregateInputType | true
  _avg?: PdfDocumentAvgAggregateInputType
  _sum?: PdfDocumentSumAggregateInputType
  _min?: PdfDocumentMinAggregateInputType
  _max?: PdfDocumentMaxAggregateInputType
}

export type PdfDocumentGroupByOutputType = {
  id: string
  qrId: string
  fileName: string
  description: string | null
  fileData: Uint8Array
  contentType: string
  size: number
  isActive: boolean
  createdAt: Date
  uploadDate: Date
  _count: PdfDocumentCountAggregateOutputType | null
  _avg: PdfDocumentAvgAggregateOutputType | null
  _sum: PdfDocumentSumAggregateOutputType | null
  _min: PdfDocumentMinAggregateOutputType | null
  _max: PdfDocumentMaxAggregateOutputType | null
}

type GetPdfDocumentGroupByPayload<T extends PdfDocumentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PdfDocumentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PdfDocumentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PdfDocumentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PdfDocumentGroupByOutputType[P]>
      }
    >
  >



export type PdfDocumentWhereInput = {
  AND?: Prisma.PdfDocumentWhereInput | Prisma.PdfDocumentWhereInput[]
  OR?: Prisma.PdfDocumentWhereInput[]
  NOT?: Prisma.PdfDocumentWhereInput | Prisma.PdfDocumentWhereInput[]
  id?: Prisma.StringFilter<"PdfDocument"> | string
  qrId?: Prisma.StringFilter<"PdfDocument"> | string
  fileName?: Prisma.StringFilter<"PdfDocument"> | string
  description?: Prisma.StringNullableFilter<"PdfDocument"> | string | null
  fileData?: Prisma.BytesFilter<"PdfDocument"> | Uint8Array
  contentType?: Prisma.StringFilter<"PdfDocument"> | string
  size?: Prisma.IntFilter<"PdfDocument"> | number
  isActive?: Prisma.BoolFilter<"PdfDocument"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PdfDocument"> | Date | string
  uploadDate?: Prisma.DateTimeFilter<"PdfDocument"> | Date | string
  DocumentTags?: Prisma.DocumentTagListRelationFilter
}

export type PdfDocumentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  qrId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  fileData?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  uploadDate?: Prisma.SortOrder
  DocumentTags?: Prisma.DocumentTagOrderByRelationAggregateInput
}

export type PdfDocumentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  qrId?: string
  AND?: Prisma.PdfDocumentWhereInput | Prisma.PdfDocumentWhereInput[]
  OR?: Prisma.PdfDocumentWhereInput[]
  NOT?: Prisma.PdfDocumentWhereInput | Prisma.PdfDocumentWhereInput[]
  fileName?: Prisma.StringFilter<"PdfDocument"> | string
  description?: Prisma.StringNullableFilter<"PdfDocument"> | string | null
  fileData?: Prisma.BytesFilter<"PdfDocument"> | Uint8Array
  contentType?: Prisma.StringFilter<"PdfDocument"> | string
  size?: Prisma.IntFilter<"PdfDocument"> | number
  isActive?: Prisma.BoolFilter<"PdfDocument"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PdfDocument"> | Date | string
  uploadDate?: Prisma.DateTimeFilter<"PdfDocument"> | Date | string
  DocumentTags?: Prisma.DocumentTagListRelationFilter
}, "id" | "qrId">

export type PdfDocumentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  qrId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  fileData?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  uploadDate?: Prisma.SortOrder
  _count?: Prisma.PdfDocumentCountOrderByAggregateInput
  _avg?: Prisma.PdfDocumentAvgOrderByAggregateInput
  _max?: Prisma.PdfDocumentMaxOrderByAggregateInput
  _min?: Prisma.PdfDocumentMinOrderByAggregateInput
  _sum?: Prisma.PdfDocumentSumOrderByAggregateInput
}

export type PdfDocumentScalarWhereWithAggregatesInput = {
  AND?: Prisma.PdfDocumentScalarWhereWithAggregatesInput | Prisma.PdfDocumentScalarWhereWithAggregatesInput[]
  OR?: Prisma.PdfDocumentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PdfDocumentScalarWhereWithAggregatesInput | Prisma.PdfDocumentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PdfDocument"> | string
  qrId?: Prisma.StringWithAggregatesFilter<"PdfDocument"> | string
  fileName?: Prisma.StringWithAggregatesFilter<"PdfDocument"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"PdfDocument"> | string | null
  fileData?: Prisma.BytesWithAggregatesFilter<"PdfDocument"> | Uint8Array
  contentType?: Prisma.StringWithAggregatesFilter<"PdfDocument"> | string
  size?: Prisma.IntWithAggregatesFilter<"PdfDocument"> | number
  isActive?: Prisma.BoolWithAggregatesFilter<"PdfDocument"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PdfDocument"> | Date | string
  uploadDate?: Prisma.DateTimeWithAggregatesFilter<"PdfDocument"> | Date | string
}

export type PdfDocumentCreateInput = {
  id?: string
  qrId: string
  fileName: string
  description?: string | null
  fileData: Uint8Array
  contentType?: string
  size: number
  isActive?: boolean
  createdAt?: Date | string
  uploadDate?: Date | string
  DocumentTags?: Prisma.DocumentTagCreateNestedManyWithoutDocumentsInput
}

export type PdfDocumentUncheckedCreateInput = {
  id?: string
  qrId: string
  fileName: string
  description?: string | null
  fileData: Uint8Array
  contentType?: string
  size: number
  isActive?: boolean
  createdAt?: Date | string
  uploadDate?: Date | string
  DocumentTags?: Prisma.DocumentTagUncheckedCreateNestedManyWithoutDocumentsInput
}

export type PdfDocumentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  DocumentTags?: Prisma.DocumentTagUpdateManyWithoutDocumentsNestedInput
}

export type PdfDocumentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  DocumentTags?: Prisma.DocumentTagUncheckedUpdateManyWithoutDocumentsNestedInput
}

export type PdfDocumentCreateManyInput = {
  id?: string
  qrId: string
  fileName: string
  description?: string | null
  fileData: Uint8Array
  contentType?: string
  size: number
  isActive?: boolean
  createdAt?: Date | string
  uploadDate?: Date | string
}

export type PdfDocumentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PdfDocumentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PdfDocumentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  qrId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileData?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  uploadDate?: Prisma.SortOrder
}

export type PdfDocumentAvgOrderByAggregateInput = {
  size?: Prisma.SortOrder
}

export type PdfDocumentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  qrId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileData?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  uploadDate?: Prisma.SortOrder
}

export type PdfDocumentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  qrId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileData?: Prisma.SortOrder
  contentType?: Prisma.SortOrder
  size?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  uploadDate?: Prisma.SortOrder
}

export type PdfDocumentSumOrderByAggregateInput = {
  size?: Prisma.SortOrder
}

export type PdfDocumentListRelationFilter = {
  every?: Prisma.PdfDocumentWhereInput
  some?: Prisma.PdfDocumentWhereInput
  none?: Prisma.PdfDocumentWhereInput
}

export type PdfDocumentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BytesFieldUpdateOperationsInput = {
  set?: Uint8Array
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PdfDocumentCreateNestedManyWithoutDocumentTagsInput = {
  create?: Prisma.XOR<Prisma.PdfDocumentCreateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput> | Prisma.PdfDocumentCreateWithoutDocumentTagsInput[] | Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput[]
  connectOrCreate?: Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput | Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput[]
  connect?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
}

export type PdfDocumentUncheckedCreateNestedManyWithoutDocumentTagsInput = {
  create?: Prisma.XOR<Prisma.PdfDocumentCreateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput> | Prisma.PdfDocumentCreateWithoutDocumentTagsInput[] | Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput[]
  connectOrCreate?: Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput | Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput[]
  connect?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
}

export type PdfDocumentUpdateManyWithoutDocumentTagsNestedInput = {
  create?: Prisma.XOR<Prisma.PdfDocumentCreateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput> | Prisma.PdfDocumentCreateWithoutDocumentTagsInput[] | Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput[]
  connectOrCreate?: Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput | Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput[]
  upsert?: Prisma.PdfDocumentUpsertWithWhereUniqueWithoutDocumentTagsInput | Prisma.PdfDocumentUpsertWithWhereUniqueWithoutDocumentTagsInput[]
  set?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  disconnect?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  delete?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  connect?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  update?: Prisma.PdfDocumentUpdateWithWhereUniqueWithoutDocumentTagsInput | Prisma.PdfDocumentUpdateWithWhereUniqueWithoutDocumentTagsInput[]
  updateMany?: Prisma.PdfDocumentUpdateManyWithWhereWithoutDocumentTagsInput | Prisma.PdfDocumentUpdateManyWithWhereWithoutDocumentTagsInput[]
  deleteMany?: Prisma.PdfDocumentScalarWhereInput | Prisma.PdfDocumentScalarWhereInput[]
}

export type PdfDocumentUncheckedUpdateManyWithoutDocumentTagsNestedInput = {
  create?: Prisma.XOR<Prisma.PdfDocumentCreateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput> | Prisma.PdfDocumentCreateWithoutDocumentTagsInput[] | Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput[]
  connectOrCreate?: Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput | Prisma.PdfDocumentCreateOrConnectWithoutDocumentTagsInput[]
  upsert?: Prisma.PdfDocumentUpsertWithWhereUniqueWithoutDocumentTagsInput | Prisma.PdfDocumentUpsertWithWhereUniqueWithoutDocumentTagsInput[]
  set?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  disconnect?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  delete?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  connect?: Prisma.PdfDocumentWhereUniqueInput | Prisma.PdfDocumentWhereUniqueInput[]
  update?: Prisma.PdfDocumentUpdateWithWhereUniqueWithoutDocumentTagsInput | Prisma.PdfDocumentUpdateWithWhereUniqueWithoutDocumentTagsInput[]
  updateMany?: Prisma.PdfDocumentUpdateManyWithWhereWithoutDocumentTagsInput | Prisma.PdfDocumentUpdateManyWithWhereWithoutDocumentTagsInput[]
  deleteMany?: Prisma.PdfDocumentScalarWhereInput | Prisma.PdfDocumentScalarWhereInput[]
}

export type PdfDocumentCreateWithoutDocumentTagsInput = {
  id?: string
  qrId: string
  fileName: string
  description?: string | null
  fileData: Uint8Array
  contentType?: string
  size: number
  isActive?: boolean
  createdAt?: Date | string
  uploadDate?: Date | string
}

export type PdfDocumentUncheckedCreateWithoutDocumentTagsInput = {
  id?: string
  qrId: string
  fileName: string
  description?: string | null
  fileData: Uint8Array
  contentType?: string
  size: number
  isActive?: boolean
  createdAt?: Date | string
  uploadDate?: Date | string
}

export type PdfDocumentCreateOrConnectWithoutDocumentTagsInput = {
  where: Prisma.PdfDocumentWhereUniqueInput
  create: Prisma.XOR<Prisma.PdfDocumentCreateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput>
}

export type PdfDocumentUpsertWithWhereUniqueWithoutDocumentTagsInput = {
  where: Prisma.PdfDocumentWhereUniqueInput
  update: Prisma.XOR<Prisma.PdfDocumentUpdateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedUpdateWithoutDocumentTagsInput>
  create: Prisma.XOR<Prisma.PdfDocumentCreateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedCreateWithoutDocumentTagsInput>
}

export type PdfDocumentUpdateWithWhereUniqueWithoutDocumentTagsInput = {
  where: Prisma.PdfDocumentWhereUniqueInput
  data: Prisma.XOR<Prisma.PdfDocumentUpdateWithoutDocumentTagsInput, Prisma.PdfDocumentUncheckedUpdateWithoutDocumentTagsInput>
}

export type PdfDocumentUpdateManyWithWhereWithoutDocumentTagsInput = {
  where: Prisma.PdfDocumentScalarWhereInput
  data: Prisma.XOR<Prisma.PdfDocumentUpdateManyMutationInput, Prisma.PdfDocumentUncheckedUpdateManyWithoutDocumentTagsInput>
}

export type PdfDocumentScalarWhereInput = {
  AND?: Prisma.PdfDocumentScalarWhereInput | Prisma.PdfDocumentScalarWhereInput[]
  OR?: Prisma.PdfDocumentScalarWhereInput[]
  NOT?: Prisma.PdfDocumentScalarWhereInput | Prisma.PdfDocumentScalarWhereInput[]
  id?: Prisma.StringFilter<"PdfDocument"> | string
  qrId?: Prisma.StringFilter<"PdfDocument"> | string
  fileName?: Prisma.StringFilter<"PdfDocument"> | string
  description?: Prisma.StringNullableFilter<"PdfDocument"> | string | null
  fileData?: Prisma.BytesFilter<"PdfDocument"> | Uint8Array
  contentType?: Prisma.StringFilter<"PdfDocument"> | string
  size?: Prisma.IntFilter<"PdfDocument"> | number
  isActive?: Prisma.BoolFilter<"PdfDocument"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PdfDocument"> | Date | string
  uploadDate?: Prisma.DateTimeFilter<"PdfDocument"> | Date | string
}

export type PdfDocumentUpdateWithoutDocumentTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PdfDocumentUncheckedUpdateWithoutDocumentTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PdfDocumentUncheckedUpdateManyWithoutDocumentTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  qrId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fileData?: Prisma.BytesFieldUpdateOperationsInput | Uint8Array
  contentType?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  uploadDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PdfDocumentCountOutputType
 */

export type PdfDocumentCountOutputType = {
  DocumentTags: number
}

export type PdfDocumentCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DocumentTags?: boolean | PdfDocumentCountOutputTypeCountDocumentTagsArgs
}

/**
 * PdfDocumentCountOutputType without action
 */
export type PdfDocumentCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocumentCountOutputType
   */
  select?: Prisma.PdfDocumentCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PdfDocumentCountOutputType without action
 */
export type PdfDocumentCountOutputTypeCountDocumentTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentTagWhereInput
}


export type PdfDocumentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  qrId?: boolean
  fileName?: boolean
  description?: boolean
  fileData?: boolean
  contentType?: boolean
  size?: boolean
  isActive?: boolean
  createdAt?: boolean
  uploadDate?: boolean
  DocumentTags?: boolean | Prisma.PdfDocument$DocumentTagsArgs<ExtArgs>
  _count?: boolean | Prisma.PdfDocumentCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pdfDocument"]>

export type PdfDocumentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  qrId?: boolean
  fileName?: boolean
  description?: boolean
  fileData?: boolean
  contentType?: boolean
  size?: boolean
  isActive?: boolean
  createdAt?: boolean
  uploadDate?: boolean
}, ExtArgs["result"]["pdfDocument"]>

export type PdfDocumentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  qrId?: boolean
  fileName?: boolean
  description?: boolean
  fileData?: boolean
  contentType?: boolean
  size?: boolean
  isActive?: boolean
  createdAt?: boolean
  uploadDate?: boolean
}, ExtArgs["result"]["pdfDocument"]>

export type PdfDocumentSelectScalar = {
  id?: boolean
  qrId?: boolean
  fileName?: boolean
  description?: boolean
  fileData?: boolean
  contentType?: boolean
  size?: boolean
  isActive?: boolean
  createdAt?: boolean
  uploadDate?: boolean
}

export type PdfDocumentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "qrId" | "fileName" | "description" | "fileData" | "contentType" | "size" | "isActive" | "createdAt" | "uploadDate", ExtArgs["result"]["pdfDocument"]>
export type PdfDocumentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  DocumentTags?: boolean | Prisma.PdfDocument$DocumentTagsArgs<ExtArgs>
  _count?: boolean | Prisma.PdfDocumentCountOutputTypeDefaultArgs<ExtArgs>
}
export type PdfDocumentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PdfDocumentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PdfDocumentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PdfDocument"
  objects: {
    DocumentTags: Prisma.$DocumentTagPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    qrId: string
    fileName: string
    description: string | null
    fileData: Uint8Array
    contentType: string
    size: number
    isActive: boolean
    createdAt: Date
    uploadDate: Date
  }, ExtArgs["result"]["pdfDocument"]>
  composites: {}
}

export type PdfDocumentGetPayload<S extends boolean | null | undefined | PdfDocumentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload, S>

export type PdfDocumentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PdfDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PdfDocumentCountAggregateInputType | true
  }

export interface PdfDocumentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PdfDocument'], meta: { name: 'PdfDocument' } }
  /**
   * Find zero or one PdfDocument that matches the filter.
   * @param {PdfDocumentFindUniqueArgs} args - Arguments to find a PdfDocument
   * @example
   * // Get one PdfDocument
   * const pdfDocument = await prisma.pdfDocument.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PdfDocumentFindUniqueArgs>(args: Prisma.SelectSubset<T, PdfDocumentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PdfDocument that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PdfDocumentFindUniqueOrThrowArgs} args - Arguments to find a PdfDocument
   * @example
   * // Get one PdfDocument
   * const pdfDocument = await prisma.pdfDocument.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PdfDocumentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PdfDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PdfDocument that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentFindFirstArgs} args - Arguments to find a PdfDocument
   * @example
   * // Get one PdfDocument
   * const pdfDocument = await prisma.pdfDocument.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PdfDocumentFindFirstArgs>(args?: Prisma.SelectSubset<T, PdfDocumentFindFirstArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PdfDocument that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentFindFirstOrThrowArgs} args - Arguments to find a PdfDocument
   * @example
   * // Get one PdfDocument
   * const pdfDocument = await prisma.pdfDocument.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PdfDocumentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PdfDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PdfDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PdfDocuments
   * const pdfDocuments = await prisma.pdfDocument.findMany()
   * 
   * // Get first 10 PdfDocuments
   * const pdfDocuments = await prisma.pdfDocument.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pdfDocumentWithIdOnly = await prisma.pdfDocument.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PdfDocumentFindManyArgs>(args?: Prisma.SelectSubset<T, PdfDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PdfDocument.
   * @param {PdfDocumentCreateArgs} args - Arguments to create a PdfDocument.
   * @example
   * // Create one PdfDocument
   * const PdfDocument = await prisma.pdfDocument.create({
   *   data: {
   *     // ... data to create a PdfDocument
   *   }
   * })
   * 
   */
  create<T extends PdfDocumentCreateArgs>(args: Prisma.SelectSubset<T, PdfDocumentCreateArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PdfDocuments.
   * @param {PdfDocumentCreateManyArgs} args - Arguments to create many PdfDocuments.
   * @example
   * // Create many PdfDocuments
   * const pdfDocument = await prisma.pdfDocument.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PdfDocumentCreateManyArgs>(args?: Prisma.SelectSubset<T, PdfDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PdfDocuments and returns the data saved in the database.
   * @param {PdfDocumentCreateManyAndReturnArgs} args - Arguments to create many PdfDocuments.
   * @example
   * // Create many PdfDocuments
   * const pdfDocument = await prisma.pdfDocument.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PdfDocuments and only return the `id`
   * const pdfDocumentWithIdOnly = await prisma.pdfDocument.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PdfDocumentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PdfDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PdfDocument.
   * @param {PdfDocumentDeleteArgs} args - Arguments to delete one PdfDocument.
   * @example
   * // Delete one PdfDocument
   * const PdfDocument = await prisma.pdfDocument.delete({
   *   where: {
   *     // ... filter to delete one PdfDocument
   *   }
   * })
   * 
   */
  delete<T extends PdfDocumentDeleteArgs>(args: Prisma.SelectSubset<T, PdfDocumentDeleteArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PdfDocument.
   * @param {PdfDocumentUpdateArgs} args - Arguments to update one PdfDocument.
   * @example
   * // Update one PdfDocument
   * const pdfDocument = await prisma.pdfDocument.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PdfDocumentUpdateArgs>(args: Prisma.SelectSubset<T, PdfDocumentUpdateArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PdfDocuments.
   * @param {PdfDocumentDeleteManyArgs} args - Arguments to filter PdfDocuments to delete.
   * @example
   * // Delete a few PdfDocuments
   * const { count } = await prisma.pdfDocument.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PdfDocumentDeleteManyArgs>(args?: Prisma.SelectSubset<T, PdfDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PdfDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PdfDocuments
   * const pdfDocument = await prisma.pdfDocument.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PdfDocumentUpdateManyArgs>(args: Prisma.SelectSubset<T, PdfDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PdfDocuments and returns the data updated in the database.
   * @param {PdfDocumentUpdateManyAndReturnArgs} args - Arguments to update many PdfDocuments.
   * @example
   * // Update many PdfDocuments
   * const pdfDocument = await prisma.pdfDocument.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PdfDocuments and only return the `id`
   * const pdfDocumentWithIdOnly = await prisma.pdfDocument.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PdfDocumentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PdfDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PdfDocument.
   * @param {PdfDocumentUpsertArgs} args - Arguments to update or create a PdfDocument.
   * @example
   * // Update or create a PdfDocument
   * const pdfDocument = await prisma.pdfDocument.upsert({
   *   create: {
   *     // ... data to create a PdfDocument
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PdfDocument we want to update
   *   }
   * })
   */
  upsert<T extends PdfDocumentUpsertArgs>(args: Prisma.SelectSubset<T, PdfDocumentUpsertArgs<ExtArgs>>): Prisma.Prisma__PdfDocumentClient<runtime.Types.Result.GetResult<Prisma.$PdfDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PdfDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentCountArgs} args - Arguments to filter PdfDocuments to count.
   * @example
   * // Count the number of PdfDocuments
   * const count = await prisma.pdfDocument.count({
   *   where: {
   *     // ... the filter for the PdfDocuments we want to count
   *   }
   * })
  **/
  count<T extends PdfDocumentCountArgs>(
    args?: Prisma.Subset<T, PdfDocumentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PdfDocumentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PdfDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PdfDocumentAggregateArgs>(args: Prisma.Subset<T, PdfDocumentAggregateArgs>): Prisma.PrismaPromise<GetPdfDocumentAggregateType<T>>

  /**
   * Group by PdfDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PdfDocumentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PdfDocumentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PdfDocumentGroupByArgs['orderBy'] }
      : { orderBy?: PdfDocumentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PdfDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPdfDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PdfDocument model
 */
readonly fields: PdfDocumentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PdfDocument.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PdfDocumentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  DocumentTags<T extends Prisma.PdfDocument$DocumentTagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PdfDocument$DocumentTagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PdfDocument model
 */
export interface PdfDocumentFieldRefs {
  readonly id: Prisma.FieldRef<"PdfDocument", 'String'>
  readonly qrId: Prisma.FieldRef<"PdfDocument", 'String'>
  readonly fileName: Prisma.FieldRef<"PdfDocument", 'String'>
  readonly description: Prisma.FieldRef<"PdfDocument", 'String'>
  readonly fileData: Prisma.FieldRef<"PdfDocument", 'Bytes'>
  readonly contentType: Prisma.FieldRef<"PdfDocument", 'String'>
  readonly size: Prisma.FieldRef<"PdfDocument", 'Int'>
  readonly isActive: Prisma.FieldRef<"PdfDocument", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"PdfDocument", 'DateTime'>
  readonly uploadDate: Prisma.FieldRef<"PdfDocument", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PdfDocument findUnique
 */
export type PdfDocumentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * Filter, which PdfDocument to fetch.
   */
  where: Prisma.PdfDocumentWhereUniqueInput
}

/**
 * PdfDocument findUniqueOrThrow
 */
export type PdfDocumentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * Filter, which PdfDocument to fetch.
   */
  where: Prisma.PdfDocumentWhereUniqueInput
}

/**
 * PdfDocument findFirst
 */
export type PdfDocumentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * Filter, which PdfDocument to fetch.
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PdfDocuments to fetch.
   */
  orderBy?: Prisma.PdfDocumentOrderByWithRelationInput | Prisma.PdfDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PdfDocuments.
   */
  cursor?: Prisma.PdfDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PdfDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PdfDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PdfDocuments.
   */
  distinct?: Prisma.PdfDocumentScalarFieldEnum | Prisma.PdfDocumentScalarFieldEnum[]
}

/**
 * PdfDocument findFirstOrThrow
 */
export type PdfDocumentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * Filter, which PdfDocument to fetch.
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PdfDocuments to fetch.
   */
  orderBy?: Prisma.PdfDocumentOrderByWithRelationInput | Prisma.PdfDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PdfDocuments.
   */
  cursor?: Prisma.PdfDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PdfDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PdfDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PdfDocuments.
   */
  distinct?: Prisma.PdfDocumentScalarFieldEnum | Prisma.PdfDocumentScalarFieldEnum[]
}

/**
 * PdfDocument findMany
 */
export type PdfDocumentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * Filter, which PdfDocuments to fetch.
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PdfDocuments to fetch.
   */
  orderBy?: Prisma.PdfDocumentOrderByWithRelationInput | Prisma.PdfDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PdfDocuments.
   */
  cursor?: Prisma.PdfDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PdfDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PdfDocuments.
   */
  skip?: number
  distinct?: Prisma.PdfDocumentScalarFieldEnum | Prisma.PdfDocumentScalarFieldEnum[]
}

/**
 * PdfDocument create
 */
export type PdfDocumentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * The data needed to create a PdfDocument.
   */
  data: Prisma.XOR<Prisma.PdfDocumentCreateInput, Prisma.PdfDocumentUncheckedCreateInput>
}

/**
 * PdfDocument createMany
 */
export type PdfDocumentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PdfDocuments.
   */
  data: Prisma.PdfDocumentCreateManyInput | Prisma.PdfDocumentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PdfDocument createManyAndReturn
 */
export type PdfDocumentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * The data used to create many PdfDocuments.
   */
  data: Prisma.PdfDocumentCreateManyInput | Prisma.PdfDocumentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PdfDocument update
 */
export type PdfDocumentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * The data needed to update a PdfDocument.
   */
  data: Prisma.XOR<Prisma.PdfDocumentUpdateInput, Prisma.PdfDocumentUncheckedUpdateInput>
  /**
   * Choose, which PdfDocument to update.
   */
  where: Prisma.PdfDocumentWhereUniqueInput
}

/**
 * PdfDocument updateMany
 */
export type PdfDocumentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PdfDocuments.
   */
  data: Prisma.XOR<Prisma.PdfDocumentUpdateManyMutationInput, Prisma.PdfDocumentUncheckedUpdateManyInput>
  /**
   * Filter which PdfDocuments to update
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * Limit how many PdfDocuments to update.
   */
  limit?: number
}

/**
 * PdfDocument updateManyAndReturn
 */
export type PdfDocumentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * The data used to update PdfDocuments.
   */
  data: Prisma.XOR<Prisma.PdfDocumentUpdateManyMutationInput, Prisma.PdfDocumentUncheckedUpdateManyInput>
  /**
   * Filter which PdfDocuments to update
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * Limit how many PdfDocuments to update.
   */
  limit?: number
}

/**
 * PdfDocument upsert
 */
export type PdfDocumentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * The filter to search for the PdfDocument to update in case it exists.
   */
  where: Prisma.PdfDocumentWhereUniqueInput
  /**
   * In case the PdfDocument found by the `where` argument doesn't exist, create a new PdfDocument with this data.
   */
  create: Prisma.XOR<Prisma.PdfDocumentCreateInput, Prisma.PdfDocumentUncheckedCreateInput>
  /**
   * In case the PdfDocument was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PdfDocumentUpdateInput, Prisma.PdfDocumentUncheckedUpdateInput>
}

/**
 * PdfDocument delete
 */
export type PdfDocumentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
  /**
   * Filter which PdfDocument to delete.
   */
  where: Prisma.PdfDocumentWhereUniqueInput
}

/**
 * PdfDocument deleteMany
 */
export type PdfDocumentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PdfDocuments to delete
   */
  where?: Prisma.PdfDocumentWhereInput
  /**
   * Limit how many PdfDocuments to delete.
   */
  limit?: number
}

/**
 * PdfDocument.DocumentTags
 */
export type PdfDocument$DocumentTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentTag
   */
  select?: Prisma.DocumentTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentTag
   */
  omit?: Prisma.DocumentTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentTagInclude<ExtArgs> | null
  where?: Prisma.DocumentTagWhereInput
  orderBy?: Prisma.DocumentTagOrderByWithRelationInput | Prisma.DocumentTagOrderByWithRelationInput[]
  cursor?: Prisma.DocumentTagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DocumentTagScalarFieldEnum | Prisma.DocumentTagScalarFieldEnum[]
}

/**
 * PdfDocument without action
 */
export type PdfDocumentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PdfDocument
   */
  select?: Prisma.PdfDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PdfDocument
   */
  omit?: Prisma.PdfDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PdfDocumentInclude<ExtArgs> | null
}
