
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CostCode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CostCode
 * 
 */
export type CostCodeModel = runtime.Types.Result.DefaultSelection<Prisma.$CostCodePayload>

export type AggregateCostCode = {
  _count: CostCodeCountAggregateOutputType | null
  _min: CostCodeMinAggregateOutputType | null
  _max: CostCodeMaxAggregateOutputType | null
}

export type CostCodeMinAggregateOutputType = {
  id: string | null
  code: string | null
  name: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CostCodeMaxAggregateOutputType = {
  id: string | null
  code: string | null
  name: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CostCodeCountAggregateOutputType = {
  id: number
  code: number
  name: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CostCodeMinAggregateInputType = {
  id?: true
  code?: true
  name?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type CostCodeMaxAggregateInputType = {
  id?: true
  code?: true
  name?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type CostCodeCountAggregateInputType = {
  id?: true
  code?: true
  name?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CostCodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CostCode to aggregate.
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CostCodes to fetch.
   */
  orderBy?: Prisma.CostCodeOrderByWithRelationInput | Prisma.CostCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CostCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CostCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CostCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CostCodes
  **/
  _count?: true | CostCodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CostCodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CostCodeMaxAggregateInputType
}

export type GetCostCodeAggregateType<T extends CostCodeAggregateArgs> = {
      [P in keyof T & keyof AggregateCostCode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCostCode[P]>
    : Prisma.GetScalarType<T[P], AggregateCostCode[P]>
}




export type CostCodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CostCodeWhereInput
  orderBy?: Prisma.CostCodeOrderByWithAggregationInput | Prisma.CostCodeOrderByWithAggregationInput[]
  by: Prisma.CostCodeScalarFieldEnum[] | Prisma.CostCodeScalarFieldEnum
  having?: Prisma.CostCodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CostCodeCountAggregateInputType | true
  _min?: CostCodeMinAggregateInputType
  _max?: CostCodeMaxAggregateInputType
}

export type CostCodeGroupByOutputType = {
  id: string
  code: string | null
  name: string
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: CostCodeCountAggregateOutputType | null
  _min: CostCodeMinAggregateOutputType | null
  _max: CostCodeMaxAggregateOutputType | null
}

type GetCostCodeGroupByPayload<T extends CostCodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CostCodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CostCodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CostCodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CostCodeGroupByOutputType[P]>
      }
    >
  >



export type CostCodeWhereInput = {
  AND?: Prisma.CostCodeWhereInput | Prisma.CostCodeWhereInput[]
  OR?: Prisma.CostCodeWhereInput[]
  NOT?: Prisma.CostCodeWhereInput | Prisma.CostCodeWhereInput[]
  id?: Prisma.StringFilter<"CostCode"> | string
  code?: Prisma.StringNullableFilter<"CostCode"> | string | null
  name?: Prisma.StringFilter<"CostCode"> | string
  isActive?: Prisma.BoolFilter<"CostCode"> | boolean
  createdAt?: Prisma.DateTimeFilter<"CostCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CostCode"> | Date | string
  Timesheets?: Prisma.TimeSheetListRelationFilter
  CCTags?: Prisma.CCTagListRelationFilter
}

export type CostCodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Timesheets?: Prisma.TimeSheetOrderByRelationAggregateInput
  CCTags?: Prisma.CCTagOrderByRelationAggregateInput
}

export type CostCodeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.CostCodeWhereInput | Prisma.CostCodeWhereInput[]
  OR?: Prisma.CostCodeWhereInput[]
  NOT?: Prisma.CostCodeWhereInput | Prisma.CostCodeWhereInput[]
  code?: Prisma.StringNullableFilter<"CostCode"> | string | null
  isActive?: Prisma.BoolFilter<"CostCode"> | boolean
  createdAt?: Prisma.DateTimeFilter<"CostCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CostCode"> | Date | string
  Timesheets?: Prisma.TimeSheetListRelationFilter
  CCTags?: Prisma.CCTagListRelationFilter
}, "id" | "name">

export type CostCodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CostCodeCountOrderByAggregateInput
  _max?: Prisma.CostCodeMaxOrderByAggregateInput
  _min?: Prisma.CostCodeMinOrderByAggregateInput
}

export type CostCodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.CostCodeScalarWhereWithAggregatesInput | Prisma.CostCodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.CostCodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CostCodeScalarWhereWithAggregatesInput | Prisma.CostCodeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CostCode"> | string
  code?: Prisma.StringNullableWithAggregatesFilter<"CostCode"> | string | null
  name?: Prisma.StringWithAggregatesFilter<"CostCode"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"CostCode"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CostCode"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CostCode"> | Date | string
}

export type CostCodeCreateInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  Timesheets?: Prisma.TimeSheetCreateNestedManyWithoutCostCodeInput
  CCTags?: Prisma.CCTagCreateNestedManyWithoutCostCodesInput
}

export type CostCodeUncheckedCreateInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  Timesheets?: Prisma.TimeSheetUncheckedCreateNestedManyWithoutCostCodeInput
  CCTags?: Prisma.CCTagUncheckedCreateNestedManyWithoutCostCodesInput
}

export type CostCodeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Timesheets?: Prisma.TimeSheetUpdateManyWithoutCostCodeNestedInput
  CCTags?: Prisma.CCTagUpdateManyWithoutCostCodesNestedInput
}

export type CostCodeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Timesheets?: Prisma.TimeSheetUncheckedUpdateManyWithoutCostCodeNestedInput
  CCTags?: Prisma.CCTagUncheckedUpdateManyWithoutCostCodesNestedInput
}

export type CostCodeCreateManyInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CostCodeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CostCodeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CostCodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CostCodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CostCodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CostCodeListRelationFilter = {
  every?: Prisma.CostCodeWhereInput
  some?: Prisma.CostCodeWhereInput
  none?: Prisma.CostCodeWhereInput
}

export type CostCodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CostCodeScalarRelationFilter = {
  is?: Prisma.CostCodeWhereInput
  isNot?: Prisma.CostCodeWhereInput
}

export type CostCodeCreateNestedManyWithoutCCTagsInput = {
  create?: Prisma.XOR<Prisma.CostCodeCreateWithoutCCTagsInput, Prisma.CostCodeUncheckedCreateWithoutCCTagsInput> | Prisma.CostCodeCreateWithoutCCTagsInput[] | Prisma.CostCodeUncheckedCreateWithoutCCTagsInput[]
  connectOrCreate?: Prisma.CostCodeCreateOrConnectWithoutCCTagsInput | Prisma.CostCodeCreateOrConnectWithoutCCTagsInput[]
  connect?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
}

export type CostCodeUncheckedCreateNestedManyWithoutCCTagsInput = {
  create?: Prisma.XOR<Prisma.CostCodeCreateWithoutCCTagsInput, Prisma.CostCodeUncheckedCreateWithoutCCTagsInput> | Prisma.CostCodeCreateWithoutCCTagsInput[] | Prisma.CostCodeUncheckedCreateWithoutCCTagsInput[]
  connectOrCreate?: Prisma.CostCodeCreateOrConnectWithoutCCTagsInput | Prisma.CostCodeCreateOrConnectWithoutCCTagsInput[]
  connect?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
}

export type CostCodeUpdateManyWithoutCCTagsNestedInput = {
  create?: Prisma.XOR<Prisma.CostCodeCreateWithoutCCTagsInput, Prisma.CostCodeUncheckedCreateWithoutCCTagsInput> | Prisma.CostCodeCreateWithoutCCTagsInput[] | Prisma.CostCodeUncheckedCreateWithoutCCTagsInput[]
  connectOrCreate?: Prisma.CostCodeCreateOrConnectWithoutCCTagsInput | Prisma.CostCodeCreateOrConnectWithoutCCTagsInput[]
  upsert?: Prisma.CostCodeUpsertWithWhereUniqueWithoutCCTagsInput | Prisma.CostCodeUpsertWithWhereUniqueWithoutCCTagsInput[]
  set?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  disconnect?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  delete?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  connect?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  update?: Prisma.CostCodeUpdateWithWhereUniqueWithoutCCTagsInput | Prisma.CostCodeUpdateWithWhereUniqueWithoutCCTagsInput[]
  updateMany?: Prisma.CostCodeUpdateManyWithWhereWithoutCCTagsInput | Prisma.CostCodeUpdateManyWithWhereWithoutCCTagsInput[]
  deleteMany?: Prisma.CostCodeScalarWhereInput | Prisma.CostCodeScalarWhereInput[]
}

export type CostCodeUncheckedUpdateManyWithoutCCTagsNestedInput = {
  create?: Prisma.XOR<Prisma.CostCodeCreateWithoutCCTagsInput, Prisma.CostCodeUncheckedCreateWithoutCCTagsInput> | Prisma.CostCodeCreateWithoutCCTagsInput[] | Prisma.CostCodeUncheckedCreateWithoutCCTagsInput[]
  connectOrCreate?: Prisma.CostCodeCreateOrConnectWithoutCCTagsInput | Prisma.CostCodeCreateOrConnectWithoutCCTagsInput[]
  upsert?: Prisma.CostCodeUpsertWithWhereUniqueWithoutCCTagsInput | Prisma.CostCodeUpsertWithWhereUniqueWithoutCCTagsInput[]
  set?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  disconnect?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  delete?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  connect?: Prisma.CostCodeWhereUniqueInput | Prisma.CostCodeWhereUniqueInput[]
  update?: Prisma.CostCodeUpdateWithWhereUniqueWithoutCCTagsInput | Prisma.CostCodeUpdateWithWhereUniqueWithoutCCTagsInput[]
  updateMany?: Prisma.CostCodeUpdateManyWithWhereWithoutCCTagsInput | Prisma.CostCodeUpdateManyWithWhereWithoutCCTagsInput[]
  deleteMany?: Prisma.CostCodeScalarWhereInput | Prisma.CostCodeScalarWhereInput[]
}

export type CostCodeCreateNestedOneWithoutTimesheetsInput = {
  create?: Prisma.XOR<Prisma.CostCodeCreateWithoutTimesheetsInput, Prisma.CostCodeUncheckedCreateWithoutTimesheetsInput>
  connectOrCreate?: Prisma.CostCodeCreateOrConnectWithoutTimesheetsInput
  connect?: Prisma.CostCodeWhereUniqueInput
}

export type CostCodeUpdateOneRequiredWithoutTimesheetsNestedInput = {
  create?: Prisma.XOR<Prisma.CostCodeCreateWithoutTimesheetsInput, Prisma.CostCodeUncheckedCreateWithoutTimesheetsInput>
  connectOrCreate?: Prisma.CostCodeCreateOrConnectWithoutTimesheetsInput
  upsert?: Prisma.CostCodeUpsertWithoutTimesheetsInput
  connect?: Prisma.CostCodeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CostCodeUpdateToOneWithWhereWithoutTimesheetsInput, Prisma.CostCodeUpdateWithoutTimesheetsInput>, Prisma.CostCodeUncheckedUpdateWithoutTimesheetsInput>
}

export type CostCodeCreateWithoutCCTagsInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  Timesheets?: Prisma.TimeSheetCreateNestedManyWithoutCostCodeInput
}

export type CostCodeUncheckedCreateWithoutCCTagsInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  Timesheets?: Prisma.TimeSheetUncheckedCreateNestedManyWithoutCostCodeInput
}

export type CostCodeCreateOrConnectWithoutCCTagsInput = {
  where: Prisma.CostCodeWhereUniqueInput
  create: Prisma.XOR<Prisma.CostCodeCreateWithoutCCTagsInput, Prisma.CostCodeUncheckedCreateWithoutCCTagsInput>
}

export type CostCodeUpsertWithWhereUniqueWithoutCCTagsInput = {
  where: Prisma.CostCodeWhereUniqueInput
  update: Prisma.XOR<Prisma.CostCodeUpdateWithoutCCTagsInput, Prisma.CostCodeUncheckedUpdateWithoutCCTagsInput>
  create: Prisma.XOR<Prisma.CostCodeCreateWithoutCCTagsInput, Prisma.CostCodeUncheckedCreateWithoutCCTagsInput>
}

export type CostCodeUpdateWithWhereUniqueWithoutCCTagsInput = {
  where: Prisma.CostCodeWhereUniqueInput
  data: Prisma.XOR<Prisma.CostCodeUpdateWithoutCCTagsInput, Prisma.CostCodeUncheckedUpdateWithoutCCTagsInput>
}

export type CostCodeUpdateManyWithWhereWithoutCCTagsInput = {
  where: Prisma.CostCodeScalarWhereInput
  data: Prisma.XOR<Prisma.CostCodeUpdateManyMutationInput, Prisma.CostCodeUncheckedUpdateManyWithoutCCTagsInput>
}

export type CostCodeScalarWhereInput = {
  AND?: Prisma.CostCodeScalarWhereInput | Prisma.CostCodeScalarWhereInput[]
  OR?: Prisma.CostCodeScalarWhereInput[]
  NOT?: Prisma.CostCodeScalarWhereInput | Prisma.CostCodeScalarWhereInput[]
  id?: Prisma.StringFilter<"CostCode"> | string
  code?: Prisma.StringNullableFilter<"CostCode"> | string | null
  name?: Prisma.StringFilter<"CostCode"> | string
  isActive?: Prisma.BoolFilter<"CostCode"> | boolean
  createdAt?: Prisma.DateTimeFilter<"CostCode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CostCode"> | Date | string
}

export type CostCodeCreateWithoutTimesheetsInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  CCTags?: Prisma.CCTagCreateNestedManyWithoutCostCodesInput
}

export type CostCodeUncheckedCreateWithoutTimesheetsInput = {
  id?: string
  code?: string | null
  name: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  CCTags?: Prisma.CCTagUncheckedCreateNestedManyWithoutCostCodesInput
}

export type CostCodeCreateOrConnectWithoutTimesheetsInput = {
  where: Prisma.CostCodeWhereUniqueInput
  create: Prisma.XOR<Prisma.CostCodeCreateWithoutTimesheetsInput, Prisma.CostCodeUncheckedCreateWithoutTimesheetsInput>
}

export type CostCodeUpsertWithoutTimesheetsInput = {
  update: Prisma.XOR<Prisma.CostCodeUpdateWithoutTimesheetsInput, Prisma.CostCodeUncheckedUpdateWithoutTimesheetsInput>
  create: Prisma.XOR<Prisma.CostCodeCreateWithoutTimesheetsInput, Prisma.CostCodeUncheckedCreateWithoutTimesheetsInput>
  where?: Prisma.CostCodeWhereInput
}

export type CostCodeUpdateToOneWithWhereWithoutTimesheetsInput = {
  where?: Prisma.CostCodeWhereInput
  data: Prisma.XOR<Prisma.CostCodeUpdateWithoutTimesheetsInput, Prisma.CostCodeUncheckedUpdateWithoutTimesheetsInput>
}

export type CostCodeUpdateWithoutTimesheetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  CCTags?: Prisma.CCTagUpdateManyWithoutCostCodesNestedInput
}

export type CostCodeUncheckedUpdateWithoutTimesheetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  CCTags?: Prisma.CCTagUncheckedUpdateManyWithoutCostCodesNestedInput
}

export type CostCodeUpdateWithoutCCTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Timesheets?: Prisma.TimeSheetUpdateManyWithoutCostCodeNestedInput
}

export type CostCodeUncheckedUpdateWithoutCCTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Timesheets?: Prisma.TimeSheetUncheckedUpdateManyWithoutCostCodeNestedInput
}

export type CostCodeUncheckedUpdateManyWithoutCCTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type CostCodeCountOutputType
 */

export type CostCodeCountOutputType = {
  Timesheets: number
  CCTags: number
}

export type CostCodeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Timesheets?: boolean | CostCodeCountOutputTypeCountTimesheetsArgs
  CCTags?: boolean | CostCodeCountOutputTypeCountCCTagsArgs
}

/**
 * CostCodeCountOutputType without action
 */
export type CostCodeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCodeCountOutputType
   */
  select?: Prisma.CostCodeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CostCodeCountOutputType without action
 */
export type CostCodeCountOutputTypeCountTimesheetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TimeSheetWhereInput
}

/**
 * CostCodeCountOutputType without action
 */
export type CostCodeCountOutputTypeCountCCTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CCTagWhereInput
}


export type CostCodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  name?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Timesheets?: boolean | Prisma.CostCode$TimesheetsArgs<ExtArgs>
  CCTags?: boolean | Prisma.CostCode$CCTagsArgs<ExtArgs>
  _count?: boolean | Prisma.CostCodeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["costCode"]>

export type CostCodeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  name?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["costCode"]>

export type CostCodeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  name?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["costCode"]>

export type CostCodeSelectScalar = {
  id?: boolean
  code?: boolean
  name?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CostCodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "code" | "name" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["costCode"]>
export type CostCodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Timesheets?: boolean | Prisma.CostCode$TimesheetsArgs<ExtArgs>
  CCTags?: boolean | Prisma.CostCode$CCTagsArgs<ExtArgs>
  _count?: boolean | Prisma.CostCodeCountOutputTypeDefaultArgs<ExtArgs>
}
export type CostCodeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CostCodeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CostCodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CostCode"
  objects: {
    Timesheets: Prisma.$TimeSheetPayload<ExtArgs>[]
    CCTags: Prisma.$CCTagPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    code: string | null
    name: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["costCode"]>
  composites: {}
}

export type CostCodeGetPayload<S extends boolean | null | undefined | CostCodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CostCodePayload, S>

export type CostCodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CostCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CostCodeCountAggregateInputType | true
  }

export interface CostCodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CostCode'], meta: { name: 'CostCode' } }
  /**
   * Find zero or one CostCode that matches the filter.
   * @param {CostCodeFindUniqueArgs} args - Arguments to find a CostCode
   * @example
   * // Get one CostCode
   * const costCode = await prisma.costCode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CostCodeFindUniqueArgs>(args: Prisma.SelectSubset<T, CostCodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CostCode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CostCodeFindUniqueOrThrowArgs} args - Arguments to find a CostCode
   * @example
   * // Get one CostCode
   * const costCode = await prisma.costCode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CostCodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CostCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CostCode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeFindFirstArgs} args - Arguments to find a CostCode
   * @example
   * // Get one CostCode
   * const costCode = await prisma.costCode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CostCodeFindFirstArgs>(args?: Prisma.SelectSubset<T, CostCodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CostCode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeFindFirstOrThrowArgs} args - Arguments to find a CostCode
   * @example
   * // Get one CostCode
   * const costCode = await prisma.costCode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CostCodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CostCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CostCodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CostCodes
   * const costCodes = await prisma.costCode.findMany()
   * 
   * // Get first 10 CostCodes
   * const costCodes = await prisma.costCode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const costCodeWithIdOnly = await prisma.costCode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CostCodeFindManyArgs>(args?: Prisma.SelectSubset<T, CostCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CostCode.
   * @param {CostCodeCreateArgs} args - Arguments to create a CostCode.
   * @example
   * // Create one CostCode
   * const CostCode = await prisma.costCode.create({
   *   data: {
   *     // ... data to create a CostCode
   *   }
   * })
   * 
   */
  create<T extends CostCodeCreateArgs>(args: Prisma.SelectSubset<T, CostCodeCreateArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CostCodes.
   * @param {CostCodeCreateManyArgs} args - Arguments to create many CostCodes.
   * @example
   * // Create many CostCodes
   * const costCode = await prisma.costCode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CostCodeCreateManyArgs>(args?: Prisma.SelectSubset<T, CostCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CostCodes and returns the data saved in the database.
   * @param {CostCodeCreateManyAndReturnArgs} args - Arguments to create many CostCodes.
   * @example
   * // Create many CostCodes
   * const costCode = await prisma.costCode.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CostCodes and only return the `id`
   * const costCodeWithIdOnly = await prisma.costCode.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CostCodeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CostCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CostCode.
   * @param {CostCodeDeleteArgs} args - Arguments to delete one CostCode.
   * @example
   * // Delete one CostCode
   * const CostCode = await prisma.costCode.delete({
   *   where: {
   *     // ... filter to delete one CostCode
   *   }
   * })
   * 
   */
  delete<T extends CostCodeDeleteArgs>(args: Prisma.SelectSubset<T, CostCodeDeleteArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CostCode.
   * @param {CostCodeUpdateArgs} args - Arguments to update one CostCode.
   * @example
   * // Update one CostCode
   * const costCode = await prisma.costCode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CostCodeUpdateArgs>(args: Prisma.SelectSubset<T, CostCodeUpdateArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CostCodes.
   * @param {CostCodeDeleteManyArgs} args - Arguments to filter CostCodes to delete.
   * @example
   * // Delete a few CostCodes
   * const { count } = await prisma.costCode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CostCodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, CostCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CostCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CostCodes
   * const costCode = await prisma.costCode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CostCodeUpdateManyArgs>(args: Prisma.SelectSubset<T, CostCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CostCodes and returns the data updated in the database.
   * @param {CostCodeUpdateManyAndReturnArgs} args - Arguments to update many CostCodes.
   * @example
   * // Update many CostCodes
   * const costCode = await prisma.costCode.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CostCodes and only return the `id`
   * const costCodeWithIdOnly = await prisma.costCode.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CostCodeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CostCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CostCode.
   * @param {CostCodeUpsertArgs} args - Arguments to update or create a CostCode.
   * @example
   * // Update or create a CostCode
   * const costCode = await prisma.costCode.upsert({
   *   create: {
   *     // ... data to create a CostCode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CostCode we want to update
   *   }
   * })
   */
  upsert<T extends CostCodeUpsertArgs>(args: Prisma.SelectSubset<T, CostCodeUpsertArgs<ExtArgs>>): Prisma.Prisma__CostCodeClient<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CostCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeCountArgs} args - Arguments to filter CostCodes to count.
   * @example
   * // Count the number of CostCodes
   * const count = await prisma.costCode.count({
   *   where: {
   *     // ... the filter for the CostCodes we want to count
   *   }
   * })
  **/
  count<T extends CostCodeCountArgs>(
    args?: Prisma.Subset<T, CostCodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CostCodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CostCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CostCodeAggregateArgs>(args: Prisma.Subset<T, CostCodeAggregateArgs>): Prisma.PrismaPromise<GetCostCodeAggregateType<T>>

  /**
   * Group by CostCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CostCodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CostCodeGroupByArgs['orderBy'] }
      : { orderBy?: CostCodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CostCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CostCode model
 */
readonly fields: CostCodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CostCode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CostCodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Timesheets<T extends Prisma.CostCode$TimesheetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CostCode$TimesheetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TimeSheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  CCTags<T extends Prisma.CostCode$CCTagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CostCode$CCTagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CostCode model
 */
export interface CostCodeFieldRefs {
  readonly id: Prisma.FieldRef<"CostCode", 'String'>
  readonly code: Prisma.FieldRef<"CostCode", 'String'>
  readonly name: Prisma.FieldRef<"CostCode", 'String'>
  readonly isActive: Prisma.FieldRef<"CostCode", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"CostCode", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CostCode", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CostCode findUnique
 */
export type CostCodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * Filter, which CostCode to fetch.
   */
  where: Prisma.CostCodeWhereUniqueInput
}

/**
 * CostCode findUniqueOrThrow
 */
export type CostCodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * Filter, which CostCode to fetch.
   */
  where: Prisma.CostCodeWhereUniqueInput
}

/**
 * CostCode findFirst
 */
export type CostCodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * Filter, which CostCode to fetch.
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CostCodes to fetch.
   */
  orderBy?: Prisma.CostCodeOrderByWithRelationInput | Prisma.CostCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CostCodes.
   */
  cursor?: Prisma.CostCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CostCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CostCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CostCodes.
   */
  distinct?: Prisma.CostCodeScalarFieldEnum | Prisma.CostCodeScalarFieldEnum[]
}

/**
 * CostCode findFirstOrThrow
 */
export type CostCodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * Filter, which CostCode to fetch.
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CostCodes to fetch.
   */
  orderBy?: Prisma.CostCodeOrderByWithRelationInput | Prisma.CostCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CostCodes.
   */
  cursor?: Prisma.CostCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CostCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CostCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CostCodes.
   */
  distinct?: Prisma.CostCodeScalarFieldEnum | Prisma.CostCodeScalarFieldEnum[]
}

/**
 * CostCode findMany
 */
export type CostCodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * Filter, which CostCodes to fetch.
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CostCodes to fetch.
   */
  orderBy?: Prisma.CostCodeOrderByWithRelationInput | Prisma.CostCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CostCodes.
   */
  cursor?: Prisma.CostCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CostCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CostCodes.
   */
  skip?: number
  distinct?: Prisma.CostCodeScalarFieldEnum | Prisma.CostCodeScalarFieldEnum[]
}

/**
 * CostCode create
 */
export type CostCodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * The data needed to create a CostCode.
   */
  data: Prisma.XOR<Prisma.CostCodeCreateInput, Prisma.CostCodeUncheckedCreateInput>
}

/**
 * CostCode createMany
 */
export type CostCodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CostCodes.
   */
  data: Prisma.CostCodeCreateManyInput | Prisma.CostCodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CostCode createManyAndReturn
 */
export type CostCodeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * The data used to create many CostCodes.
   */
  data: Prisma.CostCodeCreateManyInput | Prisma.CostCodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CostCode update
 */
export type CostCodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * The data needed to update a CostCode.
   */
  data: Prisma.XOR<Prisma.CostCodeUpdateInput, Prisma.CostCodeUncheckedUpdateInput>
  /**
   * Choose, which CostCode to update.
   */
  where: Prisma.CostCodeWhereUniqueInput
}

/**
 * CostCode updateMany
 */
export type CostCodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CostCodes.
   */
  data: Prisma.XOR<Prisma.CostCodeUpdateManyMutationInput, Prisma.CostCodeUncheckedUpdateManyInput>
  /**
   * Filter which CostCodes to update
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * Limit how many CostCodes to update.
   */
  limit?: number
}

/**
 * CostCode updateManyAndReturn
 */
export type CostCodeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * The data used to update CostCodes.
   */
  data: Prisma.XOR<Prisma.CostCodeUpdateManyMutationInput, Prisma.CostCodeUncheckedUpdateManyInput>
  /**
   * Filter which CostCodes to update
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * Limit how many CostCodes to update.
   */
  limit?: number
}

/**
 * CostCode upsert
 */
export type CostCodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * The filter to search for the CostCode to update in case it exists.
   */
  where: Prisma.CostCodeWhereUniqueInput
  /**
   * In case the CostCode found by the `where` argument doesn't exist, create a new CostCode with this data.
   */
  create: Prisma.XOR<Prisma.CostCodeCreateInput, Prisma.CostCodeUncheckedCreateInput>
  /**
   * In case the CostCode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CostCodeUpdateInput, Prisma.CostCodeUncheckedUpdateInput>
}

/**
 * CostCode delete
 */
export type CostCodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  /**
   * Filter which CostCode to delete.
   */
  where: Prisma.CostCodeWhereUniqueInput
}

/**
 * CostCode deleteMany
 */
export type CostCodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CostCodes to delete
   */
  where?: Prisma.CostCodeWhereInput
  /**
   * Limit how many CostCodes to delete.
   */
  limit?: number
}

/**
 * CostCode.Timesheets
 */
export type CostCode$TimesheetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TimeSheet
   */
  select?: Prisma.TimeSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TimeSheet
   */
  omit?: Prisma.TimeSheetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TimeSheetInclude<ExtArgs> | null
  where?: Prisma.TimeSheetWhereInput
  orderBy?: Prisma.TimeSheetOrderByWithRelationInput | Prisma.TimeSheetOrderByWithRelationInput[]
  cursor?: Prisma.TimeSheetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TimeSheetScalarFieldEnum | Prisma.TimeSheetScalarFieldEnum[]
}

/**
 * CostCode.CCTags
 */
export type CostCode$CCTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  where?: Prisma.CCTagWhereInput
  orderBy?: Prisma.CCTagOrderByWithRelationInput | Prisma.CCTagOrderByWithRelationInput[]
  cursor?: Prisma.CCTagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CCTagScalarFieldEnum | Prisma.CCTagScalarFieldEnum[]
}

/**
 * CostCode without action
 */
export type CostCodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
}
