
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CCTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CCTag
 * 
 */
export type CCTagModel = runtime.Types.Result.DefaultSelection<Prisma.$CCTagPayload>

export type AggregateCCTag = {
  _count: CCTagCountAggregateOutputType | null
  _min: CCTagMinAggregateOutputType | null
  _max: CCTagMaxAggregateOutputType | null
}

export type CCTagMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
}

export type CCTagMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
}

export type CCTagCountAggregateOutputType = {
  id: number
  name: number
  description: number
  _all: number
}


export type CCTagMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
}

export type CCTagMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
}

export type CCTagCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  _all?: true
}

export type CCTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CCTag to aggregate.
   */
  where?: Prisma.CCTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CCTags to fetch.
   */
  orderBy?: Prisma.CCTagOrderByWithRelationInput | Prisma.CCTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CCTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CCTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CCTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CCTags
  **/
  _count?: true | CCTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CCTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CCTagMaxAggregateInputType
}

export type GetCCTagAggregateType<T extends CCTagAggregateArgs> = {
      [P in keyof T & keyof AggregateCCTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCCTag[P]>
    : Prisma.GetScalarType<T[P], AggregateCCTag[P]>
}




export type CCTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CCTagWhereInput
  orderBy?: Prisma.CCTagOrderByWithAggregationInput | Prisma.CCTagOrderByWithAggregationInput[]
  by: Prisma.CCTagScalarFieldEnum[] | Prisma.CCTagScalarFieldEnum
  having?: Prisma.CCTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CCTagCountAggregateInputType | true
  _min?: CCTagMinAggregateInputType
  _max?: CCTagMaxAggregateInputType
}

export type CCTagGroupByOutputType = {
  id: string
  name: string
  description: string | null
  _count: CCTagCountAggregateOutputType | null
  _min: CCTagMinAggregateOutputType | null
  _max: CCTagMaxAggregateOutputType | null
}

type GetCCTagGroupByPayload<T extends CCTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CCTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CCTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CCTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CCTagGroupByOutputType[P]>
      }
    >
  >



export type CCTagWhereInput = {
  AND?: Prisma.CCTagWhereInput | Prisma.CCTagWhereInput[]
  OR?: Prisma.CCTagWhereInput[]
  NOT?: Prisma.CCTagWhereInput | Prisma.CCTagWhereInput[]
  id?: Prisma.StringFilter<"CCTag"> | string
  name?: Prisma.StringFilter<"CCTag"> | string
  description?: Prisma.StringNullableFilter<"CCTag"> | string | null
  CostCodes?: Prisma.CostCodeListRelationFilter
  Jobsites?: Prisma.JobsiteListRelationFilter
}

export type CCTagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  CostCodes?: Prisma.CostCodeOrderByRelationAggregateInput
  Jobsites?: Prisma.JobsiteOrderByRelationAggregateInput
}

export type CCTagWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.CCTagWhereInput | Prisma.CCTagWhereInput[]
  OR?: Prisma.CCTagWhereInput[]
  NOT?: Prisma.CCTagWhereInput | Prisma.CCTagWhereInput[]
  description?: Prisma.StringNullableFilter<"CCTag"> | string | null
  CostCodes?: Prisma.CostCodeListRelationFilter
  Jobsites?: Prisma.JobsiteListRelationFilter
}, "id" | "name">

export type CCTagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CCTagCountOrderByAggregateInput
  _max?: Prisma.CCTagMaxOrderByAggregateInput
  _min?: Prisma.CCTagMinOrderByAggregateInput
}

export type CCTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.CCTagScalarWhereWithAggregatesInput | Prisma.CCTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.CCTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CCTagScalarWhereWithAggregatesInput | Prisma.CCTagScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CCTag"> | string
  name?: Prisma.StringWithAggregatesFilter<"CCTag"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"CCTag"> | string | null
}

export type CCTagCreateInput = {
  id?: string
  name: string
  description?: string | null
  CostCodes?: Prisma.CostCodeCreateNestedManyWithoutCCTagsInput
  Jobsites?: Prisma.JobsiteCreateNestedManyWithoutCCTagsInput
}

export type CCTagUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  CostCodes?: Prisma.CostCodeUncheckedCreateNestedManyWithoutCCTagsInput
  Jobsites?: Prisma.JobsiteUncheckedCreateNestedManyWithoutCCTagsInput
}

export type CCTagUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  CostCodes?: Prisma.CostCodeUpdateManyWithoutCCTagsNestedInput
  Jobsites?: Prisma.JobsiteUpdateManyWithoutCCTagsNestedInput
}

export type CCTagUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  CostCodes?: Prisma.CostCodeUncheckedUpdateManyWithoutCCTagsNestedInput
  Jobsites?: Prisma.JobsiteUncheckedUpdateManyWithoutCCTagsNestedInput
}

export type CCTagCreateManyInput = {
  id?: string
  name: string
  description?: string | null
}

export type CCTagUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CCTagUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CCTagListRelationFilter = {
  every?: Prisma.CCTagWhereInput
  some?: Prisma.CCTagWhereInput
  none?: Prisma.CCTagWhereInput
}

export type CCTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CCTagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type CCTagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type CCTagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type CCTagCreateNestedManyWithoutCostCodesInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutCostCodesInput, Prisma.CCTagUncheckedCreateWithoutCostCodesInput> | Prisma.CCTagCreateWithoutCostCodesInput[] | Prisma.CCTagUncheckedCreateWithoutCostCodesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutCostCodesInput | Prisma.CCTagCreateOrConnectWithoutCostCodesInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
}

export type CCTagUncheckedCreateNestedManyWithoutCostCodesInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutCostCodesInput, Prisma.CCTagUncheckedCreateWithoutCostCodesInput> | Prisma.CCTagCreateWithoutCostCodesInput[] | Prisma.CCTagUncheckedCreateWithoutCostCodesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutCostCodesInput | Prisma.CCTagCreateOrConnectWithoutCostCodesInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
}

export type CCTagUpdateManyWithoutCostCodesNestedInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutCostCodesInput, Prisma.CCTagUncheckedCreateWithoutCostCodesInput> | Prisma.CCTagCreateWithoutCostCodesInput[] | Prisma.CCTagUncheckedCreateWithoutCostCodesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutCostCodesInput | Prisma.CCTagCreateOrConnectWithoutCostCodesInput[]
  upsert?: Prisma.CCTagUpsertWithWhereUniqueWithoutCostCodesInput | Prisma.CCTagUpsertWithWhereUniqueWithoutCostCodesInput[]
  set?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  disconnect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  delete?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  update?: Prisma.CCTagUpdateWithWhereUniqueWithoutCostCodesInput | Prisma.CCTagUpdateWithWhereUniqueWithoutCostCodesInput[]
  updateMany?: Prisma.CCTagUpdateManyWithWhereWithoutCostCodesInput | Prisma.CCTagUpdateManyWithWhereWithoutCostCodesInput[]
  deleteMany?: Prisma.CCTagScalarWhereInput | Prisma.CCTagScalarWhereInput[]
}

export type CCTagUncheckedUpdateManyWithoutCostCodesNestedInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutCostCodesInput, Prisma.CCTagUncheckedCreateWithoutCostCodesInput> | Prisma.CCTagCreateWithoutCostCodesInput[] | Prisma.CCTagUncheckedCreateWithoutCostCodesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutCostCodesInput | Prisma.CCTagCreateOrConnectWithoutCostCodesInput[]
  upsert?: Prisma.CCTagUpsertWithWhereUniqueWithoutCostCodesInput | Prisma.CCTagUpsertWithWhereUniqueWithoutCostCodesInput[]
  set?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  disconnect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  delete?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  update?: Prisma.CCTagUpdateWithWhereUniqueWithoutCostCodesInput | Prisma.CCTagUpdateWithWhereUniqueWithoutCostCodesInput[]
  updateMany?: Prisma.CCTagUpdateManyWithWhereWithoutCostCodesInput | Prisma.CCTagUpdateManyWithWhereWithoutCostCodesInput[]
  deleteMany?: Prisma.CCTagScalarWhereInput | Prisma.CCTagScalarWhereInput[]
}

export type CCTagCreateNestedManyWithoutJobsitesInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutJobsitesInput, Prisma.CCTagUncheckedCreateWithoutJobsitesInput> | Prisma.CCTagCreateWithoutJobsitesInput[] | Prisma.CCTagUncheckedCreateWithoutJobsitesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutJobsitesInput | Prisma.CCTagCreateOrConnectWithoutJobsitesInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
}

export type CCTagUncheckedCreateNestedManyWithoutJobsitesInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutJobsitesInput, Prisma.CCTagUncheckedCreateWithoutJobsitesInput> | Prisma.CCTagCreateWithoutJobsitesInput[] | Prisma.CCTagUncheckedCreateWithoutJobsitesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutJobsitesInput | Prisma.CCTagCreateOrConnectWithoutJobsitesInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
}

export type CCTagUpdateManyWithoutJobsitesNestedInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutJobsitesInput, Prisma.CCTagUncheckedCreateWithoutJobsitesInput> | Prisma.CCTagCreateWithoutJobsitesInput[] | Prisma.CCTagUncheckedCreateWithoutJobsitesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutJobsitesInput | Prisma.CCTagCreateOrConnectWithoutJobsitesInput[]
  upsert?: Prisma.CCTagUpsertWithWhereUniqueWithoutJobsitesInput | Prisma.CCTagUpsertWithWhereUniqueWithoutJobsitesInput[]
  set?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  disconnect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  delete?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  update?: Prisma.CCTagUpdateWithWhereUniqueWithoutJobsitesInput | Prisma.CCTagUpdateWithWhereUniqueWithoutJobsitesInput[]
  updateMany?: Prisma.CCTagUpdateManyWithWhereWithoutJobsitesInput | Prisma.CCTagUpdateManyWithWhereWithoutJobsitesInput[]
  deleteMany?: Prisma.CCTagScalarWhereInput | Prisma.CCTagScalarWhereInput[]
}

export type CCTagUncheckedUpdateManyWithoutJobsitesNestedInput = {
  create?: Prisma.XOR<Prisma.CCTagCreateWithoutJobsitesInput, Prisma.CCTagUncheckedCreateWithoutJobsitesInput> | Prisma.CCTagCreateWithoutJobsitesInput[] | Prisma.CCTagUncheckedCreateWithoutJobsitesInput[]
  connectOrCreate?: Prisma.CCTagCreateOrConnectWithoutJobsitesInput | Prisma.CCTagCreateOrConnectWithoutJobsitesInput[]
  upsert?: Prisma.CCTagUpsertWithWhereUniqueWithoutJobsitesInput | Prisma.CCTagUpsertWithWhereUniqueWithoutJobsitesInput[]
  set?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  disconnect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  delete?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  connect?: Prisma.CCTagWhereUniqueInput | Prisma.CCTagWhereUniqueInput[]
  update?: Prisma.CCTagUpdateWithWhereUniqueWithoutJobsitesInput | Prisma.CCTagUpdateWithWhereUniqueWithoutJobsitesInput[]
  updateMany?: Prisma.CCTagUpdateManyWithWhereWithoutJobsitesInput | Prisma.CCTagUpdateManyWithWhereWithoutJobsitesInput[]
  deleteMany?: Prisma.CCTagScalarWhereInput | Prisma.CCTagScalarWhereInput[]
}

export type CCTagCreateWithoutCostCodesInput = {
  id?: string
  name: string
  description?: string | null
  Jobsites?: Prisma.JobsiteCreateNestedManyWithoutCCTagsInput
}

export type CCTagUncheckedCreateWithoutCostCodesInput = {
  id?: string
  name: string
  description?: string | null
  Jobsites?: Prisma.JobsiteUncheckedCreateNestedManyWithoutCCTagsInput
}

export type CCTagCreateOrConnectWithoutCostCodesInput = {
  where: Prisma.CCTagWhereUniqueInput
  create: Prisma.XOR<Prisma.CCTagCreateWithoutCostCodesInput, Prisma.CCTagUncheckedCreateWithoutCostCodesInput>
}

export type CCTagUpsertWithWhereUniqueWithoutCostCodesInput = {
  where: Prisma.CCTagWhereUniqueInput
  update: Prisma.XOR<Prisma.CCTagUpdateWithoutCostCodesInput, Prisma.CCTagUncheckedUpdateWithoutCostCodesInput>
  create: Prisma.XOR<Prisma.CCTagCreateWithoutCostCodesInput, Prisma.CCTagUncheckedCreateWithoutCostCodesInput>
}

export type CCTagUpdateWithWhereUniqueWithoutCostCodesInput = {
  where: Prisma.CCTagWhereUniqueInput
  data: Prisma.XOR<Prisma.CCTagUpdateWithoutCostCodesInput, Prisma.CCTagUncheckedUpdateWithoutCostCodesInput>
}

export type CCTagUpdateManyWithWhereWithoutCostCodesInput = {
  where: Prisma.CCTagScalarWhereInput
  data: Prisma.XOR<Prisma.CCTagUpdateManyMutationInput, Prisma.CCTagUncheckedUpdateManyWithoutCostCodesInput>
}

export type CCTagScalarWhereInput = {
  AND?: Prisma.CCTagScalarWhereInput | Prisma.CCTagScalarWhereInput[]
  OR?: Prisma.CCTagScalarWhereInput[]
  NOT?: Prisma.CCTagScalarWhereInput | Prisma.CCTagScalarWhereInput[]
  id?: Prisma.StringFilter<"CCTag"> | string
  name?: Prisma.StringFilter<"CCTag"> | string
  description?: Prisma.StringNullableFilter<"CCTag"> | string | null
}

export type CCTagCreateWithoutJobsitesInput = {
  id?: string
  name: string
  description?: string | null
  CostCodes?: Prisma.CostCodeCreateNestedManyWithoutCCTagsInput
}

export type CCTagUncheckedCreateWithoutJobsitesInput = {
  id?: string
  name: string
  description?: string | null
  CostCodes?: Prisma.CostCodeUncheckedCreateNestedManyWithoutCCTagsInput
}

export type CCTagCreateOrConnectWithoutJobsitesInput = {
  where: Prisma.CCTagWhereUniqueInput
  create: Prisma.XOR<Prisma.CCTagCreateWithoutJobsitesInput, Prisma.CCTagUncheckedCreateWithoutJobsitesInput>
}

export type CCTagUpsertWithWhereUniqueWithoutJobsitesInput = {
  where: Prisma.CCTagWhereUniqueInput
  update: Prisma.XOR<Prisma.CCTagUpdateWithoutJobsitesInput, Prisma.CCTagUncheckedUpdateWithoutJobsitesInput>
  create: Prisma.XOR<Prisma.CCTagCreateWithoutJobsitesInput, Prisma.CCTagUncheckedCreateWithoutJobsitesInput>
}

export type CCTagUpdateWithWhereUniqueWithoutJobsitesInput = {
  where: Prisma.CCTagWhereUniqueInput
  data: Prisma.XOR<Prisma.CCTagUpdateWithoutJobsitesInput, Prisma.CCTagUncheckedUpdateWithoutJobsitesInput>
}

export type CCTagUpdateManyWithWhereWithoutJobsitesInput = {
  where: Prisma.CCTagScalarWhereInput
  data: Prisma.XOR<Prisma.CCTagUpdateManyMutationInput, Prisma.CCTagUncheckedUpdateManyWithoutJobsitesInput>
}

export type CCTagUpdateWithoutCostCodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Jobsites?: Prisma.JobsiteUpdateManyWithoutCCTagsNestedInput
}

export type CCTagUncheckedUpdateWithoutCostCodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Jobsites?: Prisma.JobsiteUncheckedUpdateManyWithoutCCTagsNestedInput
}

export type CCTagUncheckedUpdateManyWithoutCostCodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type CCTagUpdateWithoutJobsitesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  CostCodes?: Prisma.CostCodeUpdateManyWithoutCCTagsNestedInput
}

export type CCTagUncheckedUpdateWithoutJobsitesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  CostCodes?: Prisma.CostCodeUncheckedUpdateManyWithoutCCTagsNestedInput
}

export type CCTagUncheckedUpdateManyWithoutJobsitesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type CCTagCountOutputType
 */

export type CCTagCountOutputType = {
  CostCodes: number
  Jobsites: number
}

export type CCTagCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CostCodes?: boolean | CCTagCountOutputTypeCountCostCodesArgs
  Jobsites?: boolean | CCTagCountOutputTypeCountJobsitesArgs
}

/**
 * CCTagCountOutputType without action
 */
export type CCTagCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTagCountOutputType
   */
  select?: Prisma.CCTagCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CCTagCountOutputType without action
 */
export type CCTagCountOutputTypeCountCostCodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CostCodeWhereInput
}

/**
 * CCTagCountOutputType without action
 */
export type CCTagCountOutputTypeCountJobsitesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.JobsiteWhereInput
}


export type CCTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  CostCodes?: boolean | Prisma.CCTag$CostCodesArgs<ExtArgs>
  Jobsites?: boolean | Prisma.CCTag$JobsitesArgs<ExtArgs>
  _count?: boolean | Prisma.CCTagCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cCTag"]>

export type CCTagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
}, ExtArgs["result"]["cCTag"]>

export type CCTagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
}, ExtArgs["result"]["cCTag"]>

export type CCTagSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
}

export type CCTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["cCTag"]>
export type CCTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  CostCodes?: boolean | Prisma.CCTag$CostCodesArgs<ExtArgs>
  Jobsites?: boolean | Prisma.CCTag$JobsitesArgs<ExtArgs>
  _count?: boolean | Prisma.CCTagCountOutputTypeDefaultArgs<ExtArgs>
}
export type CCTagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CCTagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CCTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CCTag"
  objects: {
    CostCodes: Prisma.$CostCodePayload<ExtArgs>[]
    Jobsites: Prisma.$JobsitePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
  }, ExtArgs["result"]["cCTag"]>
  composites: {}
}

export type CCTagGetPayload<S extends boolean | null | undefined | CCTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CCTagPayload, S>

export type CCTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CCTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CCTagCountAggregateInputType | true
  }

export interface CCTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CCTag'], meta: { name: 'CCTag' } }
  /**
   * Find zero or one CCTag that matches the filter.
   * @param {CCTagFindUniqueArgs} args - Arguments to find a CCTag
   * @example
   * // Get one CCTag
   * const cCTag = await prisma.cCTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CCTagFindUniqueArgs>(args: Prisma.SelectSubset<T, CCTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CCTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CCTagFindUniqueOrThrowArgs} args - Arguments to find a CCTag
   * @example
   * // Get one CCTag
   * const cCTag = await prisma.cCTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CCTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CCTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CCTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagFindFirstArgs} args - Arguments to find a CCTag
   * @example
   * // Get one CCTag
   * const cCTag = await prisma.cCTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CCTagFindFirstArgs>(args?: Prisma.SelectSubset<T, CCTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CCTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagFindFirstOrThrowArgs} args - Arguments to find a CCTag
   * @example
   * // Get one CCTag
   * const cCTag = await prisma.cCTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CCTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CCTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CCTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CCTags
   * const cCTags = await prisma.cCTag.findMany()
   * 
   * // Get first 10 CCTags
   * const cCTags = await prisma.cCTag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cCTagWithIdOnly = await prisma.cCTag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CCTagFindManyArgs>(args?: Prisma.SelectSubset<T, CCTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CCTag.
   * @param {CCTagCreateArgs} args - Arguments to create a CCTag.
   * @example
   * // Create one CCTag
   * const CCTag = await prisma.cCTag.create({
   *   data: {
   *     // ... data to create a CCTag
   *   }
   * })
   * 
   */
  create<T extends CCTagCreateArgs>(args: Prisma.SelectSubset<T, CCTagCreateArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CCTags.
   * @param {CCTagCreateManyArgs} args - Arguments to create many CCTags.
   * @example
   * // Create many CCTags
   * const cCTag = await prisma.cCTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CCTagCreateManyArgs>(args?: Prisma.SelectSubset<T, CCTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CCTags and returns the data saved in the database.
   * @param {CCTagCreateManyAndReturnArgs} args - Arguments to create many CCTags.
   * @example
   * // Create many CCTags
   * const cCTag = await prisma.cCTag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CCTags and only return the `id`
   * const cCTagWithIdOnly = await prisma.cCTag.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CCTagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CCTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CCTag.
   * @param {CCTagDeleteArgs} args - Arguments to delete one CCTag.
   * @example
   * // Delete one CCTag
   * const CCTag = await prisma.cCTag.delete({
   *   where: {
   *     // ... filter to delete one CCTag
   *   }
   * })
   * 
   */
  delete<T extends CCTagDeleteArgs>(args: Prisma.SelectSubset<T, CCTagDeleteArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CCTag.
   * @param {CCTagUpdateArgs} args - Arguments to update one CCTag.
   * @example
   * // Update one CCTag
   * const cCTag = await prisma.cCTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CCTagUpdateArgs>(args: Prisma.SelectSubset<T, CCTagUpdateArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CCTags.
   * @param {CCTagDeleteManyArgs} args - Arguments to filter CCTags to delete.
   * @example
   * // Delete a few CCTags
   * const { count } = await prisma.cCTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CCTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, CCTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CCTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CCTags
   * const cCTag = await prisma.cCTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CCTagUpdateManyArgs>(args: Prisma.SelectSubset<T, CCTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CCTags and returns the data updated in the database.
   * @param {CCTagUpdateManyAndReturnArgs} args - Arguments to update many CCTags.
   * @example
   * // Update many CCTags
   * const cCTag = await prisma.cCTag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CCTags and only return the `id`
   * const cCTagWithIdOnly = await prisma.cCTag.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CCTagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CCTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CCTag.
   * @param {CCTagUpsertArgs} args - Arguments to update or create a CCTag.
   * @example
   * // Update or create a CCTag
   * const cCTag = await prisma.cCTag.upsert({
   *   create: {
   *     // ... data to create a CCTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CCTag we want to update
   *   }
   * })
   */
  upsert<T extends CCTagUpsertArgs>(args: Prisma.SelectSubset<T, CCTagUpsertArgs<ExtArgs>>): Prisma.Prisma__CCTagClient<runtime.Types.Result.GetResult<Prisma.$CCTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CCTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagCountArgs} args - Arguments to filter CCTags to count.
   * @example
   * // Count the number of CCTags
   * const count = await prisma.cCTag.count({
   *   where: {
   *     // ... the filter for the CCTags we want to count
   *   }
   * })
  **/
  count<T extends CCTagCountArgs>(
    args?: Prisma.Subset<T, CCTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CCTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CCTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CCTagAggregateArgs>(args: Prisma.Subset<T, CCTagAggregateArgs>): Prisma.PrismaPromise<GetCCTagAggregateType<T>>

  /**
   * Group by CCTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CCTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CCTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CCTagGroupByArgs['orderBy'] }
      : { orderBy?: CCTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CCTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCCTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CCTag model
 */
readonly fields: CCTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CCTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CCTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  CostCodes<T extends Prisma.CCTag$CostCodesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CCTag$CostCodesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Jobsites<T extends Prisma.CCTag$JobsitesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CCTag$JobsitesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$JobsitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CCTag model
 */
export interface CCTagFieldRefs {
  readonly id: Prisma.FieldRef<"CCTag", 'String'>
  readonly name: Prisma.FieldRef<"CCTag", 'String'>
  readonly description: Prisma.FieldRef<"CCTag", 'String'>
}
    

// Custom InputTypes
/**
 * CCTag findUnique
 */
export type CCTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * Filter, which CCTag to fetch.
   */
  where: Prisma.CCTagWhereUniqueInput
}

/**
 * CCTag findUniqueOrThrow
 */
export type CCTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * Filter, which CCTag to fetch.
   */
  where: Prisma.CCTagWhereUniqueInput
}

/**
 * CCTag findFirst
 */
export type CCTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * Filter, which CCTag to fetch.
   */
  where?: Prisma.CCTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CCTags to fetch.
   */
  orderBy?: Prisma.CCTagOrderByWithRelationInput | Prisma.CCTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CCTags.
   */
  cursor?: Prisma.CCTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CCTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CCTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CCTags.
   */
  distinct?: Prisma.CCTagScalarFieldEnum | Prisma.CCTagScalarFieldEnum[]
}

/**
 * CCTag findFirstOrThrow
 */
export type CCTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * Filter, which CCTag to fetch.
   */
  where?: Prisma.CCTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CCTags to fetch.
   */
  orderBy?: Prisma.CCTagOrderByWithRelationInput | Prisma.CCTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CCTags.
   */
  cursor?: Prisma.CCTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CCTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CCTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CCTags.
   */
  distinct?: Prisma.CCTagScalarFieldEnum | Prisma.CCTagScalarFieldEnum[]
}

/**
 * CCTag findMany
 */
export type CCTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * Filter, which CCTags to fetch.
   */
  where?: Prisma.CCTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CCTags to fetch.
   */
  orderBy?: Prisma.CCTagOrderByWithRelationInput | Prisma.CCTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CCTags.
   */
  cursor?: Prisma.CCTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CCTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CCTags.
   */
  skip?: number
  distinct?: Prisma.CCTagScalarFieldEnum | Prisma.CCTagScalarFieldEnum[]
}

/**
 * CCTag create
 */
export type CCTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * The data needed to create a CCTag.
   */
  data: Prisma.XOR<Prisma.CCTagCreateInput, Prisma.CCTagUncheckedCreateInput>
}

/**
 * CCTag createMany
 */
export type CCTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CCTags.
   */
  data: Prisma.CCTagCreateManyInput | Prisma.CCTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CCTag createManyAndReturn
 */
export type CCTagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * The data used to create many CCTags.
   */
  data: Prisma.CCTagCreateManyInput | Prisma.CCTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CCTag update
 */
export type CCTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * The data needed to update a CCTag.
   */
  data: Prisma.XOR<Prisma.CCTagUpdateInput, Prisma.CCTagUncheckedUpdateInput>
  /**
   * Choose, which CCTag to update.
   */
  where: Prisma.CCTagWhereUniqueInput
}

/**
 * CCTag updateMany
 */
export type CCTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CCTags.
   */
  data: Prisma.XOR<Prisma.CCTagUpdateManyMutationInput, Prisma.CCTagUncheckedUpdateManyInput>
  /**
   * Filter which CCTags to update
   */
  where?: Prisma.CCTagWhereInput
  /**
   * Limit how many CCTags to update.
   */
  limit?: number
}

/**
 * CCTag updateManyAndReturn
 */
export type CCTagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * The data used to update CCTags.
   */
  data: Prisma.XOR<Prisma.CCTagUpdateManyMutationInput, Prisma.CCTagUncheckedUpdateManyInput>
  /**
   * Filter which CCTags to update
   */
  where?: Prisma.CCTagWhereInput
  /**
   * Limit how many CCTags to update.
   */
  limit?: number
}

/**
 * CCTag upsert
 */
export type CCTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * The filter to search for the CCTag to update in case it exists.
   */
  where: Prisma.CCTagWhereUniqueInput
  /**
   * In case the CCTag found by the `where` argument doesn't exist, create a new CCTag with this data.
   */
  create: Prisma.XOR<Prisma.CCTagCreateInput, Prisma.CCTagUncheckedCreateInput>
  /**
   * In case the CCTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CCTagUpdateInput, Prisma.CCTagUncheckedUpdateInput>
}

/**
 * CCTag delete
 */
export type CCTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
  /**
   * Filter which CCTag to delete.
   */
  where: Prisma.CCTagWhereUniqueInput
}

/**
 * CCTag deleteMany
 */
export type CCTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CCTags to delete
   */
  where?: Prisma.CCTagWhereInput
  /**
   * Limit how many CCTags to delete.
   */
  limit?: number
}

/**
 * CCTag.CostCodes
 */
export type CCTag$CostCodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CostCode
   */
  select?: Prisma.CostCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CostCode
   */
  omit?: Prisma.CostCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostCodeInclude<ExtArgs> | null
  where?: Prisma.CostCodeWhereInput
  orderBy?: Prisma.CostCodeOrderByWithRelationInput | Prisma.CostCodeOrderByWithRelationInput[]
  cursor?: Prisma.CostCodeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CostCodeScalarFieldEnum | Prisma.CostCodeScalarFieldEnum[]
}

/**
 * CCTag.Jobsites
 */
export type CCTag$JobsitesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Jobsite
   */
  select?: Prisma.JobsiteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Jobsite
   */
  omit?: Prisma.JobsiteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobsiteInclude<ExtArgs> | null
  where?: Prisma.JobsiteWhereInput
  orderBy?: Prisma.JobsiteOrderByWithRelationInput | Prisma.JobsiteOrderByWithRelationInput[]
  cursor?: Prisma.JobsiteWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.JobsiteScalarFieldEnum | Prisma.JobsiteScalarFieldEnum[]
}

/**
 * CCTag without action
 */
export type CCTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CCTag
   */
  select?: Prisma.CCTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CCTag
   */
  omit?: Prisma.CCTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CCTagInclude<ExtArgs> | null
}
