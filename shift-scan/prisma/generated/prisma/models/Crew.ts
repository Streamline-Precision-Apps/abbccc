
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Crew` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Crew
 * 
 */
export type CrewModel = runtime.Types.Result.DefaultSelection<Prisma.$CrewPayload>

export type AggregateCrew = {
  _count: CrewCountAggregateOutputType | null
  _min: CrewMinAggregateOutputType | null
  _max: CrewMaxAggregateOutputType | null
}

export type CrewMinAggregateOutputType = {
  id: string | null
  name: string | null
  leadId: string | null
  crewType: $Enums.WorkType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CrewMaxAggregateOutputType = {
  id: string | null
  name: string | null
  leadId: string | null
  crewType: $Enums.WorkType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CrewCountAggregateOutputType = {
  id: number
  name: number
  leadId: number
  crewType: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CrewMinAggregateInputType = {
  id?: true
  name?: true
  leadId?: true
  crewType?: true
  createdAt?: true
  updatedAt?: true
}

export type CrewMaxAggregateInputType = {
  id?: true
  name?: true
  leadId?: true
  crewType?: true
  createdAt?: true
  updatedAt?: true
}

export type CrewCountAggregateInputType = {
  id?: true
  name?: true
  leadId?: true
  crewType?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CrewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Crew to aggregate.
   */
  where?: Prisma.CrewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Crews to fetch.
   */
  orderBy?: Prisma.CrewOrderByWithRelationInput | Prisma.CrewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CrewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Crews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Crews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Crews
  **/
  _count?: true | CrewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CrewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CrewMaxAggregateInputType
}

export type GetCrewAggregateType<T extends CrewAggregateArgs> = {
      [P in keyof T & keyof AggregateCrew]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCrew[P]>
    : Prisma.GetScalarType<T[P], AggregateCrew[P]>
}




export type CrewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CrewWhereInput
  orderBy?: Prisma.CrewOrderByWithAggregationInput | Prisma.CrewOrderByWithAggregationInput[]
  by: Prisma.CrewScalarFieldEnum[] | Prisma.CrewScalarFieldEnum
  having?: Prisma.CrewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CrewCountAggregateInputType | true
  _min?: CrewMinAggregateInputType
  _max?: CrewMaxAggregateInputType
}

export type CrewGroupByOutputType = {
  id: string
  name: string
  leadId: string
  crewType: $Enums.WorkType
  createdAt: Date
  updatedAt: Date
  _count: CrewCountAggregateOutputType | null
  _min: CrewMinAggregateOutputType | null
  _max: CrewMaxAggregateOutputType | null
}

type GetCrewGroupByPayload<T extends CrewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CrewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CrewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CrewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CrewGroupByOutputType[P]>
      }
    >
  >



export type CrewWhereInput = {
  AND?: Prisma.CrewWhereInput | Prisma.CrewWhereInput[]
  OR?: Prisma.CrewWhereInput[]
  NOT?: Prisma.CrewWhereInput | Prisma.CrewWhereInput[]
  id?: Prisma.StringFilter<"Crew"> | string
  name?: Prisma.StringFilter<"Crew"> | string
  leadId?: Prisma.StringFilter<"Crew"> | string
  crewType?: Prisma.EnumWorkTypeFilter<"Crew"> | $Enums.WorkType
  createdAt?: Prisma.DateTimeFilter<"Crew"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Crew"> | Date | string
  Users?: Prisma.UserListRelationFilter
}

export type CrewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  crewType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Users?: Prisma.UserOrderByRelationAggregateInput
}

export type CrewWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CrewWhereInput | Prisma.CrewWhereInput[]
  OR?: Prisma.CrewWhereInput[]
  NOT?: Prisma.CrewWhereInput | Prisma.CrewWhereInput[]
  name?: Prisma.StringFilter<"Crew"> | string
  leadId?: Prisma.StringFilter<"Crew"> | string
  crewType?: Prisma.EnumWorkTypeFilter<"Crew"> | $Enums.WorkType
  createdAt?: Prisma.DateTimeFilter<"Crew"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Crew"> | Date | string
  Users?: Prisma.UserListRelationFilter
}, "id">

export type CrewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  crewType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CrewCountOrderByAggregateInput
  _max?: Prisma.CrewMaxOrderByAggregateInput
  _min?: Prisma.CrewMinOrderByAggregateInput
}

export type CrewScalarWhereWithAggregatesInput = {
  AND?: Prisma.CrewScalarWhereWithAggregatesInput | Prisma.CrewScalarWhereWithAggregatesInput[]
  OR?: Prisma.CrewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CrewScalarWhereWithAggregatesInput | Prisma.CrewScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Crew"> | string
  name?: Prisma.StringWithAggregatesFilter<"Crew"> | string
  leadId?: Prisma.StringWithAggregatesFilter<"Crew"> | string
  crewType?: Prisma.EnumWorkTypeWithAggregatesFilter<"Crew"> | $Enums.WorkType
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Crew"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Crew"> | Date | string
}

export type CrewCreateInput = {
  id?: string
  name: string
  leadId: string
  crewType: $Enums.WorkType
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UserCreateNestedManyWithoutCrewsInput
}

export type CrewUncheckedCreateInput = {
  id?: string
  name: string
  leadId: string
  crewType: $Enums.WorkType
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UserUncheckedCreateNestedManyWithoutCrewsInput
}

export type CrewUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UserUpdateManyWithoutCrewsNestedInput
}

export type CrewUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UserUncheckedUpdateManyWithoutCrewsNestedInput
}

export type CrewCreateManyInput = {
  id?: string
  name: string
  leadId: string
  crewType: $Enums.WorkType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CrewUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CrewUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CrewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  crewType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CrewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  crewType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CrewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  leadId?: Prisma.SortOrder
  crewType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CrewListRelationFilter = {
  every?: Prisma.CrewWhereInput
  some?: Prisma.CrewWhereInput
  none?: Prisma.CrewWhereInput
}

export type CrewOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumWorkTypeFieldUpdateOperationsInput = {
  set?: $Enums.WorkType
}

export type CrewCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.CrewCreateWithoutUsersInput, Prisma.CrewUncheckedCreateWithoutUsersInput> | Prisma.CrewCreateWithoutUsersInput[] | Prisma.CrewUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CrewCreateOrConnectWithoutUsersInput | Prisma.CrewCreateOrConnectWithoutUsersInput[]
  connect?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
}

export type CrewUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.CrewCreateWithoutUsersInput, Prisma.CrewUncheckedCreateWithoutUsersInput> | Prisma.CrewCreateWithoutUsersInput[] | Prisma.CrewUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CrewCreateOrConnectWithoutUsersInput | Prisma.CrewCreateOrConnectWithoutUsersInput[]
  connect?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
}

export type CrewUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.CrewCreateWithoutUsersInput, Prisma.CrewUncheckedCreateWithoutUsersInput> | Prisma.CrewCreateWithoutUsersInput[] | Prisma.CrewUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CrewCreateOrConnectWithoutUsersInput | Prisma.CrewCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.CrewUpsertWithWhereUniqueWithoutUsersInput | Prisma.CrewUpsertWithWhereUniqueWithoutUsersInput[]
  set?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  disconnect?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  delete?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  connect?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  update?: Prisma.CrewUpdateWithWhereUniqueWithoutUsersInput | Prisma.CrewUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.CrewUpdateManyWithWhereWithoutUsersInput | Prisma.CrewUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.CrewScalarWhereInput | Prisma.CrewScalarWhereInput[]
}

export type CrewUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.CrewCreateWithoutUsersInput, Prisma.CrewUncheckedCreateWithoutUsersInput> | Prisma.CrewCreateWithoutUsersInput[] | Prisma.CrewUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.CrewCreateOrConnectWithoutUsersInput | Prisma.CrewCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.CrewUpsertWithWhereUniqueWithoutUsersInput | Prisma.CrewUpsertWithWhereUniqueWithoutUsersInput[]
  set?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  disconnect?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  delete?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  connect?: Prisma.CrewWhereUniqueInput | Prisma.CrewWhereUniqueInput[]
  update?: Prisma.CrewUpdateWithWhereUniqueWithoutUsersInput | Prisma.CrewUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.CrewUpdateManyWithWhereWithoutUsersInput | Prisma.CrewUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.CrewScalarWhereInput | Prisma.CrewScalarWhereInput[]
}

export type CrewCreateWithoutUsersInput = {
  id?: string
  name: string
  leadId: string
  crewType: $Enums.WorkType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CrewUncheckedCreateWithoutUsersInput = {
  id?: string
  name: string
  leadId: string
  crewType: $Enums.WorkType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CrewCreateOrConnectWithoutUsersInput = {
  where: Prisma.CrewWhereUniqueInput
  create: Prisma.XOR<Prisma.CrewCreateWithoutUsersInput, Prisma.CrewUncheckedCreateWithoutUsersInput>
}

export type CrewUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.CrewWhereUniqueInput
  update: Prisma.XOR<Prisma.CrewUpdateWithoutUsersInput, Prisma.CrewUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.CrewCreateWithoutUsersInput, Prisma.CrewUncheckedCreateWithoutUsersInput>
}

export type CrewUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.CrewWhereUniqueInput
  data: Prisma.XOR<Prisma.CrewUpdateWithoutUsersInput, Prisma.CrewUncheckedUpdateWithoutUsersInput>
}

export type CrewUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.CrewScalarWhereInput
  data: Prisma.XOR<Prisma.CrewUpdateManyMutationInput, Prisma.CrewUncheckedUpdateManyWithoutUsersInput>
}

export type CrewScalarWhereInput = {
  AND?: Prisma.CrewScalarWhereInput | Prisma.CrewScalarWhereInput[]
  OR?: Prisma.CrewScalarWhereInput[]
  NOT?: Prisma.CrewScalarWhereInput | Prisma.CrewScalarWhereInput[]
  id?: Prisma.StringFilter<"Crew"> | string
  name?: Prisma.StringFilter<"Crew"> | string
  leadId?: Prisma.StringFilter<"Crew"> | string
  crewType?: Prisma.EnumWorkTypeFilter<"Crew"> | $Enums.WorkType
  createdAt?: Prisma.DateTimeFilter<"Crew"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Crew"> | Date | string
}

export type CrewUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CrewUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CrewUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  leadId?: Prisma.StringFieldUpdateOperationsInput | string
  crewType?: Prisma.EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type CrewCountOutputType
 */

export type CrewCountOutputType = {
  Users: number
}

export type CrewCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Users?: boolean | CrewCountOutputTypeCountUsersArgs
}

/**
 * CrewCountOutputType without action
 */
export type CrewCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CrewCountOutputType
   */
  select?: Prisma.CrewCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CrewCountOutputType without action
 */
export type CrewCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type CrewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  leadId?: boolean
  crewType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Users?: boolean | Prisma.Crew$UsersArgs<ExtArgs>
  _count?: boolean | Prisma.CrewCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["crew"]>

export type CrewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  leadId?: boolean
  crewType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["crew"]>

export type CrewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  leadId?: boolean
  crewType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["crew"]>

export type CrewSelectScalar = {
  id?: boolean
  name?: boolean
  leadId?: boolean
  crewType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CrewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "leadId" | "crewType" | "createdAt" | "updatedAt", ExtArgs["result"]["crew"]>
export type CrewInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Users?: boolean | Prisma.Crew$UsersArgs<ExtArgs>
  _count?: boolean | Prisma.CrewCountOutputTypeDefaultArgs<ExtArgs>
}
export type CrewIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CrewIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CrewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Crew"
  objects: {
    Users: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    leadId: string
    crewType: $Enums.WorkType
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["crew"]>
  composites: {}
}

export type CrewGetPayload<S extends boolean | null | undefined | CrewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CrewPayload, S>

export type CrewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CrewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CrewCountAggregateInputType | true
  }

export interface CrewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Crew'], meta: { name: 'Crew' } }
  /**
   * Find zero or one Crew that matches the filter.
   * @param {CrewFindUniqueArgs} args - Arguments to find a Crew
   * @example
   * // Get one Crew
   * const crew = await prisma.crew.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CrewFindUniqueArgs>(args: Prisma.SelectSubset<T, CrewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Crew that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CrewFindUniqueOrThrowArgs} args - Arguments to find a Crew
   * @example
   * // Get one Crew
   * const crew = await prisma.crew.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CrewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CrewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Crew that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewFindFirstArgs} args - Arguments to find a Crew
   * @example
   * // Get one Crew
   * const crew = await prisma.crew.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CrewFindFirstArgs>(args?: Prisma.SelectSubset<T, CrewFindFirstArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Crew that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewFindFirstOrThrowArgs} args - Arguments to find a Crew
   * @example
   * // Get one Crew
   * const crew = await prisma.crew.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CrewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CrewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Crews that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Crews
   * const crews = await prisma.crew.findMany()
   * 
   * // Get first 10 Crews
   * const crews = await prisma.crew.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const crewWithIdOnly = await prisma.crew.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CrewFindManyArgs>(args?: Prisma.SelectSubset<T, CrewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Crew.
   * @param {CrewCreateArgs} args - Arguments to create a Crew.
   * @example
   * // Create one Crew
   * const Crew = await prisma.crew.create({
   *   data: {
   *     // ... data to create a Crew
   *   }
   * })
   * 
   */
  create<T extends CrewCreateArgs>(args: Prisma.SelectSubset<T, CrewCreateArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Crews.
   * @param {CrewCreateManyArgs} args - Arguments to create many Crews.
   * @example
   * // Create many Crews
   * const crew = await prisma.crew.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CrewCreateManyArgs>(args?: Prisma.SelectSubset<T, CrewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Crews and returns the data saved in the database.
   * @param {CrewCreateManyAndReturnArgs} args - Arguments to create many Crews.
   * @example
   * // Create many Crews
   * const crew = await prisma.crew.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Crews and only return the `id`
   * const crewWithIdOnly = await prisma.crew.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CrewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CrewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Crew.
   * @param {CrewDeleteArgs} args - Arguments to delete one Crew.
   * @example
   * // Delete one Crew
   * const Crew = await prisma.crew.delete({
   *   where: {
   *     // ... filter to delete one Crew
   *   }
   * })
   * 
   */
  delete<T extends CrewDeleteArgs>(args: Prisma.SelectSubset<T, CrewDeleteArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Crew.
   * @param {CrewUpdateArgs} args - Arguments to update one Crew.
   * @example
   * // Update one Crew
   * const crew = await prisma.crew.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CrewUpdateArgs>(args: Prisma.SelectSubset<T, CrewUpdateArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Crews.
   * @param {CrewDeleteManyArgs} args - Arguments to filter Crews to delete.
   * @example
   * // Delete a few Crews
   * const { count } = await prisma.crew.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CrewDeleteManyArgs>(args?: Prisma.SelectSubset<T, CrewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Crews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Crews
   * const crew = await prisma.crew.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CrewUpdateManyArgs>(args: Prisma.SelectSubset<T, CrewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Crews and returns the data updated in the database.
   * @param {CrewUpdateManyAndReturnArgs} args - Arguments to update many Crews.
   * @example
   * // Update many Crews
   * const crew = await prisma.crew.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Crews and only return the `id`
   * const crewWithIdOnly = await prisma.crew.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CrewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CrewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Crew.
   * @param {CrewUpsertArgs} args - Arguments to update or create a Crew.
   * @example
   * // Update or create a Crew
   * const crew = await prisma.crew.upsert({
   *   create: {
   *     // ... data to create a Crew
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Crew we want to update
   *   }
   * })
   */
  upsert<T extends CrewUpsertArgs>(args: Prisma.SelectSubset<T, CrewUpsertArgs<ExtArgs>>): Prisma.Prisma__CrewClient<runtime.Types.Result.GetResult<Prisma.$CrewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Crews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewCountArgs} args - Arguments to filter Crews to count.
   * @example
   * // Count the number of Crews
   * const count = await prisma.crew.count({
   *   where: {
   *     // ... the filter for the Crews we want to count
   *   }
   * })
  **/
  count<T extends CrewCountArgs>(
    args?: Prisma.Subset<T, CrewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CrewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Crew.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CrewAggregateArgs>(args: Prisma.Subset<T, CrewAggregateArgs>): Prisma.PrismaPromise<GetCrewAggregateType<T>>

  /**
   * Group by Crew.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CrewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CrewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CrewGroupByArgs['orderBy'] }
      : { orderBy?: CrewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CrewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCrewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Crew model
 */
readonly fields: CrewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Crew.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CrewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Users<T extends Prisma.Crew$UsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Crew$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Crew model
 */
export interface CrewFieldRefs {
  readonly id: Prisma.FieldRef<"Crew", 'String'>
  readonly name: Prisma.FieldRef<"Crew", 'String'>
  readonly leadId: Prisma.FieldRef<"Crew", 'String'>
  readonly crewType: Prisma.FieldRef<"Crew", 'WorkType'>
  readonly createdAt: Prisma.FieldRef<"Crew", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Crew", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Crew findUnique
 */
export type CrewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * Filter, which Crew to fetch.
   */
  where: Prisma.CrewWhereUniqueInput
}

/**
 * Crew findUniqueOrThrow
 */
export type CrewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * Filter, which Crew to fetch.
   */
  where: Prisma.CrewWhereUniqueInput
}

/**
 * Crew findFirst
 */
export type CrewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * Filter, which Crew to fetch.
   */
  where?: Prisma.CrewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Crews to fetch.
   */
  orderBy?: Prisma.CrewOrderByWithRelationInput | Prisma.CrewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Crews.
   */
  cursor?: Prisma.CrewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Crews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Crews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Crews.
   */
  distinct?: Prisma.CrewScalarFieldEnum | Prisma.CrewScalarFieldEnum[]
}

/**
 * Crew findFirstOrThrow
 */
export type CrewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * Filter, which Crew to fetch.
   */
  where?: Prisma.CrewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Crews to fetch.
   */
  orderBy?: Prisma.CrewOrderByWithRelationInput | Prisma.CrewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Crews.
   */
  cursor?: Prisma.CrewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Crews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Crews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Crews.
   */
  distinct?: Prisma.CrewScalarFieldEnum | Prisma.CrewScalarFieldEnum[]
}

/**
 * Crew findMany
 */
export type CrewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * Filter, which Crews to fetch.
   */
  where?: Prisma.CrewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Crews to fetch.
   */
  orderBy?: Prisma.CrewOrderByWithRelationInput | Prisma.CrewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Crews.
   */
  cursor?: Prisma.CrewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Crews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Crews.
   */
  skip?: number
  distinct?: Prisma.CrewScalarFieldEnum | Prisma.CrewScalarFieldEnum[]
}

/**
 * Crew create
 */
export type CrewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * The data needed to create a Crew.
   */
  data: Prisma.XOR<Prisma.CrewCreateInput, Prisma.CrewUncheckedCreateInput>
}

/**
 * Crew createMany
 */
export type CrewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Crews.
   */
  data: Prisma.CrewCreateManyInput | Prisma.CrewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Crew createManyAndReturn
 */
export type CrewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * The data used to create many Crews.
   */
  data: Prisma.CrewCreateManyInput | Prisma.CrewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Crew update
 */
export type CrewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * The data needed to update a Crew.
   */
  data: Prisma.XOR<Prisma.CrewUpdateInput, Prisma.CrewUncheckedUpdateInput>
  /**
   * Choose, which Crew to update.
   */
  where: Prisma.CrewWhereUniqueInput
}

/**
 * Crew updateMany
 */
export type CrewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Crews.
   */
  data: Prisma.XOR<Prisma.CrewUpdateManyMutationInput, Prisma.CrewUncheckedUpdateManyInput>
  /**
   * Filter which Crews to update
   */
  where?: Prisma.CrewWhereInput
  /**
   * Limit how many Crews to update.
   */
  limit?: number
}

/**
 * Crew updateManyAndReturn
 */
export type CrewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * The data used to update Crews.
   */
  data: Prisma.XOR<Prisma.CrewUpdateManyMutationInput, Prisma.CrewUncheckedUpdateManyInput>
  /**
   * Filter which Crews to update
   */
  where?: Prisma.CrewWhereInput
  /**
   * Limit how many Crews to update.
   */
  limit?: number
}

/**
 * Crew upsert
 */
export type CrewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * The filter to search for the Crew to update in case it exists.
   */
  where: Prisma.CrewWhereUniqueInput
  /**
   * In case the Crew found by the `where` argument doesn't exist, create a new Crew with this data.
   */
  create: Prisma.XOR<Prisma.CrewCreateInput, Prisma.CrewUncheckedCreateInput>
  /**
   * In case the Crew was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CrewUpdateInput, Prisma.CrewUncheckedUpdateInput>
}

/**
 * Crew delete
 */
export type CrewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
  /**
   * Filter which Crew to delete.
   */
  where: Prisma.CrewWhereUniqueInput
}

/**
 * Crew deleteMany
 */
export type CrewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Crews to delete
   */
  where?: Prisma.CrewWhereInput
  /**
   * Limit how many Crews to delete.
   */
  limit?: number
}

/**
 * Crew.Users
 */
export type Crew$UsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * Crew without action
 */
export type CrewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crew
   */
  select?: Prisma.CrewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crew
   */
  omit?: Prisma.CrewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CrewInclude<ExtArgs> | null
}
