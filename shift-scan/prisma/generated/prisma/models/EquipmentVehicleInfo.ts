
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EquipmentVehicleInfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EquipmentVehicleInfo
 * 
 */
export type EquipmentVehicleInfoModel = runtime.Types.Result.DefaultSelection<Prisma.$EquipmentVehicleInfoPayload>

export type AggregateEquipmentVehicleInfo = {
  _count: EquipmentVehicleInfoCountAggregateOutputType | null
  _avg: EquipmentVehicleInfoAvgAggregateOutputType | null
  _sum: EquipmentVehicleInfoSumAggregateOutputType | null
  _min: EquipmentVehicleInfoMinAggregateOutputType | null
  _max: EquipmentVehicleInfoMaxAggregateOutputType | null
}

export type EquipmentVehicleInfoAvgAggregateOutputType = {
  mileage: number | null
}

export type EquipmentVehicleInfoSumAggregateOutputType = {
  mileage: number | null
}

export type EquipmentVehicleInfoMinAggregateOutputType = {
  id: string | null
  make: string | null
  model: string | null
  year: string | null
  licensePlate: string | null
  registrationExpiration: Date | null
  mileage: number | null
}

export type EquipmentVehicleInfoMaxAggregateOutputType = {
  id: string | null
  make: string | null
  model: string | null
  year: string | null
  licensePlate: string | null
  registrationExpiration: Date | null
  mileage: number | null
}

export type EquipmentVehicleInfoCountAggregateOutputType = {
  id: number
  make: number
  model: number
  year: number
  licensePlate: number
  registrationExpiration: number
  mileage: number
  _all: number
}


export type EquipmentVehicleInfoAvgAggregateInputType = {
  mileage?: true
}

export type EquipmentVehicleInfoSumAggregateInputType = {
  mileage?: true
}

export type EquipmentVehicleInfoMinAggregateInputType = {
  id?: true
  make?: true
  model?: true
  year?: true
  licensePlate?: true
  registrationExpiration?: true
  mileage?: true
}

export type EquipmentVehicleInfoMaxAggregateInputType = {
  id?: true
  make?: true
  model?: true
  year?: true
  licensePlate?: true
  registrationExpiration?: true
  mileage?: true
}

export type EquipmentVehicleInfoCountAggregateInputType = {
  id?: true
  make?: true
  model?: true
  year?: true
  licensePlate?: true
  registrationExpiration?: true
  mileage?: true
  _all?: true
}

export type EquipmentVehicleInfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EquipmentVehicleInfo to aggregate.
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EquipmentVehicleInfos to fetch.
   */
  orderBy?: Prisma.EquipmentVehicleInfoOrderByWithRelationInput | Prisma.EquipmentVehicleInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EquipmentVehicleInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EquipmentVehicleInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EquipmentVehicleInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EquipmentVehicleInfos
  **/
  _count?: true | EquipmentVehicleInfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EquipmentVehicleInfoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EquipmentVehicleInfoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EquipmentVehicleInfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EquipmentVehicleInfoMaxAggregateInputType
}

export type GetEquipmentVehicleInfoAggregateType<T extends EquipmentVehicleInfoAggregateArgs> = {
      [P in keyof T & keyof AggregateEquipmentVehicleInfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEquipmentVehicleInfo[P]>
    : Prisma.GetScalarType<T[P], AggregateEquipmentVehicleInfo[P]>
}




export type EquipmentVehicleInfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EquipmentVehicleInfoWhereInput
  orderBy?: Prisma.EquipmentVehicleInfoOrderByWithAggregationInput | Prisma.EquipmentVehicleInfoOrderByWithAggregationInput[]
  by: Prisma.EquipmentVehicleInfoScalarFieldEnum[] | Prisma.EquipmentVehicleInfoScalarFieldEnum
  having?: Prisma.EquipmentVehicleInfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EquipmentVehicleInfoCountAggregateInputType | true
  _avg?: EquipmentVehicleInfoAvgAggregateInputType
  _sum?: EquipmentVehicleInfoSumAggregateInputType
  _min?: EquipmentVehicleInfoMinAggregateInputType
  _max?: EquipmentVehicleInfoMaxAggregateInputType
}

export type EquipmentVehicleInfoGroupByOutputType = {
  id: string
  make: string | null
  model: string | null
  year: string | null
  licensePlate: string | null
  registrationExpiration: Date | null
  mileage: number | null
  _count: EquipmentVehicleInfoCountAggregateOutputType | null
  _avg: EquipmentVehicleInfoAvgAggregateOutputType | null
  _sum: EquipmentVehicleInfoSumAggregateOutputType | null
  _min: EquipmentVehicleInfoMinAggregateOutputType | null
  _max: EquipmentVehicleInfoMaxAggregateOutputType | null
}

type GetEquipmentVehicleInfoGroupByPayload<T extends EquipmentVehicleInfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EquipmentVehicleInfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EquipmentVehicleInfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EquipmentVehicleInfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EquipmentVehicleInfoGroupByOutputType[P]>
      }
    >
  >



export type EquipmentVehicleInfoWhereInput = {
  AND?: Prisma.EquipmentVehicleInfoWhereInput | Prisma.EquipmentVehicleInfoWhereInput[]
  OR?: Prisma.EquipmentVehicleInfoWhereInput[]
  NOT?: Prisma.EquipmentVehicleInfoWhereInput | Prisma.EquipmentVehicleInfoWhereInput[]
  id?: Prisma.StringFilter<"EquipmentVehicleInfo"> | string
  make?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  model?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  year?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  licensePlate?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  registrationExpiration?: Prisma.DateTimeNullableFilter<"EquipmentVehicleInfo"> | Date | string | null
  mileage?: Prisma.IntNullableFilter<"EquipmentVehicleInfo"> | number | null
  Equipment?: Prisma.XOR<Prisma.EquipmentScalarRelationFilter, Prisma.EquipmentWhereInput>
}

export type EquipmentVehicleInfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  make?: Prisma.SortOrderInput | Prisma.SortOrder
  model?: Prisma.SortOrderInput | Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  licensePlate?: Prisma.SortOrderInput | Prisma.SortOrder
  registrationExpiration?: Prisma.SortOrderInput | Prisma.SortOrder
  mileage?: Prisma.SortOrderInput | Prisma.SortOrder
  Equipment?: Prisma.EquipmentOrderByWithRelationInput
}

export type EquipmentVehicleInfoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EquipmentVehicleInfoWhereInput | Prisma.EquipmentVehicleInfoWhereInput[]
  OR?: Prisma.EquipmentVehicleInfoWhereInput[]
  NOT?: Prisma.EquipmentVehicleInfoWhereInput | Prisma.EquipmentVehicleInfoWhereInput[]
  make?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  model?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  year?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  licensePlate?: Prisma.StringNullableFilter<"EquipmentVehicleInfo"> | string | null
  registrationExpiration?: Prisma.DateTimeNullableFilter<"EquipmentVehicleInfo"> | Date | string | null
  mileage?: Prisma.IntNullableFilter<"EquipmentVehicleInfo"> | number | null
  Equipment?: Prisma.XOR<Prisma.EquipmentScalarRelationFilter, Prisma.EquipmentWhereInput>
}, "id">

export type EquipmentVehicleInfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  make?: Prisma.SortOrderInput | Prisma.SortOrder
  model?: Prisma.SortOrderInput | Prisma.SortOrder
  year?: Prisma.SortOrderInput | Prisma.SortOrder
  licensePlate?: Prisma.SortOrderInput | Prisma.SortOrder
  registrationExpiration?: Prisma.SortOrderInput | Prisma.SortOrder
  mileage?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EquipmentVehicleInfoCountOrderByAggregateInput
  _avg?: Prisma.EquipmentVehicleInfoAvgOrderByAggregateInput
  _max?: Prisma.EquipmentVehicleInfoMaxOrderByAggregateInput
  _min?: Prisma.EquipmentVehicleInfoMinOrderByAggregateInput
  _sum?: Prisma.EquipmentVehicleInfoSumOrderByAggregateInput
}

export type EquipmentVehicleInfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.EquipmentVehicleInfoScalarWhereWithAggregatesInput | Prisma.EquipmentVehicleInfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.EquipmentVehicleInfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EquipmentVehicleInfoScalarWhereWithAggregatesInput | Prisma.EquipmentVehicleInfoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EquipmentVehicleInfo"> | string
  make?: Prisma.StringNullableWithAggregatesFilter<"EquipmentVehicleInfo"> | string | null
  model?: Prisma.StringNullableWithAggregatesFilter<"EquipmentVehicleInfo"> | string | null
  year?: Prisma.StringNullableWithAggregatesFilter<"EquipmentVehicleInfo"> | string | null
  licensePlate?: Prisma.StringNullableWithAggregatesFilter<"EquipmentVehicleInfo"> | string | null
  registrationExpiration?: Prisma.DateTimeNullableWithAggregatesFilter<"EquipmentVehicleInfo"> | Date | string | null
  mileage?: Prisma.IntNullableWithAggregatesFilter<"EquipmentVehicleInfo"> | number | null
}

export type EquipmentVehicleInfoCreateInput = {
  make?: string | null
  model?: string | null
  year?: string | null
  licensePlate?: string | null
  registrationExpiration?: Date | string | null
  mileage?: number | null
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutEquipmentVehicleInfoInput
}

export type EquipmentVehicleInfoUncheckedCreateInput = {
  id?: string
  make?: string | null
  model?: string | null
  year?: string | null
  licensePlate?: string | null
  registrationExpiration?: Date | string | null
  mileage?: number | null
}

export type EquipmentVehicleInfoUpdateInput = {
  make?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  licensePlate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registrationExpiration?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  Equipment?: Prisma.EquipmentUpdateOneRequiredWithoutEquipmentVehicleInfoNestedInput
}

export type EquipmentVehicleInfoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  make?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  licensePlate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registrationExpiration?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EquipmentVehicleInfoCreateManyInput = {
  id?: string
  make?: string | null
  model?: string | null
  year?: string | null
  licensePlate?: string | null
  registrationExpiration?: Date | string | null
  mileage?: number | null
}

export type EquipmentVehicleInfoUpdateManyMutationInput = {
  make?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  licensePlate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registrationExpiration?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EquipmentVehicleInfoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  make?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  licensePlate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registrationExpiration?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EquipmentVehicleInfoNullableScalarRelationFilter = {
  is?: Prisma.EquipmentVehicleInfoWhereInput | null
  isNot?: Prisma.EquipmentVehicleInfoWhereInput | null
}

export type EquipmentVehicleInfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  make?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  licensePlate?: Prisma.SortOrder
  registrationExpiration?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
}

export type EquipmentVehicleInfoAvgOrderByAggregateInput = {
  mileage?: Prisma.SortOrder
}

export type EquipmentVehicleInfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  make?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  licensePlate?: Prisma.SortOrder
  registrationExpiration?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
}

export type EquipmentVehicleInfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  make?: Prisma.SortOrder
  model?: Prisma.SortOrder
  year?: Prisma.SortOrder
  licensePlate?: Prisma.SortOrder
  registrationExpiration?: Prisma.SortOrder
  mileage?: Prisma.SortOrder
}

export type EquipmentVehicleInfoSumOrderByAggregateInput = {
  mileage?: Prisma.SortOrder
}

export type EquipmentVehicleInfoCreateNestedOneWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput>
  connectOrCreate?: Prisma.EquipmentVehicleInfoCreateOrConnectWithoutEquipmentInput
  connect?: Prisma.EquipmentVehicleInfoWhereUniqueInput
}

export type EquipmentVehicleInfoUncheckedCreateNestedOneWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput>
  connectOrCreate?: Prisma.EquipmentVehicleInfoCreateOrConnectWithoutEquipmentInput
  connect?: Prisma.EquipmentVehicleInfoWhereUniqueInput
}

export type EquipmentVehicleInfoUpdateOneWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput>
  connectOrCreate?: Prisma.EquipmentVehicleInfoCreateOrConnectWithoutEquipmentInput
  upsert?: Prisma.EquipmentVehicleInfoUpsertWithoutEquipmentInput
  disconnect?: Prisma.EquipmentVehicleInfoWhereInput | boolean
  delete?: Prisma.EquipmentVehicleInfoWhereInput | boolean
  connect?: Prisma.EquipmentVehicleInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateToOneWithWhereWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUpdateWithoutEquipmentInput>, Prisma.EquipmentVehicleInfoUncheckedUpdateWithoutEquipmentInput>
}

export type EquipmentVehicleInfoUncheckedUpdateOneWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput>
  connectOrCreate?: Prisma.EquipmentVehicleInfoCreateOrConnectWithoutEquipmentInput
  upsert?: Prisma.EquipmentVehicleInfoUpsertWithoutEquipmentInput
  disconnect?: Prisma.EquipmentVehicleInfoWhereInput | boolean
  delete?: Prisma.EquipmentVehicleInfoWhereInput | boolean
  connect?: Prisma.EquipmentVehicleInfoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateToOneWithWhereWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUpdateWithoutEquipmentInput>, Prisma.EquipmentVehicleInfoUncheckedUpdateWithoutEquipmentInput>
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EquipmentVehicleInfoCreateWithoutEquipmentInput = {
  make?: string | null
  model?: string | null
  year?: string | null
  licensePlate?: string | null
  registrationExpiration?: Date | string | null
  mileage?: number | null
}

export type EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput = {
  make?: string | null
  model?: string | null
  year?: string | null
  licensePlate?: string | null
  registrationExpiration?: Date | string | null
  mileage?: number | null
}

export type EquipmentVehicleInfoCreateOrConnectWithoutEquipmentInput = {
  where: Prisma.EquipmentVehicleInfoWhereUniqueInput
  create: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput>
}

export type EquipmentVehicleInfoUpsertWithoutEquipmentInput = {
  update: Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedUpdateWithoutEquipmentInput>
  create: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedCreateWithoutEquipmentInput>
  where?: Prisma.EquipmentVehicleInfoWhereInput
}

export type EquipmentVehicleInfoUpdateToOneWithWhereWithoutEquipmentInput = {
  where?: Prisma.EquipmentVehicleInfoWhereInput
  data: Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateWithoutEquipmentInput, Prisma.EquipmentVehicleInfoUncheckedUpdateWithoutEquipmentInput>
}

export type EquipmentVehicleInfoUpdateWithoutEquipmentInput = {
  make?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  licensePlate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registrationExpiration?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type EquipmentVehicleInfoUncheckedUpdateWithoutEquipmentInput = {
  make?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  year?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  licensePlate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  registrationExpiration?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  mileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type EquipmentVehicleInfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  make?: boolean
  model?: boolean
  year?: boolean
  licensePlate?: boolean
  registrationExpiration?: boolean
  mileage?: boolean
  Equipment?: boolean | Prisma.EquipmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["equipmentVehicleInfo"]>

export type EquipmentVehicleInfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  make?: boolean
  model?: boolean
  year?: boolean
  licensePlate?: boolean
  registrationExpiration?: boolean
  mileage?: boolean
  Equipment?: boolean | Prisma.EquipmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["equipmentVehicleInfo"]>

export type EquipmentVehicleInfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  make?: boolean
  model?: boolean
  year?: boolean
  licensePlate?: boolean
  registrationExpiration?: boolean
  mileage?: boolean
  Equipment?: boolean | Prisma.EquipmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["equipmentVehicleInfo"]>

export type EquipmentVehicleInfoSelectScalar = {
  id?: boolean
  make?: boolean
  model?: boolean
  year?: boolean
  licensePlate?: boolean
  registrationExpiration?: boolean
  mileage?: boolean
}

export type EquipmentVehicleInfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "make" | "model" | "year" | "licensePlate" | "registrationExpiration" | "mileage", ExtArgs["result"]["equipmentVehicleInfo"]>
export type EquipmentVehicleInfoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.EquipmentDefaultArgs<ExtArgs>
}
export type EquipmentVehicleInfoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.EquipmentDefaultArgs<ExtArgs>
}
export type EquipmentVehicleInfoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.EquipmentDefaultArgs<ExtArgs>
}

export type $EquipmentVehicleInfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EquipmentVehicleInfo"
  objects: {
    Equipment: Prisma.$EquipmentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    make: string | null
    model: string | null
    year: string | null
    licensePlate: string | null
    registrationExpiration: Date | null
    mileage: number | null
  }, ExtArgs["result"]["equipmentVehicleInfo"]>
  composites: {}
}

export type EquipmentVehicleInfoGetPayload<S extends boolean | null | undefined | EquipmentVehicleInfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload, S>

export type EquipmentVehicleInfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EquipmentVehicleInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EquipmentVehicleInfoCountAggregateInputType | true
  }

export interface EquipmentVehicleInfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EquipmentVehicleInfo'], meta: { name: 'EquipmentVehicleInfo' } }
  /**
   * Find zero or one EquipmentVehicleInfo that matches the filter.
   * @param {EquipmentVehicleInfoFindUniqueArgs} args - Arguments to find a EquipmentVehicleInfo
   * @example
   * // Get one EquipmentVehicleInfo
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EquipmentVehicleInfoFindUniqueArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EquipmentVehicleInfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EquipmentVehicleInfoFindUniqueOrThrowArgs} args - Arguments to find a EquipmentVehicleInfo
   * @example
   * // Get one EquipmentVehicleInfo
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EquipmentVehicleInfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EquipmentVehicleInfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoFindFirstArgs} args - Arguments to find a EquipmentVehicleInfo
   * @example
   * // Get one EquipmentVehicleInfo
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EquipmentVehicleInfoFindFirstArgs>(args?: Prisma.SelectSubset<T, EquipmentVehicleInfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EquipmentVehicleInfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoFindFirstOrThrowArgs} args - Arguments to find a EquipmentVehicleInfo
   * @example
   * // Get one EquipmentVehicleInfo
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EquipmentVehicleInfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EquipmentVehicleInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EquipmentVehicleInfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EquipmentVehicleInfos
   * const equipmentVehicleInfos = await prisma.equipmentVehicleInfo.findMany()
   * 
   * // Get first 10 EquipmentVehicleInfos
   * const equipmentVehicleInfos = await prisma.equipmentVehicleInfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const equipmentVehicleInfoWithIdOnly = await prisma.equipmentVehicleInfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EquipmentVehicleInfoFindManyArgs>(args?: Prisma.SelectSubset<T, EquipmentVehicleInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EquipmentVehicleInfo.
   * @param {EquipmentVehicleInfoCreateArgs} args - Arguments to create a EquipmentVehicleInfo.
   * @example
   * // Create one EquipmentVehicleInfo
   * const EquipmentVehicleInfo = await prisma.equipmentVehicleInfo.create({
   *   data: {
   *     // ... data to create a EquipmentVehicleInfo
   *   }
   * })
   * 
   */
  create<T extends EquipmentVehicleInfoCreateArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoCreateArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EquipmentVehicleInfos.
   * @param {EquipmentVehicleInfoCreateManyArgs} args - Arguments to create many EquipmentVehicleInfos.
   * @example
   * // Create many EquipmentVehicleInfos
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EquipmentVehicleInfoCreateManyArgs>(args?: Prisma.SelectSubset<T, EquipmentVehicleInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EquipmentVehicleInfos and returns the data saved in the database.
   * @param {EquipmentVehicleInfoCreateManyAndReturnArgs} args - Arguments to create many EquipmentVehicleInfos.
   * @example
   * // Create many EquipmentVehicleInfos
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EquipmentVehicleInfos and only return the `id`
   * const equipmentVehicleInfoWithIdOnly = await prisma.equipmentVehicleInfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EquipmentVehicleInfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EquipmentVehicleInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EquipmentVehicleInfo.
   * @param {EquipmentVehicleInfoDeleteArgs} args - Arguments to delete one EquipmentVehicleInfo.
   * @example
   * // Delete one EquipmentVehicleInfo
   * const EquipmentVehicleInfo = await prisma.equipmentVehicleInfo.delete({
   *   where: {
   *     // ... filter to delete one EquipmentVehicleInfo
   *   }
   * })
   * 
   */
  delete<T extends EquipmentVehicleInfoDeleteArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoDeleteArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EquipmentVehicleInfo.
   * @param {EquipmentVehicleInfoUpdateArgs} args - Arguments to update one EquipmentVehicleInfo.
   * @example
   * // Update one EquipmentVehicleInfo
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EquipmentVehicleInfoUpdateArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoUpdateArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EquipmentVehicleInfos.
   * @param {EquipmentVehicleInfoDeleteManyArgs} args - Arguments to filter EquipmentVehicleInfos to delete.
   * @example
   * // Delete a few EquipmentVehicleInfos
   * const { count } = await prisma.equipmentVehicleInfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EquipmentVehicleInfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, EquipmentVehicleInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EquipmentVehicleInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EquipmentVehicleInfos
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EquipmentVehicleInfoUpdateManyArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EquipmentVehicleInfos and returns the data updated in the database.
   * @param {EquipmentVehicleInfoUpdateManyAndReturnArgs} args - Arguments to update many EquipmentVehicleInfos.
   * @example
   * // Update many EquipmentVehicleInfos
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EquipmentVehicleInfos and only return the `id`
   * const equipmentVehicleInfoWithIdOnly = await prisma.equipmentVehicleInfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EquipmentVehicleInfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EquipmentVehicleInfo.
   * @param {EquipmentVehicleInfoUpsertArgs} args - Arguments to update or create a EquipmentVehicleInfo.
   * @example
   * // Update or create a EquipmentVehicleInfo
   * const equipmentVehicleInfo = await prisma.equipmentVehicleInfo.upsert({
   *   create: {
   *     // ... data to create a EquipmentVehicleInfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EquipmentVehicleInfo we want to update
   *   }
   * })
   */
  upsert<T extends EquipmentVehicleInfoUpsertArgs>(args: Prisma.SelectSubset<T, EquipmentVehicleInfoUpsertArgs<ExtArgs>>): Prisma.Prisma__EquipmentVehicleInfoClient<runtime.Types.Result.GetResult<Prisma.$EquipmentVehicleInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EquipmentVehicleInfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoCountArgs} args - Arguments to filter EquipmentVehicleInfos to count.
   * @example
   * // Count the number of EquipmentVehicleInfos
   * const count = await prisma.equipmentVehicleInfo.count({
   *   where: {
   *     // ... the filter for the EquipmentVehicleInfos we want to count
   *   }
   * })
  **/
  count<T extends EquipmentVehicleInfoCountArgs>(
    args?: Prisma.Subset<T, EquipmentVehicleInfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EquipmentVehicleInfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EquipmentVehicleInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EquipmentVehicleInfoAggregateArgs>(args: Prisma.Subset<T, EquipmentVehicleInfoAggregateArgs>): Prisma.PrismaPromise<GetEquipmentVehicleInfoAggregateType<T>>

  /**
   * Group by EquipmentVehicleInfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EquipmentVehicleInfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EquipmentVehicleInfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EquipmentVehicleInfoGroupByArgs['orderBy'] }
      : { orderBy?: EquipmentVehicleInfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EquipmentVehicleInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentVehicleInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EquipmentVehicleInfo model
 */
readonly fields: EquipmentVehicleInfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EquipmentVehicleInfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EquipmentVehicleInfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Equipment<T extends Prisma.EquipmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EquipmentDefaultArgs<ExtArgs>>): Prisma.Prisma__EquipmentClient<runtime.Types.Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EquipmentVehicleInfo model
 */
export interface EquipmentVehicleInfoFieldRefs {
  readonly id: Prisma.FieldRef<"EquipmentVehicleInfo", 'String'>
  readonly make: Prisma.FieldRef<"EquipmentVehicleInfo", 'String'>
  readonly model: Prisma.FieldRef<"EquipmentVehicleInfo", 'String'>
  readonly year: Prisma.FieldRef<"EquipmentVehicleInfo", 'String'>
  readonly licensePlate: Prisma.FieldRef<"EquipmentVehicleInfo", 'String'>
  readonly registrationExpiration: Prisma.FieldRef<"EquipmentVehicleInfo", 'DateTime'>
  readonly mileage: Prisma.FieldRef<"EquipmentVehicleInfo", 'Int'>
}
    

// Custom InputTypes
/**
 * EquipmentVehicleInfo findUnique
 */
export type EquipmentVehicleInfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * Filter, which EquipmentVehicleInfo to fetch.
   */
  where: Prisma.EquipmentVehicleInfoWhereUniqueInput
}

/**
 * EquipmentVehicleInfo findUniqueOrThrow
 */
export type EquipmentVehicleInfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * Filter, which EquipmentVehicleInfo to fetch.
   */
  where: Prisma.EquipmentVehicleInfoWhereUniqueInput
}

/**
 * EquipmentVehicleInfo findFirst
 */
export type EquipmentVehicleInfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * Filter, which EquipmentVehicleInfo to fetch.
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EquipmentVehicleInfos to fetch.
   */
  orderBy?: Prisma.EquipmentVehicleInfoOrderByWithRelationInput | Prisma.EquipmentVehicleInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EquipmentVehicleInfos.
   */
  cursor?: Prisma.EquipmentVehicleInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EquipmentVehicleInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EquipmentVehicleInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EquipmentVehicleInfos.
   */
  distinct?: Prisma.EquipmentVehicleInfoScalarFieldEnum | Prisma.EquipmentVehicleInfoScalarFieldEnum[]
}

/**
 * EquipmentVehicleInfo findFirstOrThrow
 */
export type EquipmentVehicleInfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * Filter, which EquipmentVehicleInfo to fetch.
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EquipmentVehicleInfos to fetch.
   */
  orderBy?: Prisma.EquipmentVehicleInfoOrderByWithRelationInput | Prisma.EquipmentVehicleInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EquipmentVehicleInfos.
   */
  cursor?: Prisma.EquipmentVehicleInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EquipmentVehicleInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EquipmentVehicleInfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EquipmentVehicleInfos.
   */
  distinct?: Prisma.EquipmentVehicleInfoScalarFieldEnum | Prisma.EquipmentVehicleInfoScalarFieldEnum[]
}

/**
 * EquipmentVehicleInfo findMany
 */
export type EquipmentVehicleInfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * Filter, which EquipmentVehicleInfos to fetch.
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EquipmentVehicleInfos to fetch.
   */
  orderBy?: Prisma.EquipmentVehicleInfoOrderByWithRelationInput | Prisma.EquipmentVehicleInfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EquipmentVehicleInfos.
   */
  cursor?: Prisma.EquipmentVehicleInfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EquipmentVehicleInfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EquipmentVehicleInfos.
   */
  skip?: number
  distinct?: Prisma.EquipmentVehicleInfoScalarFieldEnum | Prisma.EquipmentVehicleInfoScalarFieldEnum[]
}

/**
 * EquipmentVehicleInfo create
 */
export type EquipmentVehicleInfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * The data needed to create a EquipmentVehicleInfo.
   */
  data: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateInput, Prisma.EquipmentVehicleInfoUncheckedCreateInput>
}

/**
 * EquipmentVehicleInfo createMany
 */
export type EquipmentVehicleInfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EquipmentVehicleInfos.
   */
  data: Prisma.EquipmentVehicleInfoCreateManyInput | Prisma.EquipmentVehicleInfoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EquipmentVehicleInfo createManyAndReturn
 */
export type EquipmentVehicleInfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * The data used to create many EquipmentVehicleInfos.
   */
  data: Prisma.EquipmentVehicleInfoCreateManyInput | Prisma.EquipmentVehicleInfoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EquipmentVehicleInfo update
 */
export type EquipmentVehicleInfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * The data needed to update a EquipmentVehicleInfo.
   */
  data: Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateInput, Prisma.EquipmentVehicleInfoUncheckedUpdateInput>
  /**
   * Choose, which EquipmentVehicleInfo to update.
   */
  where: Prisma.EquipmentVehicleInfoWhereUniqueInput
}

/**
 * EquipmentVehicleInfo updateMany
 */
export type EquipmentVehicleInfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EquipmentVehicleInfos.
   */
  data: Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateManyMutationInput, Prisma.EquipmentVehicleInfoUncheckedUpdateManyInput>
  /**
   * Filter which EquipmentVehicleInfos to update
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * Limit how many EquipmentVehicleInfos to update.
   */
  limit?: number
}

/**
 * EquipmentVehicleInfo updateManyAndReturn
 */
export type EquipmentVehicleInfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * The data used to update EquipmentVehicleInfos.
   */
  data: Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateManyMutationInput, Prisma.EquipmentVehicleInfoUncheckedUpdateManyInput>
  /**
   * Filter which EquipmentVehicleInfos to update
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * Limit how many EquipmentVehicleInfos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EquipmentVehicleInfo upsert
 */
export type EquipmentVehicleInfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * The filter to search for the EquipmentVehicleInfo to update in case it exists.
   */
  where: Prisma.EquipmentVehicleInfoWhereUniqueInput
  /**
   * In case the EquipmentVehicleInfo found by the `where` argument doesn't exist, create a new EquipmentVehicleInfo with this data.
   */
  create: Prisma.XOR<Prisma.EquipmentVehicleInfoCreateInput, Prisma.EquipmentVehicleInfoUncheckedCreateInput>
  /**
   * In case the EquipmentVehicleInfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EquipmentVehicleInfoUpdateInput, Prisma.EquipmentVehicleInfoUncheckedUpdateInput>
}

/**
 * EquipmentVehicleInfo delete
 */
export type EquipmentVehicleInfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
  /**
   * Filter which EquipmentVehicleInfo to delete.
   */
  where: Prisma.EquipmentVehicleInfoWhereUniqueInput
}

/**
 * EquipmentVehicleInfo deleteMany
 */
export type EquipmentVehicleInfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EquipmentVehicleInfos to delete
   */
  where?: Prisma.EquipmentVehicleInfoWhereInput
  /**
   * Limit how many EquipmentVehicleInfos to delete.
   */
  limit?: number
}

/**
 * EquipmentVehicleInfo without action
 */
export type EquipmentVehicleInfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EquipmentVehicleInfo
   */
  select?: Prisma.EquipmentVehicleInfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EquipmentVehicleInfo
   */
  omit?: Prisma.EquipmentVehicleInfoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentVehicleInfoInclude<ExtArgs> | null
}
