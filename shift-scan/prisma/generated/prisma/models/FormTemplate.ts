
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FormTemplate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FormTemplate
 * 
 */
export type FormTemplateModel = runtime.Types.Result.DefaultSelection<Prisma.$FormTemplatePayload>

export type AggregateFormTemplate = {
  _count: FormTemplateCountAggregateOutputType | null
  _min: FormTemplateMinAggregateOutputType | null
  _max: FormTemplateMaxAggregateOutputType | null
}

export type FormTemplateMinAggregateOutputType = {
  id: string | null
  companyId: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
  isSignatureRequired: boolean | null
  description: string | null
  isActive: $Enums.FormTemplateStatus | null
  formType: $Enums.FormTemplateCategory | null
}

export type FormTemplateMaxAggregateOutputType = {
  id: string | null
  companyId: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
  isSignatureRequired: boolean | null
  description: string | null
  isActive: $Enums.FormTemplateStatus | null
  formType: $Enums.FormTemplateCategory | null
}

export type FormTemplateCountAggregateOutputType = {
  id: number
  companyId: number
  name: number
  createdAt: number
  updatedAt: number
  isSignatureRequired: number
  description: number
  isActive: number
  formType: number
  _all: number
}


export type FormTemplateMinAggregateInputType = {
  id?: true
  companyId?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  isSignatureRequired?: true
  description?: true
  isActive?: true
  formType?: true
}

export type FormTemplateMaxAggregateInputType = {
  id?: true
  companyId?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  isSignatureRequired?: true
  description?: true
  isActive?: true
  formType?: true
}

export type FormTemplateCountAggregateInputType = {
  id?: true
  companyId?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  isSignatureRequired?: true
  description?: true
  isActive?: true
  formType?: true
  _all?: true
}

export type FormTemplateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormTemplate to aggregate.
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormTemplates to fetch.
   */
  orderBy?: Prisma.FormTemplateOrderByWithRelationInput | Prisma.FormTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormTemplates
  **/
  _count?: true | FormTemplateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormTemplateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormTemplateMaxAggregateInputType
}

export type GetFormTemplateAggregateType<T extends FormTemplateAggregateArgs> = {
      [P in keyof T & keyof AggregateFormTemplate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormTemplate[P]>
    : Prisma.GetScalarType<T[P], AggregateFormTemplate[P]>
}




export type FormTemplateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormTemplateWhereInput
  orderBy?: Prisma.FormTemplateOrderByWithAggregationInput | Prisma.FormTemplateOrderByWithAggregationInput[]
  by: Prisma.FormTemplateScalarFieldEnum[] | Prisma.FormTemplateScalarFieldEnum
  having?: Prisma.FormTemplateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormTemplateCountAggregateInputType | true
  _min?: FormTemplateMinAggregateInputType
  _max?: FormTemplateMaxAggregateInputType
}

export type FormTemplateGroupByOutputType = {
  id: string
  companyId: string
  name: string
  createdAt: Date
  updatedAt: Date
  isSignatureRequired: boolean
  description: string | null
  isActive: $Enums.FormTemplateStatus
  formType: $Enums.FormTemplateCategory
  _count: FormTemplateCountAggregateOutputType | null
  _min: FormTemplateMinAggregateOutputType | null
  _max: FormTemplateMaxAggregateOutputType | null
}

type GetFormTemplateGroupByPayload<T extends FormTemplateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormTemplateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormTemplateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormTemplateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormTemplateGroupByOutputType[P]>
      }
    >
  >



export type FormTemplateWhereInput = {
  AND?: Prisma.FormTemplateWhereInput | Prisma.FormTemplateWhereInput[]
  OR?: Prisma.FormTemplateWhereInput[]
  NOT?: Prisma.FormTemplateWhereInput | Prisma.FormTemplateWhereInput[]
  id?: Prisma.StringFilter<"FormTemplate"> | string
  companyId?: Prisma.StringFilter<"FormTemplate"> | string
  name?: Prisma.StringFilter<"FormTemplate"> | string
  createdAt?: Prisma.DateTimeFilter<"FormTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormTemplate"> | Date | string
  isSignatureRequired?: Prisma.BoolFilter<"FormTemplate"> | boolean
  description?: Prisma.StringNullableFilter<"FormTemplate"> | string | null
  isActive?: Prisma.EnumFormTemplateStatusFilter<"FormTemplate"> | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFilter<"FormTemplate"> | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionListRelationFilter
  Company?: Prisma.XOR<Prisma.CompanyScalarRelationFilter, Prisma.CompanyWhereInput>
  FormGrouping?: Prisma.FormGroupingListRelationFilter
}

export type FormTemplateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isSignatureRequired?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrder
  formType?: Prisma.SortOrder
  Submissions?: Prisma.FormSubmissionOrderByRelationAggregateInput
  Company?: Prisma.CompanyOrderByWithRelationInput
  FormGrouping?: Prisma.FormGroupingOrderByRelationAggregateInput
}

export type FormTemplateWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormTemplateWhereInput | Prisma.FormTemplateWhereInput[]
  OR?: Prisma.FormTemplateWhereInput[]
  NOT?: Prisma.FormTemplateWhereInput | Prisma.FormTemplateWhereInput[]
  companyId?: Prisma.StringFilter<"FormTemplate"> | string
  name?: Prisma.StringFilter<"FormTemplate"> | string
  createdAt?: Prisma.DateTimeFilter<"FormTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormTemplate"> | Date | string
  isSignatureRequired?: Prisma.BoolFilter<"FormTemplate"> | boolean
  description?: Prisma.StringNullableFilter<"FormTemplate"> | string | null
  isActive?: Prisma.EnumFormTemplateStatusFilter<"FormTemplate"> | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFilter<"FormTemplate"> | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionListRelationFilter
  Company?: Prisma.XOR<Prisma.CompanyScalarRelationFilter, Prisma.CompanyWhereInput>
  FormGrouping?: Prisma.FormGroupingListRelationFilter
}, "id">

export type FormTemplateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isSignatureRequired?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrder
  formType?: Prisma.SortOrder
  _count?: Prisma.FormTemplateCountOrderByAggregateInput
  _max?: Prisma.FormTemplateMaxOrderByAggregateInput
  _min?: Prisma.FormTemplateMinOrderByAggregateInput
}

export type FormTemplateScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormTemplateScalarWhereWithAggregatesInput | Prisma.FormTemplateScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormTemplateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormTemplateScalarWhereWithAggregatesInput | Prisma.FormTemplateScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormTemplate"> | string
  companyId?: Prisma.StringWithAggregatesFilter<"FormTemplate"> | string
  name?: Prisma.StringWithAggregatesFilter<"FormTemplate"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FormTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FormTemplate"> | Date | string
  isSignatureRequired?: Prisma.BoolWithAggregatesFilter<"FormTemplate"> | boolean
  description?: Prisma.StringNullableWithAggregatesFilter<"FormTemplate"> | string | null
  isActive?: Prisma.EnumFormTemplateStatusWithAggregatesFilter<"FormTemplate"> | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryWithAggregatesFilter<"FormTemplate"> | $Enums.FormTemplateCategory
}

export type FormTemplateCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionCreateNestedManyWithoutFormTemplateInput
  Company: Prisma.CompanyCreateNestedOneWithoutFormTemplatesInput
  FormGrouping?: Prisma.FormGroupingCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateUncheckedCreateInput = {
  id?: string
  companyId: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUncheckedCreateNestedManyWithoutFormTemplateInput
  FormGrouping?: Prisma.FormGroupingUncheckedCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUpdateManyWithoutFormTemplateNestedInput
  Company?: Prisma.CompanyUpdateOneRequiredWithoutFormTemplatesNestedInput
  FormGrouping?: Prisma.FormGroupingUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUncheckedUpdateManyWithoutFormTemplateNestedInput
  FormGrouping?: Prisma.FormGroupingUncheckedUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateCreateManyInput = {
  id?: string
  companyId: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
}

export type FormTemplateUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
}

export type FormTemplateUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
}

export type FormTemplateListRelationFilter = {
  every?: Prisma.FormTemplateWhereInput
  some?: Prisma.FormTemplateWhereInput
  none?: Prisma.FormTemplateWhereInput
}

export type FormTemplateOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormTemplateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isSignatureRequired?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  formType?: Prisma.SortOrder
}

export type FormTemplateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isSignatureRequired?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  formType?: Prisma.SortOrder
}

export type FormTemplateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isSignatureRequired?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  formType?: Prisma.SortOrder
}

export type FormTemplateScalarRelationFilter = {
  is?: Prisma.FormTemplateWhereInput
  isNot?: Prisma.FormTemplateWhereInput
}

export type FormTemplateCreateNestedManyWithoutCompanyInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutCompanyInput, Prisma.FormTemplateUncheckedCreateWithoutCompanyInput> | Prisma.FormTemplateCreateWithoutCompanyInput[] | Prisma.FormTemplateUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutCompanyInput | Prisma.FormTemplateCreateOrConnectWithoutCompanyInput[]
  createMany?: Prisma.FormTemplateCreateManyCompanyInputEnvelope
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
}

export type FormTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutCompanyInput, Prisma.FormTemplateUncheckedCreateWithoutCompanyInput> | Prisma.FormTemplateCreateWithoutCompanyInput[] | Prisma.FormTemplateUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutCompanyInput | Prisma.FormTemplateCreateOrConnectWithoutCompanyInput[]
  createMany?: Prisma.FormTemplateCreateManyCompanyInputEnvelope
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
}

export type FormTemplateUpdateManyWithoutCompanyNestedInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutCompanyInput, Prisma.FormTemplateUncheckedCreateWithoutCompanyInput> | Prisma.FormTemplateCreateWithoutCompanyInput[] | Prisma.FormTemplateUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutCompanyInput | Prisma.FormTemplateCreateOrConnectWithoutCompanyInput[]
  upsert?: Prisma.FormTemplateUpsertWithWhereUniqueWithoutCompanyInput | Prisma.FormTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
  createMany?: Prisma.FormTemplateCreateManyCompanyInputEnvelope
  set?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  disconnect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  delete?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  update?: Prisma.FormTemplateUpdateWithWhereUniqueWithoutCompanyInput | Prisma.FormTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
  updateMany?: Prisma.FormTemplateUpdateManyWithWhereWithoutCompanyInput | Prisma.FormTemplateUpdateManyWithWhereWithoutCompanyInput[]
  deleteMany?: Prisma.FormTemplateScalarWhereInput | Prisma.FormTemplateScalarWhereInput[]
}

export type FormTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutCompanyInput, Prisma.FormTemplateUncheckedCreateWithoutCompanyInput> | Prisma.FormTemplateCreateWithoutCompanyInput[] | Prisma.FormTemplateUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutCompanyInput | Prisma.FormTemplateCreateOrConnectWithoutCompanyInput[]
  upsert?: Prisma.FormTemplateUpsertWithWhereUniqueWithoutCompanyInput | Prisma.FormTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
  createMany?: Prisma.FormTemplateCreateManyCompanyInputEnvelope
  set?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  disconnect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  delete?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  update?: Prisma.FormTemplateUpdateWithWhereUniqueWithoutCompanyInput | Prisma.FormTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
  updateMany?: Prisma.FormTemplateUpdateManyWithWhereWithoutCompanyInput | Prisma.FormTemplateUpdateManyWithWhereWithoutCompanyInput[]
  deleteMany?: Prisma.FormTemplateScalarWhereInput | Prisma.FormTemplateScalarWhereInput[]
}

export type EnumFormTemplateStatusFieldUpdateOperationsInput = {
  set?: $Enums.FormTemplateStatus
}

export type EnumFormTemplateCategoryFieldUpdateOperationsInput = {
  set?: $Enums.FormTemplateCategory
}

export type FormTemplateCreateNestedManyWithoutFormGroupingInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput> | Prisma.FormTemplateCreateWithoutFormGroupingInput[] | Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput | Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput[]
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
}

export type FormTemplateUncheckedCreateNestedManyWithoutFormGroupingInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput> | Prisma.FormTemplateCreateWithoutFormGroupingInput[] | Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput | Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput[]
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
}

export type FormTemplateUpdateManyWithoutFormGroupingNestedInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput> | Prisma.FormTemplateCreateWithoutFormGroupingInput[] | Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput | Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput[]
  upsert?: Prisma.FormTemplateUpsertWithWhereUniqueWithoutFormGroupingInput | Prisma.FormTemplateUpsertWithWhereUniqueWithoutFormGroupingInput[]
  set?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  disconnect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  delete?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  update?: Prisma.FormTemplateUpdateWithWhereUniqueWithoutFormGroupingInput | Prisma.FormTemplateUpdateWithWhereUniqueWithoutFormGroupingInput[]
  updateMany?: Prisma.FormTemplateUpdateManyWithWhereWithoutFormGroupingInput | Prisma.FormTemplateUpdateManyWithWhereWithoutFormGroupingInput[]
  deleteMany?: Prisma.FormTemplateScalarWhereInput | Prisma.FormTemplateScalarWhereInput[]
}

export type FormTemplateUncheckedUpdateManyWithoutFormGroupingNestedInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput> | Prisma.FormTemplateCreateWithoutFormGroupingInput[] | Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput | Prisma.FormTemplateCreateOrConnectWithoutFormGroupingInput[]
  upsert?: Prisma.FormTemplateUpsertWithWhereUniqueWithoutFormGroupingInput | Prisma.FormTemplateUpsertWithWhereUniqueWithoutFormGroupingInput[]
  set?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  disconnect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  delete?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  connect?: Prisma.FormTemplateWhereUniqueInput | Prisma.FormTemplateWhereUniqueInput[]
  update?: Prisma.FormTemplateUpdateWithWhereUniqueWithoutFormGroupingInput | Prisma.FormTemplateUpdateWithWhereUniqueWithoutFormGroupingInput[]
  updateMany?: Prisma.FormTemplateUpdateManyWithWhereWithoutFormGroupingInput | Prisma.FormTemplateUpdateManyWithWhereWithoutFormGroupingInput[]
  deleteMany?: Prisma.FormTemplateScalarWhereInput | Prisma.FormTemplateScalarWhereInput[]
}

export type FormTemplateCreateNestedOneWithoutSubmissionsInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutSubmissionsInput, Prisma.FormTemplateUncheckedCreateWithoutSubmissionsInput>
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutSubmissionsInput
  connect?: Prisma.FormTemplateWhereUniqueInput
}

export type FormTemplateUpdateOneRequiredWithoutSubmissionsNestedInput = {
  create?: Prisma.XOR<Prisma.FormTemplateCreateWithoutSubmissionsInput, Prisma.FormTemplateUncheckedCreateWithoutSubmissionsInput>
  connectOrCreate?: Prisma.FormTemplateCreateOrConnectWithoutSubmissionsInput
  upsert?: Prisma.FormTemplateUpsertWithoutSubmissionsInput
  connect?: Prisma.FormTemplateWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FormTemplateUpdateToOneWithWhereWithoutSubmissionsInput, Prisma.FormTemplateUpdateWithoutSubmissionsInput>, Prisma.FormTemplateUncheckedUpdateWithoutSubmissionsInput>
}

export type FormTemplateCreateWithoutCompanyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionCreateNestedManyWithoutFormTemplateInput
  FormGrouping?: Prisma.FormGroupingCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateUncheckedCreateWithoutCompanyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUncheckedCreateNestedManyWithoutFormTemplateInput
  FormGrouping?: Prisma.FormGroupingUncheckedCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateCreateOrConnectWithoutCompanyInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  create: Prisma.XOR<Prisma.FormTemplateCreateWithoutCompanyInput, Prisma.FormTemplateUncheckedCreateWithoutCompanyInput>
}

export type FormTemplateCreateManyCompanyInputEnvelope = {
  data: Prisma.FormTemplateCreateManyCompanyInput | Prisma.FormTemplateCreateManyCompanyInput[]
  skipDuplicates?: boolean
}

export type FormTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  update: Prisma.XOR<Prisma.FormTemplateUpdateWithoutCompanyInput, Prisma.FormTemplateUncheckedUpdateWithoutCompanyInput>
  create: Prisma.XOR<Prisma.FormTemplateCreateWithoutCompanyInput, Prisma.FormTemplateUncheckedCreateWithoutCompanyInput>
}

export type FormTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  data: Prisma.XOR<Prisma.FormTemplateUpdateWithoutCompanyInput, Prisma.FormTemplateUncheckedUpdateWithoutCompanyInput>
}

export type FormTemplateUpdateManyWithWhereWithoutCompanyInput = {
  where: Prisma.FormTemplateScalarWhereInput
  data: Prisma.XOR<Prisma.FormTemplateUpdateManyMutationInput, Prisma.FormTemplateUncheckedUpdateManyWithoutCompanyInput>
}

export type FormTemplateScalarWhereInput = {
  AND?: Prisma.FormTemplateScalarWhereInput | Prisma.FormTemplateScalarWhereInput[]
  OR?: Prisma.FormTemplateScalarWhereInput[]
  NOT?: Prisma.FormTemplateScalarWhereInput | Prisma.FormTemplateScalarWhereInput[]
  id?: Prisma.StringFilter<"FormTemplate"> | string
  companyId?: Prisma.StringFilter<"FormTemplate"> | string
  name?: Prisma.StringFilter<"FormTemplate"> | string
  createdAt?: Prisma.DateTimeFilter<"FormTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormTemplate"> | Date | string
  isSignatureRequired?: Prisma.BoolFilter<"FormTemplate"> | boolean
  description?: Prisma.StringNullableFilter<"FormTemplate"> | string | null
  isActive?: Prisma.EnumFormTemplateStatusFilter<"FormTemplate"> | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFilter<"FormTemplate"> | $Enums.FormTemplateCategory
}

export type FormTemplateCreateWithoutFormGroupingInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionCreateNestedManyWithoutFormTemplateInput
  Company: Prisma.CompanyCreateNestedOneWithoutFormTemplatesInput
}

export type FormTemplateUncheckedCreateWithoutFormGroupingInput = {
  id?: string
  companyId: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUncheckedCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateCreateOrConnectWithoutFormGroupingInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  create: Prisma.XOR<Prisma.FormTemplateCreateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput>
}

export type FormTemplateUpsertWithWhereUniqueWithoutFormGroupingInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  update: Prisma.XOR<Prisma.FormTemplateUpdateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedUpdateWithoutFormGroupingInput>
  create: Prisma.XOR<Prisma.FormTemplateCreateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedCreateWithoutFormGroupingInput>
}

export type FormTemplateUpdateWithWhereUniqueWithoutFormGroupingInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  data: Prisma.XOR<Prisma.FormTemplateUpdateWithoutFormGroupingInput, Prisma.FormTemplateUncheckedUpdateWithoutFormGroupingInput>
}

export type FormTemplateUpdateManyWithWhereWithoutFormGroupingInput = {
  where: Prisma.FormTemplateScalarWhereInput
  data: Prisma.XOR<Prisma.FormTemplateUpdateManyMutationInput, Prisma.FormTemplateUncheckedUpdateManyWithoutFormGroupingInput>
}

export type FormTemplateCreateWithoutSubmissionsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  Company: Prisma.CompanyCreateNestedOneWithoutFormTemplatesInput
  FormGrouping?: Prisma.FormGroupingCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateUncheckedCreateWithoutSubmissionsInput = {
  id?: string
  companyId: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
  FormGrouping?: Prisma.FormGroupingUncheckedCreateNestedManyWithoutFormTemplateInput
}

export type FormTemplateCreateOrConnectWithoutSubmissionsInput = {
  where: Prisma.FormTemplateWhereUniqueInput
  create: Prisma.XOR<Prisma.FormTemplateCreateWithoutSubmissionsInput, Prisma.FormTemplateUncheckedCreateWithoutSubmissionsInput>
}

export type FormTemplateUpsertWithoutSubmissionsInput = {
  update: Prisma.XOR<Prisma.FormTemplateUpdateWithoutSubmissionsInput, Prisma.FormTemplateUncheckedUpdateWithoutSubmissionsInput>
  create: Prisma.XOR<Prisma.FormTemplateCreateWithoutSubmissionsInput, Prisma.FormTemplateUncheckedCreateWithoutSubmissionsInput>
  where?: Prisma.FormTemplateWhereInput
}

export type FormTemplateUpdateToOneWithWhereWithoutSubmissionsInput = {
  where?: Prisma.FormTemplateWhereInput
  data: Prisma.XOR<Prisma.FormTemplateUpdateWithoutSubmissionsInput, Prisma.FormTemplateUncheckedUpdateWithoutSubmissionsInput>
}

export type FormTemplateUpdateWithoutSubmissionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Company?: Prisma.CompanyUpdateOneRequiredWithoutFormTemplatesNestedInput
  FormGrouping?: Prisma.FormGroupingUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateUncheckedUpdateWithoutSubmissionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  FormGrouping?: Prisma.FormGroupingUncheckedUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateCreateManyCompanyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isSignatureRequired?: boolean
  description?: string | null
  isActive?: $Enums.FormTemplateStatus
  formType?: $Enums.FormTemplateCategory
}

export type FormTemplateUpdateWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUpdateManyWithoutFormTemplateNestedInput
  FormGrouping?: Prisma.FormGroupingUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateUncheckedUpdateWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUncheckedUpdateManyWithoutFormTemplateNestedInput
  FormGrouping?: Prisma.FormGroupingUncheckedUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateUncheckedUpdateManyWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
}

export type FormTemplateUpdateWithoutFormGroupingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUpdateManyWithoutFormTemplateNestedInput
  Company?: Prisma.CompanyUpdateOneRequiredWithoutFormTemplatesNestedInput
}

export type FormTemplateUncheckedUpdateWithoutFormGroupingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
  Submissions?: Prisma.FormSubmissionUncheckedUpdateManyWithoutFormTemplateNestedInput
}

export type FormTemplateUncheckedUpdateManyWithoutFormGroupingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isSignatureRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.EnumFormTemplateStatusFieldUpdateOperationsInput | $Enums.FormTemplateStatus
  formType?: Prisma.EnumFormTemplateCategoryFieldUpdateOperationsInput | $Enums.FormTemplateCategory
}


/**
 * Count Type FormTemplateCountOutputType
 */

export type FormTemplateCountOutputType = {
  Submissions: number
  FormGrouping: number
}

export type FormTemplateCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Submissions?: boolean | FormTemplateCountOutputTypeCountSubmissionsArgs
  FormGrouping?: boolean | FormTemplateCountOutputTypeCountFormGroupingArgs
}

/**
 * FormTemplateCountOutputType without action
 */
export type FormTemplateCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplateCountOutputType
   */
  select?: Prisma.FormTemplateCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FormTemplateCountOutputType without action
 */
export type FormTemplateCountOutputTypeCountSubmissionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormSubmissionWhereInput
}

/**
 * FormTemplateCountOutputType without action
 */
export type FormTemplateCountOutputTypeCountFormGroupingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormGroupingWhereInput
}


export type FormTemplateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  companyId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isSignatureRequired?: boolean
  description?: boolean
  isActive?: boolean
  formType?: boolean
  Submissions?: boolean | Prisma.FormTemplate$SubmissionsArgs<ExtArgs>
  Company?: boolean | Prisma.CompanyDefaultArgs<ExtArgs>
  FormGrouping?: boolean | Prisma.FormTemplate$FormGroupingArgs<ExtArgs>
  _count?: boolean | Prisma.FormTemplateCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formTemplate"]>

export type FormTemplateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  companyId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isSignatureRequired?: boolean
  description?: boolean
  isActive?: boolean
  formType?: boolean
  Company?: boolean | Prisma.CompanyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formTemplate"]>

export type FormTemplateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  companyId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isSignatureRequired?: boolean
  description?: boolean
  isActive?: boolean
  formType?: boolean
  Company?: boolean | Prisma.CompanyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formTemplate"]>

export type FormTemplateSelectScalar = {
  id?: boolean
  companyId?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isSignatureRequired?: boolean
  description?: boolean
  isActive?: boolean
  formType?: boolean
}

export type FormTemplateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "companyId" | "name" | "createdAt" | "updatedAt" | "isSignatureRequired" | "description" | "isActive" | "formType", ExtArgs["result"]["formTemplate"]>
export type FormTemplateInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Submissions?: boolean | Prisma.FormTemplate$SubmissionsArgs<ExtArgs>
  Company?: boolean | Prisma.CompanyDefaultArgs<ExtArgs>
  FormGrouping?: boolean | Prisma.FormTemplate$FormGroupingArgs<ExtArgs>
  _count?: boolean | Prisma.FormTemplateCountOutputTypeDefaultArgs<ExtArgs>
}
export type FormTemplateIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Company?: boolean | Prisma.CompanyDefaultArgs<ExtArgs>
}
export type FormTemplateIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Company?: boolean | Prisma.CompanyDefaultArgs<ExtArgs>
}

export type $FormTemplatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormTemplate"
  objects: {
    Submissions: Prisma.$FormSubmissionPayload<ExtArgs>[]
    Company: Prisma.$CompanyPayload<ExtArgs>
    FormGrouping: Prisma.$FormGroupingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    companyId: string
    name: string
    createdAt: Date
    updatedAt: Date
    isSignatureRequired: boolean
    description: string | null
    isActive: $Enums.FormTemplateStatus
    formType: $Enums.FormTemplateCategory
  }, ExtArgs["result"]["formTemplate"]>
  composites: {}
}

export type FormTemplateGetPayload<S extends boolean | null | undefined | FormTemplateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload, S>

export type FormTemplateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormTemplateCountAggregateInputType | true
  }

export interface FormTemplateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormTemplate'], meta: { name: 'FormTemplate' } }
  /**
   * Find zero or one FormTemplate that matches the filter.
   * @param {FormTemplateFindUniqueArgs} args - Arguments to find a FormTemplate
   * @example
   * // Get one FormTemplate
   * const formTemplate = await prisma.formTemplate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormTemplateFindUniqueArgs>(args: Prisma.SelectSubset<T, FormTemplateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormTemplate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormTemplateFindUniqueOrThrowArgs} args - Arguments to find a FormTemplate
   * @example
   * // Get one FormTemplate
   * const formTemplate = await prisma.formTemplate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormTemplateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormTemplate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateFindFirstArgs} args - Arguments to find a FormTemplate
   * @example
   * // Get one FormTemplate
   * const formTemplate = await prisma.formTemplate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormTemplateFindFirstArgs>(args?: Prisma.SelectSubset<T, FormTemplateFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormTemplate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateFindFirstOrThrowArgs} args - Arguments to find a FormTemplate
   * @example
   * // Get one FormTemplate
   * const formTemplate = await prisma.formTemplate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormTemplateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormTemplates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormTemplates
   * const formTemplates = await prisma.formTemplate.findMany()
   * 
   * // Get first 10 FormTemplates
   * const formTemplates = await prisma.formTemplate.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formTemplateWithIdOnly = await prisma.formTemplate.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormTemplateFindManyArgs>(args?: Prisma.SelectSubset<T, FormTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormTemplate.
   * @param {FormTemplateCreateArgs} args - Arguments to create a FormTemplate.
   * @example
   * // Create one FormTemplate
   * const FormTemplate = await prisma.formTemplate.create({
   *   data: {
   *     // ... data to create a FormTemplate
   *   }
   * })
   * 
   */
  create<T extends FormTemplateCreateArgs>(args: Prisma.SelectSubset<T, FormTemplateCreateArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormTemplates.
   * @param {FormTemplateCreateManyArgs} args - Arguments to create many FormTemplates.
   * @example
   * // Create many FormTemplates
   * const formTemplate = await prisma.formTemplate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormTemplateCreateManyArgs>(args?: Prisma.SelectSubset<T, FormTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormTemplates and returns the data saved in the database.
   * @param {FormTemplateCreateManyAndReturnArgs} args - Arguments to create many FormTemplates.
   * @example
   * // Create many FormTemplates
   * const formTemplate = await prisma.formTemplate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormTemplates and only return the `id`
   * const formTemplateWithIdOnly = await prisma.formTemplate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormTemplateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormTemplate.
   * @param {FormTemplateDeleteArgs} args - Arguments to delete one FormTemplate.
   * @example
   * // Delete one FormTemplate
   * const FormTemplate = await prisma.formTemplate.delete({
   *   where: {
   *     // ... filter to delete one FormTemplate
   *   }
   * })
   * 
   */
  delete<T extends FormTemplateDeleteArgs>(args: Prisma.SelectSubset<T, FormTemplateDeleteArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormTemplate.
   * @param {FormTemplateUpdateArgs} args - Arguments to update one FormTemplate.
   * @example
   * // Update one FormTemplate
   * const formTemplate = await prisma.formTemplate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormTemplateUpdateArgs>(args: Prisma.SelectSubset<T, FormTemplateUpdateArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormTemplates.
   * @param {FormTemplateDeleteManyArgs} args - Arguments to filter FormTemplates to delete.
   * @example
   * // Delete a few FormTemplates
   * const { count } = await prisma.formTemplate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormTemplateDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormTemplates
   * const formTemplate = await prisma.formTemplate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormTemplateUpdateManyArgs>(args: Prisma.SelectSubset<T, FormTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormTemplates and returns the data updated in the database.
   * @param {FormTemplateUpdateManyAndReturnArgs} args - Arguments to update many FormTemplates.
   * @example
   * // Update many FormTemplates
   * const formTemplate = await prisma.formTemplate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormTemplates and only return the `id`
   * const formTemplateWithIdOnly = await prisma.formTemplate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormTemplateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormTemplate.
   * @param {FormTemplateUpsertArgs} args - Arguments to update or create a FormTemplate.
   * @example
   * // Update or create a FormTemplate
   * const formTemplate = await prisma.formTemplate.upsert({
   *   create: {
   *     // ... data to create a FormTemplate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormTemplate we want to update
   *   }
   * })
   */
  upsert<T extends FormTemplateUpsertArgs>(args: Prisma.SelectSubset<T, FormTemplateUpsertArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateCountArgs} args - Arguments to filter FormTemplates to count.
   * @example
   * // Count the number of FormTemplates
   * const count = await prisma.formTemplate.count({
   *   where: {
   *     // ... the filter for the FormTemplates we want to count
   *   }
   * })
  **/
  count<T extends FormTemplateCountArgs>(
    args?: Prisma.Subset<T, FormTemplateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormTemplateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormTemplateAggregateArgs>(args: Prisma.Subset<T, FormTemplateAggregateArgs>): Prisma.PrismaPromise<GetFormTemplateAggregateType<T>>

  /**
   * Group by FormTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormTemplateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormTemplateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormTemplateGroupByArgs['orderBy'] }
      : { orderBy?: FormTemplateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormTemplate model
 */
readonly fields: FormTemplateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormTemplate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormTemplateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Submissions<T extends Prisma.FormTemplate$SubmissionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormTemplate$SubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Company<T extends Prisma.CompanyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CompanyDefaultArgs<ExtArgs>>): Prisma.Prisma__CompanyClient<runtime.Types.Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  FormGrouping<T extends Prisma.FormTemplate$FormGroupingArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormTemplate$FormGroupingArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormTemplate model
 */
export interface FormTemplateFieldRefs {
  readonly id: Prisma.FieldRef<"FormTemplate", 'String'>
  readonly companyId: Prisma.FieldRef<"FormTemplate", 'String'>
  readonly name: Prisma.FieldRef<"FormTemplate", 'String'>
  readonly createdAt: Prisma.FieldRef<"FormTemplate", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FormTemplate", 'DateTime'>
  readonly isSignatureRequired: Prisma.FieldRef<"FormTemplate", 'Boolean'>
  readonly description: Prisma.FieldRef<"FormTemplate", 'String'>
  readonly isActive: Prisma.FieldRef<"FormTemplate", 'FormTemplateStatus'>
  readonly formType: Prisma.FieldRef<"FormTemplate", 'FormTemplateCategory'>
}
    

// Custom InputTypes
/**
 * FormTemplate findUnique
 */
export type FormTemplateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FormTemplate to fetch.
   */
  where: Prisma.FormTemplateWhereUniqueInput
}

/**
 * FormTemplate findUniqueOrThrow
 */
export type FormTemplateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FormTemplate to fetch.
   */
  where: Prisma.FormTemplateWhereUniqueInput
}

/**
 * FormTemplate findFirst
 */
export type FormTemplateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FormTemplate to fetch.
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormTemplates to fetch.
   */
  orderBy?: Prisma.FormTemplateOrderByWithRelationInput | Prisma.FormTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormTemplates.
   */
  cursor?: Prisma.FormTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormTemplates.
   */
  distinct?: Prisma.FormTemplateScalarFieldEnum | Prisma.FormTemplateScalarFieldEnum[]
}

/**
 * FormTemplate findFirstOrThrow
 */
export type FormTemplateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FormTemplate to fetch.
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormTemplates to fetch.
   */
  orderBy?: Prisma.FormTemplateOrderByWithRelationInput | Prisma.FormTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormTemplates.
   */
  cursor?: Prisma.FormTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormTemplates.
   */
  distinct?: Prisma.FormTemplateScalarFieldEnum | Prisma.FormTemplateScalarFieldEnum[]
}

/**
 * FormTemplate findMany
 */
export type FormTemplateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FormTemplates to fetch.
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormTemplates to fetch.
   */
  orderBy?: Prisma.FormTemplateOrderByWithRelationInput | Prisma.FormTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormTemplates.
   */
  cursor?: Prisma.FormTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormTemplates.
   */
  skip?: number
  distinct?: Prisma.FormTemplateScalarFieldEnum | Prisma.FormTemplateScalarFieldEnum[]
}

/**
 * FormTemplate create
 */
export type FormTemplateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * The data needed to create a FormTemplate.
   */
  data: Prisma.XOR<Prisma.FormTemplateCreateInput, Prisma.FormTemplateUncheckedCreateInput>
}

/**
 * FormTemplate createMany
 */
export type FormTemplateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormTemplates.
   */
  data: Prisma.FormTemplateCreateManyInput | Prisma.FormTemplateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormTemplate createManyAndReturn
 */
export type FormTemplateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * The data used to create many FormTemplates.
   */
  data: Prisma.FormTemplateCreateManyInput | Prisma.FormTemplateCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormTemplate update
 */
export type FormTemplateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * The data needed to update a FormTemplate.
   */
  data: Prisma.XOR<Prisma.FormTemplateUpdateInput, Prisma.FormTemplateUncheckedUpdateInput>
  /**
   * Choose, which FormTemplate to update.
   */
  where: Prisma.FormTemplateWhereUniqueInput
}

/**
 * FormTemplate updateMany
 */
export type FormTemplateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormTemplates.
   */
  data: Prisma.XOR<Prisma.FormTemplateUpdateManyMutationInput, Prisma.FormTemplateUncheckedUpdateManyInput>
  /**
   * Filter which FormTemplates to update
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * Limit how many FormTemplates to update.
   */
  limit?: number
}

/**
 * FormTemplate updateManyAndReturn
 */
export type FormTemplateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * The data used to update FormTemplates.
   */
  data: Prisma.XOR<Prisma.FormTemplateUpdateManyMutationInput, Prisma.FormTemplateUncheckedUpdateManyInput>
  /**
   * Filter which FormTemplates to update
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * Limit how many FormTemplates to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormTemplate upsert
 */
export type FormTemplateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * The filter to search for the FormTemplate to update in case it exists.
   */
  where: Prisma.FormTemplateWhereUniqueInput
  /**
   * In case the FormTemplate found by the `where` argument doesn't exist, create a new FormTemplate with this data.
   */
  create: Prisma.XOR<Prisma.FormTemplateCreateInput, Prisma.FormTemplateUncheckedCreateInput>
  /**
   * In case the FormTemplate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormTemplateUpdateInput, Prisma.FormTemplateUncheckedUpdateInput>
}

/**
 * FormTemplate delete
 */
export type FormTemplateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  /**
   * Filter which FormTemplate to delete.
   */
  where: Prisma.FormTemplateWhereUniqueInput
}

/**
 * FormTemplate deleteMany
 */
export type FormTemplateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormTemplates to delete
   */
  where?: Prisma.FormTemplateWhereInput
  /**
   * Limit how many FormTemplates to delete.
   */
  limit?: number
}

/**
 * FormTemplate.Submissions
 */
export type FormTemplate$SubmissionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  where?: Prisma.FormSubmissionWhereInput
  orderBy?: Prisma.FormSubmissionOrderByWithRelationInput | Prisma.FormSubmissionOrderByWithRelationInput[]
  cursor?: Prisma.FormSubmissionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormSubmissionScalarFieldEnum | Prisma.FormSubmissionScalarFieldEnum[]
}

/**
 * FormTemplate.FormGrouping
 */
export type FormTemplate$FormGroupingArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  where?: Prisma.FormGroupingWhereInput
  orderBy?: Prisma.FormGroupingOrderByWithRelationInput | Prisma.FormGroupingOrderByWithRelationInput[]
  cursor?: Prisma.FormGroupingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormGroupingScalarFieldEnum | Prisma.FormGroupingScalarFieldEnum[]
}

/**
 * FormTemplate without action
 */
export type FormTemplateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
}
