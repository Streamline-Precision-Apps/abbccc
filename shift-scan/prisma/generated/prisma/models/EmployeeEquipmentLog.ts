
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EmployeeEquipmentLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EmployeeEquipmentLog
 * 
 */
export type EmployeeEquipmentLogModel = runtime.Types.Result.DefaultSelection<Prisma.$EmployeeEquipmentLogPayload>

export type AggregateEmployeeEquipmentLog = {
  _count: EmployeeEquipmentLogCountAggregateOutputType | null
  _min: EmployeeEquipmentLogMinAggregateOutputType | null
  _max: EmployeeEquipmentLogMaxAggregateOutputType | null
}

export type EmployeeEquipmentLogMinAggregateOutputType = {
  id: string | null
  timeSheetId: string | null
  equipmentId: string | null
  maintenanceId: string | null
  startTime: Date | null
  endTime: Date | null
  comment: string | null
}

export type EmployeeEquipmentLogMaxAggregateOutputType = {
  id: string | null
  timeSheetId: string | null
  equipmentId: string | null
  maintenanceId: string | null
  startTime: Date | null
  endTime: Date | null
  comment: string | null
}

export type EmployeeEquipmentLogCountAggregateOutputType = {
  id: number
  timeSheetId: number
  equipmentId: number
  maintenanceId: number
  startTime: number
  endTime: number
  comment: number
  _all: number
}


export type EmployeeEquipmentLogMinAggregateInputType = {
  id?: true
  timeSheetId?: true
  equipmentId?: true
  maintenanceId?: true
  startTime?: true
  endTime?: true
  comment?: true
}

export type EmployeeEquipmentLogMaxAggregateInputType = {
  id?: true
  timeSheetId?: true
  equipmentId?: true
  maintenanceId?: true
  startTime?: true
  endTime?: true
  comment?: true
}

export type EmployeeEquipmentLogCountAggregateInputType = {
  id?: true
  timeSheetId?: true
  equipmentId?: true
  maintenanceId?: true
  startTime?: true
  endTime?: true
  comment?: true
  _all?: true
}

export type EmployeeEquipmentLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmployeeEquipmentLog to aggregate.
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmployeeEquipmentLogs to fetch.
   */
  orderBy?: Prisma.EmployeeEquipmentLogOrderByWithRelationInput | Prisma.EmployeeEquipmentLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmployeeEquipmentLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmployeeEquipmentLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmployeeEquipmentLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmployeeEquipmentLogs
  **/
  _count?: true | EmployeeEquipmentLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmployeeEquipmentLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmployeeEquipmentLogMaxAggregateInputType
}

export type GetEmployeeEquipmentLogAggregateType<T extends EmployeeEquipmentLogAggregateArgs> = {
      [P in keyof T & keyof AggregateEmployeeEquipmentLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmployeeEquipmentLog[P]>
    : Prisma.GetScalarType<T[P], AggregateEmployeeEquipmentLog[P]>
}




export type EmployeeEquipmentLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmployeeEquipmentLogWhereInput
  orderBy?: Prisma.EmployeeEquipmentLogOrderByWithAggregationInput | Prisma.EmployeeEquipmentLogOrderByWithAggregationInput[]
  by: Prisma.EmployeeEquipmentLogScalarFieldEnum[] | Prisma.EmployeeEquipmentLogScalarFieldEnum
  having?: Prisma.EmployeeEquipmentLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmployeeEquipmentLogCountAggregateInputType | true
  _min?: EmployeeEquipmentLogMinAggregateInputType
  _max?: EmployeeEquipmentLogMaxAggregateInputType
}

export type EmployeeEquipmentLogGroupByOutputType = {
  id: string
  timeSheetId: string
  equipmentId: string | null
  maintenanceId: string | null
  startTime: Date
  endTime: Date | null
  comment: string | null
  _count: EmployeeEquipmentLogCountAggregateOutputType | null
  _min: EmployeeEquipmentLogMinAggregateOutputType | null
  _max: EmployeeEquipmentLogMaxAggregateOutputType | null
}

type GetEmployeeEquipmentLogGroupByPayload<T extends EmployeeEquipmentLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmployeeEquipmentLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmployeeEquipmentLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmployeeEquipmentLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmployeeEquipmentLogGroupByOutputType[P]>
      }
    >
  >



export type EmployeeEquipmentLogWhereInput = {
  AND?: Prisma.EmployeeEquipmentLogWhereInput | Prisma.EmployeeEquipmentLogWhereInput[]
  OR?: Prisma.EmployeeEquipmentLogWhereInput[]
  NOT?: Prisma.EmployeeEquipmentLogWhereInput | Prisma.EmployeeEquipmentLogWhereInput[]
  id?: Prisma.StringFilter<"EmployeeEquipmentLog"> | string
  timeSheetId?: Prisma.StringFilter<"EmployeeEquipmentLog"> | string
  equipmentId?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  maintenanceId?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  startTime?: Prisma.DateTimeFilter<"EmployeeEquipmentLog"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"EmployeeEquipmentLog"> | Date | string | null
  comment?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  Equipment?: Prisma.XOR<Prisma.EquipmentNullableScalarRelationFilter, Prisma.EquipmentWhereInput> | null
  Maintenance?: Prisma.XOR<Prisma.MaintenanceNullableScalarRelationFilter, Prisma.MaintenanceWhereInput> | null
  TimeSheet?: Prisma.XOR<Prisma.TimeSheetScalarRelationFilter, Prisma.TimeSheetWhereInput>
  RefuelLog?: Prisma.XOR<Prisma.RefuelLogNullableScalarRelationFilter, Prisma.RefuelLogWhereInput> | null
}

export type EmployeeEquipmentLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  maintenanceId?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  Equipment?: Prisma.EquipmentOrderByWithRelationInput
  Maintenance?: Prisma.MaintenanceOrderByWithRelationInput
  TimeSheet?: Prisma.TimeSheetOrderByWithRelationInput
  RefuelLog?: Prisma.RefuelLogOrderByWithRelationInput
}

export type EmployeeEquipmentLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmployeeEquipmentLogWhereInput | Prisma.EmployeeEquipmentLogWhereInput[]
  OR?: Prisma.EmployeeEquipmentLogWhereInput[]
  NOT?: Prisma.EmployeeEquipmentLogWhereInput | Prisma.EmployeeEquipmentLogWhereInput[]
  timeSheetId?: Prisma.StringFilter<"EmployeeEquipmentLog"> | string
  equipmentId?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  maintenanceId?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  startTime?: Prisma.DateTimeFilter<"EmployeeEquipmentLog"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"EmployeeEquipmentLog"> | Date | string | null
  comment?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  Equipment?: Prisma.XOR<Prisma.EquipmentNullableScalarRelationFilter, Prisma.EquipmentWhereInput> | null
  Maintenance?: Prisma.XOR<Prisma.MaintenanceNullableScalarRelationFilter, Prisma.MaintenanceWhereInput> | null
  TimeSheet?: Prisma.XOR<Prisma.TimeSheetScalarRelationFilter, Prisma.TimeSheetWhereInput>
  RefuelLog?: Prisma.XOR<Prisma.RefuelLogNullableScalarRelationFilter, Prisma.RefuelLogWhereInput> | null
}, "id">

export type EmployeeEquipmentLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  maintenanceId?: Prisma.SortOrderInput | Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.EmployeeEquipmentLogCountOrderByAggregateInput
  _max?: Prisma.EmployeeEquipmentLogMaxOrderByAggregateInput
  _min?: Prisma.EmployeeEquipmentLogMinOrderByAggregateInput
}

export type EmployeeEquipmentLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmployeeEquipmentLogScalarWhereWithAggregatesInput | Prisma.EmployeeEquipmentLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmployeeEquipmentLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmployeeEquipmentLogScalarWhereWithAggregatesInput | Prisma.EmployeeEquipmentLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EmployeeEquipmentLog"> | string
  timeSheetId?: Prisma.StringWithAggregatesFilter<"EmployeeEquipmentLog"> | string
  equipmentId?: Prisma.StringNullableWithAggregatesFilter<"EmployeeEquipmentLog"> | string | null
  maintenanceId?: Prisma.StringNullableWithAggregatesFilter<"EmployeeEquipmentLog"> | string | null
  startTime?: Prisma.DateTimeWithAggregatesFilter<"EmployeeEquipmentLog"> | Date | string
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"EmployeeEquipmentLog"> | Date | string | null
  comment?: Prisma.StringNullableWithAggregatesFilter<"EmployeeEquipmentLog"> | string | null
}

export type EmployeeEquipmentLogCreateInput = {
  id?: string
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutEmployeeEquipmentLogsInput
  Maintenance?: Prisma.MaintenanceCreateNestedOneWithoutEmployeeEquipmentLogInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutEmployeeEquipmentLogsInput
  RefuelLog?: Prisma.RefuelLogCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogUncheckedCreateInput = {
  id?: string
  timeSheetId: string
  equipmentId?: string | null
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  RefuelLog?: Prisma.RefuelLogUncheckedCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Equipment?: Prisma.EquipmentUpdateOneWithoutEmployeeEquipmentLogsNestedInput
  Maintenance?: Prisma.MaintenanceUpdateOneWithoutEmployeeEquipmentLogNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutEmployeeEquipmentLogsNestedInput
  RefuelLog?: Prisma.RefuelLogUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  RefuelLog?: Prisma.RefuelLogUncheckedUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogCreateManyInput = {
  id?: string
  timeSheetId: string
  equipmentId?: string | null
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type EmployeeEquipmentLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EmployeeEquipmentLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EmployeeEquipmentLogListRelationFilter = {
  every?: Prisma.EmployeeEquipmentLogWhereInput
  some?: Prisma.EmployeeEquipmentLogWhereInput
  none?: Prisma.EmployeeEquipmentLogWhereInput
}

export type EmployeeEquipmentLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmployeeEquipmentLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type EmployeeEquipmentLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type EmployeeEquipmentLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  equipmentId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type EmployeeEquipmentLogNullableScalarRelationFilter = {
  is?: Prisma.EmployeeEquipmentLogWhereInput | null
  isNot?: Prisma.EmployeeEquipmentLogWhereInput | null
}

export type EmployeeEquipmentLogCreateNestedManyWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput> | Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyEquipmentInputEnvelope
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
}

export type EmployeeEquipmentLogUncheckedCreateNestedManyWithoutEquipmentInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput> | Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyEquipmentInputEnvelope
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
}

export type EmployeeEquipmentLogUpdateManyWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput> | Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput[]
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutEquipmentInput | Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutEquipmentInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyEquipmentInputEnvelope
  set?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  disconnect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  delete?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  update?: Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutEquipmentInput | Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutEquipmentInput[]
  updateMany?: Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutEquipmentInput | Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutEquipmentInput[]
  deleteMany?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
}

export type EmployeeEquipmentLogUncheckedUpdateManyWithoutEquipmentNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput> | Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput[]
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutEquipmentInput | Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutEquipmentInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyEquipmentInputEnvelope
  set?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  disconnect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  delete?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  update?: Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutEquipmentInput | Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutEquipmentInput[]
  updateMany?: Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutEquipmentInput | Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutEquipmentInput[]
  deleteMany?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
}

export type EmployeeEquipmentLogCreateNestedManyWithoutTimeSheetInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput> | Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyTimeSheetInputEnvelope
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
}

export type EmployeeEquipmentLogUncheckedCreateNestedManyWithoutTimeSheetInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput> | Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyTimeSheetInputEnvelope
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
}

export type EmployeeEquipmentLogUpdateManyWithoutTimeSheetNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput> | Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput[]
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutTimeSheetInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyTimeSheetInputEnvelope
  set?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  disconnect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  delete?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  update?: Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutTimeSheetInput[]
  updateMany?: Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutTimeSheetInput[]
  deleteMany?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
}

export type EmployeeEquipmentLogUncheckedUpdateManyWithoutTimeSheetNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput> | Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput[]
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutTimeSheetInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyTimeSheetInputEnvelope
  set?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  disconnect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  delete?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  update?: Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutTimeSheetInput[]
  updateMany?: Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutTimeSheetInput | Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutTimeSheetInput[]
  deleteMany?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
}

export type EmployeeEquipmentLogCreateNestedManyWithoutMaintenanceInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput> | Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyMaintenanceInputEnvelope
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
}

export type EmployeeEquipmentLogUncheckedCreateNestedManyWithoutMaintenanceInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput> | Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyMaintenanceInputEnvelope
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
}

export type EmployeeEquipmentLogUpdateManyWithoutMaintenanceNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput> | Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput[]
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutMaintenanceInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyMaintenanceInputEnvelope
  set?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  disconnect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  delete?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  update?: Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutMaintenanceInput[]
  updateMany?: Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutMaintenanceInput[]
  deleteMany?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
}

export type EmployeeEquipmentLogUncheckedUpdateManyWithoutMaintenanceNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput> | Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput[] | Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput[]
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogUpsertWithWhereUniqueWithoutMaintenanceInput[]
  createMany?: Prisma.EmployeeEquipmentLogCreateManyMaintenanceInputEnvelope
  set?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  disconnect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  delete?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput | Prisma.EmployeeEquipmentLogWhereUniqueInput[]
  update?: Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogUpdateWithWhereUniqueWithoutMaintenanceInput[]
  updateMany?: Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutMaintenanceInput | Prisma.EmployeeEquipmentLogUpdateManyWithWhereWithoutMaintenanceInput[]
  deleteMany?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
}

export type EmployeeEquipmentLogCreateNestedOneWithoutRefuelLogInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutRefuelLogInput>
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutRefuelLogInput
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput
}

export type EmployeeEquipmentLogUpdateOneWithoutRefuelLogNestedInput = {
  create?: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutRefuelLogInput>
  connectOrCreate?: Prisma.EmployeeEquipmentLogCreateOrConnectWithoutRefuelLogInput
  upsert?: Prisma.EmployeeEquipmentLogUpsertWithoutRefuelLogInput
  disconnect?: Prisma.EmployeeEquipmentLogWhereInput | boolean
  delete?: Prisma.EmployeeEquipmentLogWhereInput | boolean
  connect?: Prisma.EmployeeEquipmentLogWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateToOneWithWhereWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUpdateWithoutRefuelLogInput>, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutRefuelLogInput>
}

export type EmployeeEquipmentLogCreateWithoutEquipmentInput = {
  id?: string
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Maintenance?: Prisma.MaintenanceCreateNestedOneWithoutEmployeeEquipmentLogInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutEmployeeEquipmentLogsInput
  RefuelLog?: Prisma.RefuelLogCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput = {
  id?: string
  timeSheetId: string
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  RefuelLog?: Prisma.RefuelLogUncheckedCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogCreateOrConnectWithoutEquipmentInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput>
}

export type EmployeeEquipmentLogCreateManyEquipmentInputEnvelope = {
  data: Prisma.EmployeeEquipmentLogCreateManyEquipmentInput | Prisma.EmployeeEquipmentLogCreateManyEquipmentInput[]
  skipDuplicates?: boolean
}

export type EmployeeEquipmentLogUpsertWithWhereUniqueWithoutEquipmentInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  update: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutEquipmentInput>
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutEquipmentInput>
}

export type EmployeeEquipmentLogUpdateWithWhereUniqueWithoutEquipmentInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutEquipmentInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutEquipmentInput>
}

export type EmployeeEquipmentLogUpdateManyWithWhereWithoutEquipmentInput = {
  where: Prisma.EmployeeEquipmentLogScalarWhereInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateManyMutationInput, Prisma.EmployeeEquipmentLogUncheckedUpdateManyWithoutEquipmentInput>
}

export type EmployeeEquipmentLogScalarWhereInput = {
  AND?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
  OR?: Prisma.EmployeeEquipmentLogScalarWhereInput[]
  NOT?: Prisma.EmployeeEquipmentLogScalarWhereInput | Prisma.EmployeeEquipmentLogScalarWhereInput[]
  id?: Prisma.StringFilter<"EmployeeEquipmentLog"> | string
  timeSheetId?: Prisma.StringFilter<"EmployeeEquipmentLog"> | string
  equipmentId?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  maintenanceId?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
  startTime?: Prisma.DateTimeFilter<"EmployeeEquipmentLog"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"EmployeeEquipmentLog"> | Date | string | null
  comment?: Prisma.StringNullableFilter<"EmployeeEquipmentLog"> | string | null
}

export type EmployeeEquipmentLogCreateWithoutTimeSheetInput = {
  id?: string
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutEmployeeEquipmentLogsInput
  Maintenance?: Prisma.MaintenanceCreateNestedOneWithoutEmployeeEquipmentLogInput
  RefuelLog?: Prisma.RefuelLogCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput = {
  id?: string
  equipmentId?: string | null
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  RefuelLog?: Prisma.RefuelLogUncheckedCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogCreateOrConnectWithoutTimeSheetInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput>
}

export type EmployeeEquipmentLogCreateManyTimeSheetInputEnvelope = {
  data: Prisma.EmployeeEquipmentLogCreateManyTimeSheetInput | Prisma.EmployeeEquipmentLogCreateManyTimeSheetInput[]
  skipDuplicates?: boolean
}

export type EmployeeEquipmentLogUpsertWithWhereUniqueWithoutTimeSheetInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  update: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutTimeSheetInput>
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutTimeSheetInput>
}

export type EmployeeEquipmentLogUpdateWithWhereUniqueWithoutTimeSheetInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutTimeSheetInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutTimeSheetInput>
}

export type EmployeeEquipmentLogUpdateManyWithWhereWithoutTimeSheetInput = {
  where: Prisma.EmployeeEquipmentLogScalarWhereInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateManyMutationInput, Prisma.EmployeeEquipmentLogUncheckedUpdateManyWithoutTimeSheetInput>
}

export type EmployeeEquipmentLogCreateWithoutMaintenanceInput = {
  id?: string
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutEmployeeEquipmentLogsInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutEmployeeEquipmentLogsInput
  RefuelLog?: Prisma.RefuelLogCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput = {
  id?: string
  timeSheetId: string
  equipmentId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  RefuelLog?: Prisma.RefuelLogUncheckedCreateNestedOneWithoutEmployeeEquipmentLogInput
}

export type EmployeeEquipmentLogCreateOrConnectWithoutMaintenanceInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput>
}

export type EmployeeEquipmentLogCreateManyMaintenanceInputEnvelope = {
  data: Prisma.EmployeeEquipmentLogCreateManyMaintenanceInput | Prisma.EmployeeEquipmentLogCreateManyMaintenanceInput[]
  skipDuplicates?: boolean
}

export type EmployeeEquipmentLogUpsertWithWhereUniqueWithoutMaintenanceInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  update: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutMaintenanceInput>
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutMaintenanceInput>
}

export type EmployeeEquipmentLogUpdateWithWhereUniqueWithoutMaintenanceInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutMaintenanceInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutMaintenanceInput>
}

export type EmployeeEquipmentLogUpdateManyWithWhereWithoutMaintenanceInput = {
  where: Prisma.EmployeeEquipmentLogScalarWhereInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateManyMutationInput, Prisma.EmployeeEquipmentLogUncheckedUpdateManyWithoutMaintenanceInput>
}

export type EmployeeEquipmentLogCreateWithoutRefuelLogInput = {
  id?: string
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Equipment?: Prisma.EquipmentCreateNestedOneWithoutEmployeeEquipmentLogsInput
  Maintenance?: Prisma.MaintenanceCreateNestedOneWithoutEmployeeEquipmentLogInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutEmployeeEquipmentLogsInput
}

export type EmployeeEquipmentLogUncheckedCreateWithoutRefuelLogInput = {
  id?: string
  timeSheetId: string
  equipmentId?: string | null
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type EmployeeEquipmentLogCreateOrConnectWithoutRefuelLogInput = {
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutRefuelLogInput>
}

export type EmployeeEquipmentLogUpsertWithoutRefuelLogInput = {
  update: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutRefuelLogInput>
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUncheckedCreateWithoutRefuelLogInput>
  where?: Prisma.EmployeeEquipmentLogWhereInput
}

export type EmployeeEquipmentLogUpdateToOneWithWhereWithoutRefuelLogInput = {
  where?: Prisma.EmployeeEquipmentLogWhereInput
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateWithoutRefuelLogInput, Prisma.EmployeeEquipmentLogUncheckedUpdateWithoutRefuelLogInput>
}

export type EmployeeEquipmentLogUpdateWithoutRefuelLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Equipment?: Prisma.EquipmentUpdateOneWithoutEmployeeEquipmentLogsNestedInput
  Maintenance?: Prisma.MaintenanceUpdateOneWithoutEmployeeEquipmentLogNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutEmployeeEquipmentLogsNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateWithoutRefuelLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EmployeeEquipmentLogCreateManyEquipmentInput = {
  id?: string
  timeSheetId: string
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type EmployeeEquipmentLogUpdateWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Maintenance?: Prisma.MaintenanceUpdateOneWithoutEmployeeEquipmentLogNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutEmployeeEquipmentLogsNestedInput
  RefuelLog?: Prisma.RefuelLogUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  RefuelLog?: Prisma.RefuelLogUncheckedUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateManyWithoutEquipmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EmployeeEquipmentLogCreateManyTimeSheetInput = {
  id?: string
  equipmentId?: string | null
  maintenanceId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type EmployeeEquipmentLogUpdateWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Equipment?: Prisma.EquipmentUpdateOneWithoutEmployeeEquipmentLogsNestedInput
  Maintenance?: Prisma.MaintenanceUpdateOneWithoutEmployeeEquipmentLogNestedInput
  RefuelLog?: Prisma.RefuelLogUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  RefuelLog?: Prisma.RefuelLogUncheckedUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateManyWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maintenanceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type EmployeeEquipmentLogCreateManyMaintenanceInput = {
  id?: string
  timeSheetId: string
  equipmentId?: string | null
  startTime?: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type EmployeeEquipmentLogUpdateWithoutMaintenanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Equipment?: Prisma.EquipmentUpdateOneWithoutEmployeeEquipmentLogsNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutEmployeeEquipmentLogsNestedInput
  RefuelLog?: Prisma.RefuelLogUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateWithoutMaintenanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  RefuelLog?: Prisma.RefuelLogUncheckedUpdateOneWithoutEmployeeEquipmentLogNestedInput
}

export type EmployeeEquipmentLogUncheckedUpdateManyWithoutMaintenanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  equipmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type EmployeeEquipmentLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  equipmentId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
  Equipment?: boolean | Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>
  Maintenance?: boolean | Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  RefuelLog?: boolean | Prisma.EmployeeEquipmentLog$RefuelLogArgs<ExtArgs>
}, ExtArgs["result"]["employeeEquipmentLog"]>

export type EmployeeEquipmentLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  equipmentId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
  Equipment?: boolean | Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>
  Maintenance?: boolean | Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employeeEquipmentLog"]>

export type EmployeeEquipmentLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  equipmentId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
  Equipment?: boolean | Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>
  Maintenance?: boolean | Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employeeEquipmentLog"]>

export type EmployeeEquipmentLogSelectScalar = {
  id?: boolean
  timeSheetId?: boolean
  equipmentId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
}

export type EmployeeEquipmentLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "timeSheetId" | "equipmentId" | "maintenanceId" | "startTime" | "endTime" | "comment", ExtArgs["result"]["employeeEquipmentLog"]>
export type EmployeeEquipmentLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>
  Maintenance?: boolean | Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  RefuelLog?: boolean | Prisma.EmployeeEquipmentLog$RefuelLogArgs<ExtArgs>
}
export type EmployeeEquipmentLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>
  Maintenance?: boolean | Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}
export type EmployeeEquipmentLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Equipment?: boolean | Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>
  Maintenance?: boolean | Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
}

export type $EmployeeEquipmentLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmployeeEquipmentLog"
  objects: {
    Equipment: Prisma.$EquipmentPayload<ExtArgs> | null
    Maintenance: Prisma.$MaintenancePayload<ExtArgs> | null
    TimeSheet: Prisma.$TimeSheetPayload<ExtArgs>
    RefuelLog: Prisma.$RefuelLogPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    timeSheetId: string
    equipmentId: string | null
    maintenanceId: string | null
    startTime: Date
    endTime: Date | null
    comment: string | null
  }, ExtArgs["result"]["employeeEquipmentLog"]>
  composites: {}
}

export type EmployeeEquipmentLogGetPayload<S extends boolean | null | undefined | EmployeeEquipmentLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload, S>

export type EmployeeEquipmentLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmployeeEquipmentLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmployeeEquipmentLogCountAggregateInputType | true
  }

export interface EmployeeEquipmentLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeEquipmentLog'], meta: { name: 'EmployeeEquipmentLog' } }
  /**
   * Find zero or one EmployeeEquipmentLog that matches the filter.
   * @param {EmployeeEquipmentLogFindUniqueArgs} args - Arguments to find a EmployeeEquipmentLog
   * @example
   * // Get one EmployeeEquipmentLog
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmployeeEquipmentLogFindUniqueArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmployeeEquipmentLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmployeeEquipmentLogFindUniqueOrThrowArgs} args - Arguments to find a EmployeeEquipmentLog
   * @example
   * // Get one EmployeeEquipmentLog
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmployeeEquipmentLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmployeeEquipmentLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogFindFirstArgs} args - Arguments to find a EmployeeEquipmentLog
   * @example
   * // Get one EmployeeEquipmentLog
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmployeeEquipmentLogFindFirstArgs>(args?: Prisma.SelectSubset<T, EmployeeEquipmentLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmployeeEquipmentLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogFindFirstOrThrowArgs} args - Arguments to find a EmployeeEquipmentLog
   * @example
   * // Get one EmployeeEquipmentLog
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmployeeEquipmentLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmployeeEquipmentLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmployeeEquipmentLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmployeeEquipmentLogs
   * const employeeEquipmentLogs = await prisma.employeeEquipmentLog.findMany()
   * 
   * // Get first 10 EmployeeEquipmentLogs
   * const employeeEquipmentLogs = await prisma.employeeEquipmentLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const employeeEquipmentLogWithIdOnly = await prisma.employeeEquipmentLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmployeeEquipmentLogFindManyArgs>(args?: Prisma.SelectSubset<T, EmployeeEquipmentLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmployeeEquipmentLog.
   * @param {EmployeeEquipmentLogCreateArgs} args - Arguments to create a EmployeeEquipmentLog.
   * @example
   * // Create one EmployeeEquipmentLog
   * const EmployeeEquipmentLog = await prisma.employeeEquipmentLog.create({
   *   data: {
   *     // ... data to create a EmployeeEquipmentLog
   *   }
   * })
   * 
   */
  create<T extends EmployeeEquipmentLogCreateArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogCreateArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmployeeEquipmentLogs.
   * @param {EmployeeEquipmentLogCreateManyArgs} args - Arguments to create many EmployeeEquipmentLogs.
   * @example
   * // Create many EmployeeEquipmentLogs
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmployeeEquipmentLogCreateManyArgs>(args?: Prisma.SelectSubset<T, EmployeeEquipmentLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmployeeEquipmentLogs and returns the data saved in the database.
   * @param {EmployeeEquipmentLogCreateManyAndReturnArgs} args - Arguments to create many EmployeeEquipmentLogs.
   * @example
   * // Create many EmployeeEquipmentLogs
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmployeeEquipmentLogs and only return the `id`
   * const employeeEquipmentLogWithIdOnly = await prisma.employeeEquipmentLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmployeeEquipmentLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmployeeEquipmentLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmployeeEquipmentLog.
   * @param {EmployeeEquipmentLogDeleteArgs} args - Arguments to delete one EmployeeEquipmentLog.
   * @example
   * // Delete one EmployeeEquipmentLog
   * const EmployeeEquipmentLog = await prisma.employeeEquipmentLog.delete({
   *   where: {
   *     // ... filter to delete one EmployeeEquipmentLog
   *   }
   * })
   * 
   */
  delete<T extends EmployeeEquipmentLogDeleteArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogDeleteArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmployeeEquipmentLog.
   * @param {EmployeeEquipmentLogUpdateArgs} args - Arguments to update one EmployeeEquipmentLog.
   * @example
   * // Update one EmployeeEquipmentLog
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmployeeEquipmentLogUpdateArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogUpdateArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmployeeEquipmentLogs.
   * @param {EmployeeEquipmentLogDeleteManyArgs} args - Arguments to filter EmployeeEquipmentLogs to delete.
   * @example
   * // Delete a few EmployeeEquipmentLogs
   * const { count } = await prisma.employeeEquipmentLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmployeeEquipmentLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmployeeEquipmentLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmployeeEquipmentLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmployeeEquipmentLogs
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmployeeEquipmentLogUpdateManyArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmployeeEquipmentLogs and returns the data updated in the database.
   * @param {EmployeeEquipmentLogUpdateManyAndReturnArgs} args - Arguments to update many EmployeeEquipmentLogs.
   * @example
   * // Update many EmployeeEquipmentLogs
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmployeeEquipmentLogs and only return the `id`
   * const employeeEquipmentLogWithIdOnly = await prisma.employeeEquipmentLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmployeeEquipmentLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmployeeEquipmentLog.
   * @param {EmployeeEquipmentLogUpsertArgs} args - Arguments to update or create a EmployeeEquipmentLog.
   * @example
   * // Update or create a EmployeeEquipmentLog
   * const employeeEquipmentLog = await prisma.employeeEquipmentLog.upsert({
   *   create: {
   *     // ... data to create a EmployeeEquipmentLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmployeeEquipmentLog we want to update
   *   }
   * })
   */
  upsert<T extends EmployeeEquipmentLogUpsertArgs>(args: Prisma.SelectSubset<T, EmployeeEquipmentLogUpsertArgs<ExtArgs>>): Prisma.Prisma__EmployeeEquipmentLogClient<runtime.Types.Result.GetResult<Prisma.$EmployeeEquipmentLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmployeeEquipmentLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogCountArgs} args - Arguments to filter EmployeeEquipmentLogs to count.
   * @example
   * // Count the number of EmployeeEquipmentLogs
   * const count = await prisma.employeeEquipmentLog.count({
   *   where: {
   *     // ... the filter for the EmployeeEquipmentLogs we want to count
   *   }
   * })
  **/
  count<T extends EmployeeEquipmentLogCountArgs>(
    args?: Prisma.Subset<T, EmployeeEquipmentLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmployeeEquipmentLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmployeeEquipmentLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmployeeEquipmentLogAggregateArgs>(args: Prisma.Subset<T, EmployeeEquipmentLogAggregateArgs>): Prisma.PrismaPromise<GetEmployeeEquipmentLogAggregateType<T>>

  /**
   * Group by EmployeeEquipmentLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmployeeEquipmentLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmployeeEquipmentLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmployeeEquipmentLogGroupByArgs['orderBy'] }
      : { orderBy?: EmployeeEquipmentLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmployeeEquipmentLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeEquipmentLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmployeeEquipmentLog model
 */
readonly fields: EmployeeEquipmentLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmployeeEquipmentLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmployeeEquipmentLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Equipment<T extends Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmployeeEquipmentLog$EquipmentArgs<ExtArgs>>): Prisma.Prisma__EquipmentClient<runtime.Types.Result.GetResult<Prisma.$EquipmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  Maintenance<T extends Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmployeeEquipmentLog$MaintenanceArgs<ExtArgs>>): Prisma.Prisma__MaintenanceClient<runtime.Types.Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  TimeSheet<T extends Prisma.TimeSheetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TimeSheetDefaultArgs<ExtArgs>>): Prisma.Prisma__TimeSheetClient<runtime.Types.Result.GetResult<Prisma.$TimeSheetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  RefuelLog<T extends Prisma.EmployeeEquipmentLog$RefuelLogArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmployeeEquipmentLog$RefuelLogArgs<ExtArgs>>): Prisma.Prisma__RefuelLogClient<runtime.Types.Result.GetResult<Prisma.$RefuelLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmployeeEquipmentLog model
 */
export interface EmployeeEquipmentLogFieldRefs {
  readonly id: Prisma.FieldRef<"EmployeeEquipmentLog", 'String'>
  readonly timeSheetId: Prisma.FieldRef<"EmployeeEquipmentLog", 'String'>
  readonly equipmentId: Prisma.FieldRef<"EmployeeEquipmentLog", 'String'>
  readonly maintenanceId: Prisma.FieldRef<"EmployeeEquipmentLog", 'String'>
  readonly startTime: Prisma.FieldRef<"EmployeeEquipmentLog", 'DateTime'>
  readonly endTime: Prisma.FieldRef<"EmployeeEquipmentLog", 'DateTime'>
  readonly comment: Prisma.FieldRef<"EmployeeEquipmentLog", 'String'>
}
    

// Custom InputTypes
/**
 * EmployeeEquipmentLog findUnique
 */
export type EmployeeEquipmentLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * Filter, which EmployeeEquipmentLog to fetch.
   */
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
}

/**
 * EmployeeEquipmentLog findUniqueOrThrow
 */
export type EmployeeEquipmentLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * Filter, which EmployeeEquipmentLog to fetch.
   */
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
}

/**
 * EmployeeEquipmentLog findFirst
 */
export type EmployeeEquipmentLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * Filter, which EmployeeEquipmentLog to fetch.
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmployeeEquipmentLogs to fetch.
   */
  orderBy?: Prisma.EmployeeEquipmentLogOrderByWithRelationInput | Prisma.EmployeeEquipmentLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmployeeEquipmentLogs.
   */
  cursor?: Prisma.EmployeeEquipmentLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmployeeEquipmentLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmployeeEquipmentLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmployeeEquipmentLogs.
   */
  distinct?: Prisma.EmployeeEquipmentLogScalarFieldEnum | Prisma.EmployeeEquipmentLogScalarFieldEnum[]
}

/**
 * EmployeeEquipmentLog findFirstOrThrow
 */
export type EmployeeEquipmentLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * Filter, which EmployeeEquipmentLog to fetch.
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmployeeEquipmentLogs to fetch.
   */
  orderBy?: Prisma.EmployeeEquipmentLogOrderByWithRelationInput | Prisma.EmployeeEquipmentLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmployeeEquipmentLogs.
   */
  cursor?: Prisma.EmployeeEquipmentLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmployeeEquipmentLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmployeeEquipmentLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmployeeEquipmentLogs.
   */
  distinct?: Prisma.EmployeeEquipmentLogScalarFieldEnum | Prisma.EmployeeEquipmentLogScalarFieldEnum[]
}

/**
 * EmployeeEquipmentLog findMany
 */
export type EmployeeEquipmentLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * Filter, which EmployeeEquipmentLogs to fetch.
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmployeeEquipmentLogs to fetch.
   */
  orderBy?: Prisma.EmployeeEquipmentLogOrderByWithRelationInput | Prisma.EmployeeEquipmentLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmployeeEquipmentLogs.
   */
  cursor?: Prisma.EmployeeEquipmentLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmployeeEquipmentLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmployeeEquipmentLogs.
   */
  skip?: number
  distinct?: Prisma.EmployeeEquipmentLogScalarFieldEnum | Prisma.EmployeeEquipmentLogScalarFieldEnum[]
}

/**
 * EmployeeEquipmentLog create
 */
export type EmployeeEquipmentLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * The data needed to create a EmployeeEquipmentLog.
   */
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateInput, Prisma.EmployeeEquipmentLogUncheckedCreateInput>
}

/**
 * EmployeeEquipmentLog createMany
 */
export type EmployeeEquipmentLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmployeeEquipmentLogs.
   */
  data: Prisma.EmployeeEquipmentLogCreateManyInput | Prisma.EmployeeEquipmentLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmployeeEquipmentLog createManyAndReturn
 */
export type EmployeeEquipmentLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * The data used to create many EmployeeEquipmentLogs.
   */
  data: Prisma.EmployeeEquipmentLogCreateManyInput | Prisma.EmployeeEquipmentLogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmployeeEquipmentLog update
 */
export type EmployeeEquipmentLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * The data needed to update a EmployeeEquipmentLog.
   */
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateInput, Prisma.EmployeeEquipmentLogUncheckedUpdateInput>
  /**
   * Choose, which EmployeeEquipmentLog to update.
   */
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
}

/**
 * EmployeeEquipmentLog updateMany
 */
export type EmployeeEquipmentLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmployeeEquipmentLogs.
   */
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateManyMutationInput, Prisma.EmployeeEquipmentLogUncheckedUpdateManyInput>
  /**
   * Filter which EmployeeEquipmentLogs to update
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * Limit how many EmployeeEquipmentLogs to update.
   */
  limit?: number
}

/**
 * EmployeeEquipmentLog updateManyAndReturn
 */
export type EmployeeEquipmentLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * The data used to update EmployeeEquipmentLogs.
   */
  data: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateManyMutationInput, Prisma.EmployeeEquipmentLogUncheckedUpdateManyInput>
  /**
   * Filter which EmployeeEquipmentLogs to update
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * Limit how many EmployeeEquipmentLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmployeeEquipmentLog upsert
 */
export type EmployeeEquipmentLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * The filter to search for the EmployeeEquipmentLog to update in case it exists.
   */
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
  /**
   * In case the EmployeeEquipmentLog found by the `where` argument doesn't exist, create a new EmployeeEquipmentLog with this data.
   */
  create: Prisma.XOR<Prisma.EmployeeEquipmentLogCreateInput, Prisma.EmployeeEquipmentLogUncheckedCreateInput>
  /**
   * In case the EmployeeEquipmentLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmployeeEquipmentLogUpdateInput, Prisma.EmployeeEquipmentLogUncheckedUpdateInput>
}

/**
 * EmployeeEquipmentLog delete
 */
export type EmployeeEquipmentLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
  /**
   * Filter which EmployeeEquipmentLog to delete.
   */
  where: Prisma.EmployeeEquipmentLogWhereUniqueInput
}

/**
 * EmployeeEquipmentLog deleteMany
 */
export type EmployeeEquipmentLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmployeeEquipmentLogs to delete
   */
  where?: Prisma.EmployeeEquipmentLogWhereInput
  /**
   * Limit how many EmployeeEquipmentLogs to delete.
   */
  limit?: number
}

/**
 * EmployeeEquipmentLog.Equipment
 */
export type EmployeeEquipmentLog$EquipmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Equipment
   */
  select?: Prisma.EquipmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Equipment
   */
  omit?: Prisma.EquipmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EquipmentInclude<ExtArgs> | null
  where?: Prisma.EquipmentWhereInput
}

/**
 * EmployeeEquipmentLog.Maintenance
 */
export type EmployeeEquipmentLog$MaintenanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Maintenance
   */
  select?: Prisma.MaintenanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Maintenance
   */
  omit?: Prisma.MaintenanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceInclude<ExtArgs> | null
  where?: Prisma.MaintenanceWhereInput
}

/**
 * EmployeeEquipmentLog.RefuelLog
 */
export type EmployeeEquipmentLog$RefuelLogArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RefuelLog
   */
  select?: Prisma.RefuelLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RefuelLog
   */
  omit?: Prisma.RefuelLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RefuelLogInclude<ExtArgs> | null
  where?: Prisma.RefuelLogWhereInput
}

/**
 * EmployeeEquipmentLog without action
 */
export type EmployeeEquipmentLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmployeeEquipmentLog
   */
  select?: Prisma.EmployeeEquipmentLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmployeeEquipmentLog
   */
  omit?: Prisma.EmployeeEquipmentLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmployeeEquipmentLogInclude<ExtArgs> | null
}
