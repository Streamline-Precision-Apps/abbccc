
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `StateMileage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StateMileage
 * 
 */
export type StateMileageModel = runtime.Types.Result.DefaultSelection<Prisma.$StateMileagePayload>

export type AggregateStateMileage = {
  _count: StateMileageCountAggregateOutputType | null
  _avg: StateMileageAvgAggregateOutputType | null
  _sum: StateMileageSumAggregateOutputType | null
  _min: StateMileageMinAggregateOutputType | null
  _max: StateMileageMaxAggregateOutputType | null
}

export type StateMileageAvgAggregateOutputType = {
  stateLineMileage: number | null
}

export type StateMileageSumAggregateOutputType = {
  stateLineMileage: number | null
}

export type StateMileageMinAggregateOutputType = {
  id: string | null
  truckingLogId: string | null
  state: string | null
  stateLineMileage: number | null
}

export type StateMileageMaxAggregateOutputType = {
  id: string | null
  truckingLogId: string | null
  state: string | null
  stateLineMileage: number | null
}

export type StateMileageCountAggregateOutputType = {
  id: number
  truckingLogId: number
  state: number
  stateLineMileage: number
  _all: number
}


export type StateMileageAvgAggregateInputType = {
  stateLineMileage?: true
}

export type StateMileageSumAggregateInputType = {
  stateLineMileage?: true
}

export type StateMileageMinAggregateInputType = {
  id?: true
  truckingLogId?: true
  state?: true
  stateLineMileage?: true
}

export type StateMileageMaxAggregateInputType = {
  id?: true
  truckingLogId?: true
  state?: true
  stateLineMileage?: true
}

export type StateMileageCountAggregateInputType = {
  id?: true
  truckingLogId?: true
  state?: true
  stateLineMileage?: true
  _all?: true
}

export type StateMileageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StateMileage to aggregate.
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StateMileages to fetch.
   */
  orderBy?: Prisma.StateMileageOrderByWithRelationInput | Prisma.StateMileageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StateMileageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StateMileages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StateMileages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StateMileages
  **/
  _count?: true | StateMileageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StateMileageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StateMileageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StateMileageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StateMileageMaxAggregateInputType
}

export type GetStateMileageAggregateType<T extends StateMileageAggregateArgs> = {
      [P in keyof T & keyof AggregateStateMileage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStateMileage[P]>
    : Prisma.GetScalarType<T[P], AggregateStateMileage[P]>
}




export type StateMileageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StateMileageWhereInput
  orderBy?: Prisma.StateMileageOrderByWithAggregationInput | Prisma.StateMileageOrderByWithAggregationInput[]
  by: Prisma.StateMileageScalarFieldEnum[] | Prisma.StateMileageScalarFieldEnum
  having?: Prisma.StateMileageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StateMileageCountAggregateInputType | true
  _avg?: StateMileageAvgAggregateInputType
  _sum?: StateMileageSumAggregateInputType
  _min?: StateMileageMinAggregateInputType
  _max?: StateMileageMaxAggregateInputType
}

export type StateMileageGroupByOutputType = {
  id: string
  truckingLogId: string
  state: string | null
  stateLineMileage: number | null
  _count: StateMileageCountAggregateOutputType | null
  _avg: StateMileageAvgAggregateOutputType | null
  _sum: StateMileageSumAggregateOutputType | null
  _min: StateMileageMinAggregateOutputType | null
  _max: StateMileageMaxAggregateOutputType | null
}

type GetStateMileageGroupByPayload<T extends StateMileageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StateMileageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StateMileageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StateMileageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StateMileageGroupByOutputType[P]>
      }
    >
  >



export type StateMileageWhereInput = {
  AND?: Prisma.StateMileageWhereInput | Prisma.StateMileageWhereInput[]
  OR?: Prisma.StateMileageWhereInput[]
  NOT?: Prisma.StateMileageWhereInput | Prisma.StateMileageWhereInput[]
  id?: Prisma.StringFilter<"StateMileage"> | string
  truckingLogId?: Prisma.StringFilter<"StateMileage"> | string
  state?: Prisma.StringNullableFilter<"StateMileage"> | string | null
  stateLineMileage?: Prisma.IntNullableFilter<"StateMileage"> | number | null
  TruckingLog?: Prisma.XOR<Prisma.TruckingLogScalarRelationFilter, Prisma.TruckingLogWhereInput>
}

export type StateMileageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  state?: Prisma.SortOrderInput | Prisma.SortOrder
  stateLineMileage?: Prisma.SortOrderInput | Prisma.SortOrder
  TruckingLog?: Prisma.TruckingLogOrderByWithRelationInput
}

export type StateMileageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.StateMileageWhereInput | Prisma.StateMileageWhereInput[]
  OR?: Prisma.StateMileageWhereInput[]
  NOT?: Prisma.StateMileageWhereInput | Prisma.StateMileageWhereInput[]
  truckingLogId?: Prisma.StringFilter<"StateMileage"> | string
  state?: Prisma.StringNullableFilter<"StateMileage"> | string | null
  stateLineMileage?: Prisma.IntNullableFilter<"StateMileage"> | number | null
  TruckingLog?: Prisma.XOR<Prisma.TruckingLogScalarRelationFilter, Prisma.TruckingLogWhereInput>
}, "id">

export type StateMileageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  state?: Prisma.SortOrderInput | Prisma.SortOrder
  stateLineMileage?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.StateMileageCountOrderByAggregateInput
  _avg?: Prisma.StateMileageAvgOrderByAggregateInput
  _max?: Prisma.StateMileageMaxOrderByAggregateInput
  _min?: Prisma.StateMileageMinOrderByAggregateInput
  _sum?: Prisma.StateMileageSumOrderByAggregateInput
}

export type StateMileageScalarWhereWithAggregatesInput = {
  AND?: Prisma.StateMileageScalarWhereWithAggregatesInput | Prisma.StateMileageScalarWhereWithAggregatesInput[]
  OR?: Prisma.StateMileageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StateMileageScalarWhereWithAggregatesInput | Prisma.StateMileageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StateMileage"> | string
  truckingLogId?: Prisma.StringWithAggregatesFilter<"StateMileage"> | string
  state?: Prisma.StringNullableWithAggregatesFilter<"StateMileage"> | string | null
  stateLineMileage?: Prisma.IntNullableWithAggregatesFilter<"StateMileage"> | number | null
}

export type StateMileageCreateInput = {
  id?: string
  state?: string | null
  stateLineMileage?: number | null
  TruckingLog: Prisma.TruckingLogCreateNestedOneWithoutStateMileagesInput
}

export type StateMileageUncheckedCreateInput = {
  id?: string
  truckingLogId: string
  state?: string | null
  stateLineMileage?: number | null
}

export type StateMileageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  TruckingLog?: Prisma.TruckingLogUpdateOneRequiredWithoutStateMileagesNestedInput
}

export type StateMileageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  truckingLogId?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type StateMileageCreateManyInput = {
  id?: string
  truckingLogId: string
  state?: string | null
  stateLineMileage?: number | null
}

export type StateMileageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type StateMileageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  truckingLogId?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type StateMileageListRelationFilter = {
  every?: Prisma.StateMileageWhereInput
  some?: Prisma.StateMileageWhereInput
  none?: Prisma.StateMileageWhereInput
}

export type StateMileageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StateMileageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  state?: Prisma.SortOrder
  stateLineMileage?: Prisma.SortOrder
}

export type StateMileageAvgOrderByAggregateInput = {
  stateLineMileage?: Prisma.SortOrder
}

export type StateMileageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  state?: Prisma.SortOrder
  stateLineMileage?: Prisma.SortOrder
}

export type StateMileageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  truckingLogId?: Prisma.SortOrder
  state?: Prisma.SortOrder
  stateLineMileage?: Prisma.SortOrder
}

export type StateMileageSumOrderByAggregateInput = {
  stateLineMileage?: Prisma.SortOrder
}

export type StateMileageCreateNestedManyWithoutTruckingLogInput = {
  create?: Prisma.XOR<Prisma.StateMileageCreateWithoutTruckingLogInput, Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput> | Prisma.StateMileageCreateWithoutTruckingLogInput[] | Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput | Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput[]
  createMany?: Prisma.StateMileageCreateManyTruckingLogInputEnvelope
  connect?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
}

export type StateMileageUncheckedCreateNestedManyWithoutTruckingLogInput = {
  create?: Prisma.XOR<Prisma.StateMileageCreateWithoutTruckingLogInput, Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput> | Prisma.StateMileageCreateWithoutTruckingLogInput[] | Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput | Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput[]
  createMany?: Prisma.StateMileageCreateManyTruckingLogInputEnvelope
  connect?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
}

export type StateMileageUpdateManyWithoutTruckingLogNestedInput = {
  create?: Prisma.XOR<Prisma.StateMileageCreateWithoutTruckingLogInput, Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput> | Prisma.StateMileageCreateWithoutTruckingLogInput[] | Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput | Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput[]
  upsert?: Prisma.StateMileageUpsertWithWhereUniqueWithoutTruckingLogInput | Prisma.StateMileageUpsertWithWhereUniqueWithoutTruckingLogInput[]
  createMany?: Prisma.StateMileageCreateManyTruckingLogInputEnvelope
  set?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  disconnect?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  delete?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  connect?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  update?: Prisma.StateMileageUpdateWithWhereUniqueWithoutTruckingLogInput | Prisma.StateMileageUpdateWithWhereUniqueWithoutTruckingLogInput[]
  updateMany?: Prisma.StateMileageUpdateManyWithWhereWithoutTruckingLogInput | Prisma.StateMileageUpdateManyWithWhereWithoutTruckingLogInput[]
  deleteMany?: Prisma.StateMileageScalarWhereInput | Prisma.StateMileageScalarWhereInput[]
}

export type StateMileageUncheckedUpdateManyWithoutTruckingLogNestedInput = {
  create?: Prisma.XOR<Prisma.StateMileageCreateWithoutTruckingLogInput, Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput> | Prisma.StateMileageCreateWithoutTruckingLogInput[] | Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput[]
  connectOrCreate?: Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput | Prisma.StateMileageCreateOrConnectWithoutTruckingLogInput[]
  upsert?: Prisma.StateMileageUpsertWithWhereUniqueWithoutTruckingLogInput | Prisma.StateMileageUpsertWithWhereUniqueWithoutTruckingLogInput[]
  createMany?: Prisma.StateMileageCreateManyTruckingLogInputEnvelope
  set?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  disconnect?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  delete?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  connect?: Prisma.StateMileageWhereUniqueInput | Prisma.StateMileageWhereUniqueInput[]
  update?: Prisma.StateMileageUpdateWithWhereUniqueWithoutTruckingLogInput | Prisma.StateMileageUpdateWithWhereUniqueWithoutTruckingLogInput[]
  updateMany?: Prisma.StateMileageUpdateManyWithWhereWithoutTruckingLogInput | Prisma.StateMileageUpdateManyWithWhereWithoutTruckingLogInput[]
  deleteMany?: Prisma.StateMileageScalarWhereInput | Prisma.StateMileageScalarWhereInput[]
}

export type StateMileageCreateWithoutTruckingLogInput = {
  id?: string
  state?: string | null
  stateLineMileage?: number | null
}

export type StateMileageUncheckedCreateWithoutTruckingLogInput = {
  id?: string
  state?: string | null
  stateLineMileage?: number | null
}

export type StateMileageCreateOrConnectWithoutTruckingLogInput = {
  where: Prisma.StateMileageWhereUniqueInput
  create: Prisma.XOR<Prisma.StateMileageCreateWithoutTruckingLogInput, Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput>
}

export type StateMileageCreateManyTruckingLogInputEnvelope = {
  data: Prisma.StateMileageCreateManyTruckingLogInput | Prisma.StateMileageCreateManyTruckingLogInput[]
  skipDuplicates?: boolean
}

export type StateMileageUpsertWithWhereUniqueWithoutTruckingLogInput = {
  where: Prisma.StateMileageWhereUniqueInput
  update: Prisma.XOR<Prisma.StateMileageUpdateWithoutTruckingLogInput, Prisma.StateMileageUncheckedUpdateWithoutTruckingLogInput>
  create: Prisma.XOR<Prisma.StateMileageCreateWithoutTruckingLogInput, Prisma.StateMileageUncheckedCreateWithoutTruckingLogInput>
}

export type StateMileageUpdateWithWhereUniqueWithoutTruckingLogInput = {
  where: Prisma.StateMileageWhereUniqueInput
  data: Prisma.XOR<Prisma.StateMileageUpdateWithoutTruckingLogInput, Prisma.StateMileageUncheckedUpdateWithoutTruckingLogInput>
}

export type StateMileageUpdateManyWithWhereWithoutTruckingLogInput = {
  where: Prisma.StateMileageScalarWhereInput
  data: Prisma.XOR<Prisma.StateMileageUpdateManyMutationInput, Prisma.StateMileageUncheckedUpdateManyWithoutTruckingLogInput>
}

export type StateMileageScalarWhereInput = {
  AND?: Prisma.StateMileageScalarWhereInput | Prisma.StateMileageScalarWhereInput[]
  OR?: Prisma.StateMileageScalarWhereInput[]
  NOT?: Prisma.StateMileageScalarWhereInput | Prisma.StateMileageScalarWhereInput[]
  id?: Prisma.StringFilter<"StateMileage"> | string
  truckingLogId?: Prisma.StringFilter<"StateMileage"> | string
  state?: Prisma.StringNullableFilter<"StateMileage"> | string | null
  stateLineMileage?: Prisma.IntNullableFilter<"StateMileage"> | number | null
}

export type StateMileageCreateManyTruckingLogInput = {
  id?: string
  state?: string | null
  stateLineMileage?: number | null
}

export type StateMileageUpdateWithoutTruckingLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type StateMileageUncheckedUpdateWithoutTruckingLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type StateMileageUncheckedUpdateManyWithoutTruckingLogInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stateLineMileage?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type StateMileageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  truckingLogId?: boolean
  state?: boolean
  stateLineMileage?: boolean
  TruckingLog?: boolean | Prisma.TruckingLogDefaultArgs<ExtArgs>
}, ExtArgs["result"]["stateMileage"]>

export type StateMileageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  truckingLogId?: boolean
  state?: boolean
  stateLineMileage?: boolean
  TruckingLog?: boolean | Prisma.TruckingLogDefaultArgs<ExtArgs>
}, ExtArgs["result"]["stateMileage"]>

export type StateMileageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  truckingLogId?: boolean
  state?: boolean
  stateLineMileage?: boolean
  TruckingLog?: boolean | Prisma.TruckingLogDefaultArgs<ExtArgs>
}, ExtArgs["result"]["stateMileage"]>

export type StateMileageSelectScalar = {
  id?: boolean
  truckingLogId?: boolean
  state?: boolean
  stateLineMileage?: boolean
}

export type StateMileageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "truckingLogId" | "state" | "stateLineMileage", ExtArgs["result"]["stateMileage"]>
export type StateMileageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TruckingLog?: boolean | Prisma.TruckingLogDefaultArgs<ExtArgs>
}
export type StateMileageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TruckingLog?: boolean | Prisma.TruckingLogDefaultArgs<ExtArgs>
}
export type StateMileageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  TruckingLog?: boolean | Prisma.TruckingLogDefaultArgs<ExtArgs>
}

export type $StateMileagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StateMileage"
  objects: {
    TruckingLog: Prisma.$TruckingLogPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    truckingLogId: string
    state: string | null
    stateLineMileage: number | null
  }, ExtArgs["result"]["stateMileage"]>
  composites: {}
}

export type StateMileageGetPayload<S extends boolean | null | undefined | StateMileageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StateMileagePayload, S>

export type StateMileageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StateMileageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StateMileageCountAggregateInputType | true
  }

export interface StateMileageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StateMileage'], meta: { name: 'StateMileage' } }
  /**
   * Find zero or one StateMileage that matches the filter.
   * @param {StateMileageFindUniqueArgs} args - Arguments to find a StateMileage
   * @example
   * // Get one StateMileage
   * const stateMileage = await prisma.stateMileage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StateMileageFindUniqueArgs>(args: Prisma.SelectSubset<T, StateMileageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StateMileage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StateMileageFindUniqueOrThrowArgs} args - Arguments to find a StateMileage
   * @example
   * // Get one StateMileage
   * const stateMileage = await prisma.stateMileage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StateMileageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StateMileageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StateMileage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageFindFirstArgs} args - Arguments to find a StateMileage
   * @example
   * // Get one StateMileage
   * const stateMileage = await prisma.stateMileage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StateMileageFindFirstArgs>(args?: Prisma.SelectSubset<T, StateMileageFindFirstArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StateMileage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageFindFirstOrThrowArgs} args - Arguments to find a StateMileage
   * @example
   * // Get one StateMileage
   * const stateMileage = await prisma.stateMileage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StateMileageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StateMileageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StateMileages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StateMileages
   * const stateMileages = await prisma.stateMileage.findMany()
   * 
   * // Get first 10 StateMileages
   * const stateMileages = await prisma.stateMileage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const stateMileageWithIdOnly = await prisma.stateMileage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StateMileageFindManyArgs>(args?: Prisma.SelectSubset<T, StateMileageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StateMileage.
   * @param {StateMileageCreateArgs} args - Arguments to create a StateMileage.
   * @example
   * // Create one StateMileage
   * const StateMileage = await prisma.stateMileage.create({
   *   data: {
   *     // ... data to create a StateMileage
   *   }
   * })
   * 
   */
  create<T extends StateMileageCreateArgs>(args: Prisma.SelectSubset<T, StateMileageCreateArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StateMileages.
   * @param {StateMileageCreateManyArgs} args - Arguments to create many StateMileages.
   * @example
   * // Create many StateMileages
   * const stateMileage = await prisma.stateMileage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StateMileageCreateManyArgs>(args?: Prisma.SelectSubset<T, StateMileageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StateMileages and returns the data saved in the database.
   * @param {StateMileageCreateManyAndReturnArgs} args - Arguments to create many StateMileages.
   * @example
   * // Create many StateMileages
   * const stateMileage = await prisma.stateMileage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StateMileages and only return the `id`
   * const stateMileageWithIdOnly = await prisma.stateMileage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StateMileageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StateMileageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StateMileage.
   * @param {StateMileageDeleteArgs} args - Arguments to delete one StateMileage.
   * @example
   * // Delete one StateMileage
   * const StateMileage = await prisma.stateMileage.delete({
   *   where: {
   *     // ... filter to delete one StateMileage
   *   }
   * })
   * 
   */
  delete<T extends StateMileageDeleteArgs>(args: Prisma.SelectSubset<T, StateMileageDeleteArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StateMileage.
   * @param {StateMileageUpdateArgs} args - Arguments to update one StateMileage.
   * @example
   * // Update one StateMileage
   * const stateMileage = await prisma.stateMileage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StateMileageUpdateArgs>(args: Prisma.SelectSubset<T, StateMileageUpdateArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StateMileages.
   * @param {StateMileageDeleteManyArgs} args - Arguments to filter StateMileages to delete.
   * @example
   * // Delete a few StateMileages
   * const { count } = await prisma.stateMileage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StateMileageDeleteManyArgs>(args?: Prisma.SelectSubset<T, StateMileageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StateMileages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StateMileages
   * const stateMileage = await prisma.stateMileage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StateMileageUpdateManyArgs>(args: Prisma.SelectSubset<T, StateMileageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StateMileages and returns the data updated in the database.
   * @param {StateMileageUpdateManyAndReturnArgs} args - Arguments to update many StateMileages.
   * @example
   * // Update many StateMileages
   * const stateMileage = await prisma.stateMileage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StateMileages and only return the `id`
   * const stateMileageWithIdOnly = await prisma.stateMileage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StateMileageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StateMileageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StateMileage.
   * @param {StateMileageUpsertArgs} args - Arguments to update or create a StateMileage.
   * @example
   * // Update or create a StateMileage
   * const stateMileage = await prisma.stateMileage.upsert({
   *   create: {
   *     // ... data to create a StateMileage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StateMileage we want to update
   *   }
   * })
   */
  upsert<T extends StateMileageUpsertArgs>(args: Prisma.SelectSubset<T, StateMileageUpsertArgs<ExtArgs>>): Prisma.Prisma__StateMileageClient<runtime.Types.Result.GetResult<Prisma.$StateMileagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StateMileages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageCountArgs} args - Arguments to filter StateMileages to count.
   * @example
   * // Count the number of StateMileages
   * const count = await prisma.stateMileage.count({
   *   where: {
   *     // ... the filter for the StateMileages we want to count
   *   }
   * })
  **/
  count<T extends StateMileageCountArgs>(
    args?: Prisma.Subset<T, StateMileageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StateMileageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StateMileage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StateMileageAggregateArgs>(args: Prisma.Subset<T, StateMileageAggregateArgs>): Prisma.PrismaPromise<GetStateMileageAggregateType<T>>

  /**
   * Group by StateMileage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateMileageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StateMileageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StateMileageGroupByArgs['orderBy'] }
      : { orderBy?: StateMileageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StateMileageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateMileageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StateMileage model
 */
readonly fields: StateMileageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StateMileage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StateMileageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  TruckingLog<T extends Prisma.TruckingLogDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TruckingLogDefaultArgs<ExtArgs>>): Prisma.Prisma__TruckingLogClient<runtime.Types.Result.GetResult<Prisma.$TruckingLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StateMileage model
 */
export interface StateMileageFieldRefs {
  readonly id: Prisma.FieldRef<"StateMileage", 'String'>
  readonly truckingLogId: Prisma.FieldRef<"StateMileage", 'String'>
  readonly state: Prisma.FieldRef<"StateMileage", 'String'>
  readonly stateLineMileage: Prisma.FieldRef<"StateMileage", 'Int'>
}
    

// Custom InputTypes
/**
 * StateMileage findUnique
 */
export type StateMileageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * Filter, which StateMileage to fetch.
   */
  where: Prisma.StateMileageWhereUniqueInput
}

/**
 * StateMileage findUniqueOrThrow
 */
export type StateMileageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * Filter, which StateMileage to fetch.
   */
  where: Prisma.StateMileageWhereUniqueInput
}

/**
 * StateMileage findFirst
 */
export type StateMileageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * Filter, which StateMileage to fetch.
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StateMileages to fetch.
   */
  orderBy?: Prisma.StateMileageOrderByWithRelationInput | Prisma.StateMileageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StateMileages.
   */
  cursor?: Prisma.StateMileageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StateMileages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StateMileages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StateMileages.
   */
  distinct?: Prisma.StateMileageScalarFieldEnum | Prisma.StateMileageScalarFieldEnum[]
}

/**
 * StateMileage findFirstOrThrow
 */
export type StateMileageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * Filter, which StateMileage to fetch.
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StateMileages to fetch.
   */
  orderBy?: Prisma.StateMileageOrderByWithRelationInput | Prisma.StateMileageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StateMileages.
   */
  cursor?: Prisma.StateMileageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StateMileages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StateMileages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StateMileages.
   */
  distinct?: Prisma.StateMileageScalarFieldEnum | Prisma.StateMileageScalarFieldEnum[]
}

/**
 * StateMileage findMany
 */
export type StateMileageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * Filter, which StateMileages to fetch.
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StateMileages to fetch.
   */
  orderBy?: Prisma.StateMileageOrderByWithRelationInput | Prisma.StateMileageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StateMileages.
   */
  cursor?: Prisma.StateMileageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StateMileages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StateMileages.
   */
  skip?: number
  distinct?: Prisma.StateMileageScalarFieldEnum | Prisma.StateMileageScalarFieldEnum[]
}

/**
 * StateMileage create
 */
export type StateMileageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * The data needed to create a StateMileage.
   */
  data: Prisma.XOR<Prisma.StateMileageCreateInput, Prisma.StateMileageUncheckedCreateInput>
}

/**
 * StateMileage createMany
 */
export type StateMileageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StateMileages.
   */
  data: Prisma.StateMileageCreateManyInput | Prisma.StateMileageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StateMileage createManyAndReturn
 */
export type StateMileageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * The data used to create many StateMileages.
   */
  data: Prisma.StateMileageCreateManyInput | Prisma.StateMileageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StateMileage update
 */
export type StateMileageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * The data needed to update a StateMileage.
   */
  data: Prisma.XOR<Prisma.StateMileageUpdateInput, Prisma.StateMileageUncheckedUpdateInput>
  /**
   * Choose, which StateMileage to update.
   */
  where: Prisma.StateMileageWhereUniqueInput
}

/**
 * StateMileage updateMany
 */
export type StateMileageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StateMileages.
   */
  data: Prisma.XOR<Prisma.StateMileageUpdateManyMutationInput, Prisma.StateMileageUncheckedUpdateManyInput>
  /**
   * Filter which StateMileages to update
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * Limit how many StateMileages to update.
   */
  limit?: number
}

/**
 * StateMileage updateManyAndReturn
 */
export type StateMileageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * The data used to update StateMileages.
   */
  data: Prisma.XOR<Prisma.StateMileageUpdateManyMutationInput, Prisma.StateMileageUncheckedUpdateManyInput>
  /**
   * Filter which StateMileages to update
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * Limit how many StateMileages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StateMileage upsert
 */
export type StateMileageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * The filter to search for the StateMileage to update in case it exists.
   */
  where: Prisma.StateMileageWhereUniqueInput
  /**
   * In case the StateMileage found by the `where` argument doesn't exist, create a new StateMileage with this data.
   */
  create: Prisma.XOR<Prisma.StateMileageCreateInput, Prisma.StateMileageUncheckedCreateInput>
  /**
   * In case the StateMileage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StateMileageUpdateInput, Prisma.StateMileageUncheckedUpdateInput>
}

/**
 * StateMileage delete
 */
export type StateMileageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
  /**
   * Filter which StateMileage to delete.
   */
  where: Prisma.StateMileageWhereUniqueInput
}

/**
 * StateMileage deleteMany
 */
export type StateMileageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StateMileages to delete
   */
  where?: Prisma.StateMileageWhereInput
  /**
   * Limit how many StateMileages to delete.
   */
  limit?: number
}

/**
 * StateMileage without action
 */
export type StateMileageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StateMileage
   */
  select?: Prisma.StateMileageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StateMileage
   */
  omit?: Prisma.StateMileageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StateMileageInclude<ExtArgs> | null
}
