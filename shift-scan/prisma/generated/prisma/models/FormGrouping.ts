
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FormGrouping` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FormGrouping
 * 
 */
export type FormGroupingModel = runtime.Types.Result.DefaultSelection<Prisma.$FormGroupingPayload>

export type AggregateFormGrouping = {
  _count: FormGroupingCountAggregateOutputType | null
  _avg: FormGroupingAvgAggregateOutputType | null
  _sum: FormGroupingSumAggregateOutputType | null
  _min: FormGroupingMinAggregateOutputType | null
  _max: FormGroupingMaxAggregateOutputType | null
}

export type FormGroupingAvgAggregateOutputType = {
  order: number | null
}

export type FormGroupingSumAggregateOutputType = {
  order: number | null
}

export type FormGroupingMinAggregateOutputType = {
  id: string | null
  title: string | null
  order: number | null
}

export type FormGroupingMaxAggregateOutputType = {
  id: string | null
  title: string | null
  order: number | null
}

export type FormGroupingCountAggregateOutputType = {
  id: number
  title: number
  order: number
  _all: number
}


export type FormGroupingAvgAggregateInputType = {
  order?: true
}

export type FormGroupingSumAggregateInputType = {
  order?: true
}

export type FormGroupingMinAggregateInputType = {
  id?: true
  title?: true
  order?: true
}

export type FormGroupingMaxAggregateInputType = {
  id?: true
  title?: true
  order?: true
}

export type FormGroupingCountAggregateInputType = {
  id?: true
  title?: true
  order?: true
  _all?: true
}

export type FormGroupingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormGrouping to aggregate.
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormGroupings to fetch.
   */
  orderBy?: Prisma.FormGroupingOrderByWithRelationInput | Prisma.FormGroupingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormGroupingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormGroupings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormGroupings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormGroupings
  **/
  _count?: true | FormGroupingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FormGroupingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FormGroupingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormGroupingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormGroupingMaxAggregateInputType
}

export type GetFormGroupingAggregateType<T extends FormGroupingAggregateArgs> = {
      [P in keyof T & keyof AggregateFormGrouping]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormGrouping[P]>
    : Prisma.GetScalarType<T[P], AggregateFormGrouping[P]>
}




export type FormGroupingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormGroupingWhereInput
  orderBy?: Prisma.FormGroupingOrderByWithAggregationInput | Prisma.FormGroupingOrderByWithAggregationInput[]
  by: Prisma.FormGroupingScalarFieldEnum[] | Prisma.FormGroupingScalarFieldEnum
  having?: Prisma.FormGroupingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormGroupingCountAggregateInputType | true
  _avg?: FormGroupingAvgAggregateInputType
  _sum?: FormGroupingSumAggregateInputType
  _min?: FormGroupingMinAggregateInputType
  _max?: FormGroupingMaxAggregateInputType
}

export type FormGroupingGroupByOutputType = {
  id: string
  title: string | null
  order: number
  _count: FormGroupingCountAggregateOutputType | null
  _avg: FormGroupingAvgAggregateOutputType | null
  _sum: FormGroupingSumAggregateOutputType | null
  _min: FormGroupingMinAggregateOutputType | null
  _max: FormGroupingMaxAggregateOutputType | null
}

type GetFormGroupingGroupByPayload<T extends FormGroupingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormGroupingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormGroupingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormGroupingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormGroupingGroupByOutputType[P]>
      }
    >
  >



export type FormGroupingWhereInput = {
  AND?: Prisma.FormGroupingWhereInput | Prisma.FormGroupingWhereInput[]
  OR?: Prisma.FormGroupingWhereInput[]
  NOT?: Prisma.FormGroupingWhereInput | Prisma.FormGroupingWhereInput[]
  id?: Prisma.StringFilter<"FormGrouping"> | string
  title?: Prisma.StringNullableFilter<"FormGrouping"> | string | null
  order?: Prisma.IntFilter<"FormGrouping"> | number
  Fields?: Prisma.FormFieldListRelationFilter
  FormTemplate?: Prisma.FormTemplateListRelationFilter
}

export type FormGroupingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.SortOrder
  Fields?: Prisma.FormFieldOrderByRelationAggregateInput
  FormTemplate?: Prisma.FormTemplateOrderByRelationAggregateInput
}

export type FormGroupingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormGroupingWhereInput | Prisma.FormGroupingWhereInput[]
  OR?: Prisma.FormGroupingWhereInput[]
  NOT?: Prisma.FormGroupingWhereInput | Prisma.FormGroupingWhereInput[]
  title?: Prisma.StringNullableFilter<"FormGrouping"> | string | null
  order?: Prisma.IntFilter<"FormGrouping"> | number
  Fields?: Prisma.FormFieldListRelationFilter
  FormTemplate?: Prisma.FormTemplateListRelationFilter
}, "id">

export type FormGroupingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.SortOrder
  _count?: Prisma.FormGroupingCountOrderByAggregateInput
  _avg?: Prisma.FormGroupingAvgOrderByAggregateInput
  _max?: Prisma.FormGroupingMaxOrderByAggregateInput
  _min?: Prisma.FormGroupingMinOrderByAggregateInput
  _sum?: Prisma.FormGroupingSumOrderByAggregateInput
}

export type FormGroupingScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormGroupingScalarWhereWithAggregatesInput | Prisma.FormGroupingScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormGroupingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormGroupingScalarWhereWithAggregatesInput | Prisma.FormGroupingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormGrouping"> | string
  title?: Prisma.StringNullableWithAggregatesFilter<"FormGrouping"> | string | null
  order?: Prisma.IntWithAggregatesFilter<"FormGrouping"> | number
}

export type FormGroupingCreateInput = {
  id?: string
  title?: string | null
  order: number
  Fields?: Prisma.FormFieldCreateNestedManyWithoutFormGroupingInput
  FormTemplate?: Prisma.FormTemplateCreateNestedManyWithoutFormGroupingInput
}

export type FormGroupingUncheckedCreateInput = {
  id?: string
  title?: string | null
  order: number
  Fields?: Prisma.FormFieldUncheckedCreateNestedManyWithoutFormGroupingInput
  FormTemplate?: Prisma.FormTemplateUncheckedCreateNestedManyWithoutFormGroupingInput
}

export type FormGroupingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  Fields?: Prisma.FormFieldUpdateManyWithoutFormGroupingNestedInput
  FormTemplate?: Prisma.FormTemplateUpdateManyWithoutFormGroupingNestedInput
}

export type FormGroupingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  Fields?: Prisma.FormFieldUncheckedUpdateManyWithoutFormGroupingNestedInput
  FormTemplate?: Prisma.FormTemplateUncheckedUpdateManyWithoutFormGroupingNestedInput
}

export type FormGroupingCreateManyInput = {
  id?: string
  title?: string | null
  order: number
}

export type FormGroupingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FormGroupingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type FormGroupingListRelationFilter = {
  every?: Prisma.FormGroupingWhereInput
  some?: Prisma.FormGroupingWhereInput
  none?: Prisma.FormGroupingWhereInput
}

export type FormGroupingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormGroupingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type FormGroupingAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type FormGroupingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type FormGroupingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type FormGroupingSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type FormGroupingScalarRelationFilter = {
  is?: Prisma.FormGroupingWhereInput
  isNot?: Prisma.FormGroupingWhereInput
}

export type FormGroupingCreateNestedManyWithoutFormTemplateInput = {
  create?: Prisma.XOR<Prisma.FormGroupingCreateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput> | Prisma.FormGroupingCreateWithoutFormTemplateInput[] | Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput | Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput[]
  connect?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
}

export type FormGroupingUncheckedCreateNestedManyWithoutFormTemplateInput = {
  create?: Prisma.XOR<Prisma.FormGroupingCreateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput> | Prisma.FormGroupingCreateWithoutFormTemplateInput[] | Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput | Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput[]
  connect?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
}

export type FormGroupingUpdateManyWithoutFormTemplateNestedInput = {
  create?: Prisma.XOR<Prisma.FormGroupingCreateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput> | Prisma.FormGroupingCreateWithoutFormTemplateInput[] | Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput | Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput[]
  upsert?: Prisma.FormGroupingUpsertWithWhereUniqueWithoutFormTemplateInput | Prisma.FormGroupingUpsertWithWhereUniqueWithoutFormTemplateInput[]
  set?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  disconnect?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  delete?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  connect?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  update?: Prisma.FormGroupingUpdateWithWhereUniqueWithoutFormTemplateInput | Prisma.FormGroupingUpdateWithWhereUniqueWithoutFormTemplateInput[]
  updateMany?: Prisma.FormGroupingUpdateManyWithWhereWithoutFormTemplateInput | Prisma.FormGroupingUpdateManyWithWhereWithoutFormTemplateInput[]
  deleteMany?: Prisma.FormGroupingScalarWhereInput | Prisma.FormGroupingScalarWhereInput[]
}

export type FormGroupingUncheckedUpdateManyWithoutFormTemplateNestedInput = {
  create?: Prisma.XOR<Prisma.FormGroupingCreateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput> | Prisma.FormGroupingCreateWithoutFormTemplateInput[] | Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput | Prisma.FormGroupingCreateOrConnectWithoutFormTemplateInput[]
  upsert?: Prisma.FormGroupingUpsertWithWhereUniqueWithoutFormTemplateInput | Prisma.FormGroupingUpsertWithWhereUniqueWithoutFormTemplateInput[]
  set?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  disconnect?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  delete?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  connect?: Prisma.FormGroupingWhereUniqueInput | Prisma.FormGroupingWhereUniqueInput[]
  update?: Prisma.FormGroupingUpdateWithWhereUniqueWithoutFormTemplateInput | Prisma.FormGroupingUpdateWithWhereUniqueWithoutFormTemplateInput[]
  updateMany?: Prisma.FormGroupingUpdateManyWithWhereWithoutFormTemplateInput | Prisma.FormGroupingUpdateManyWithWhereWithoutFormTemplateInput[]
  deleteMany?: Prisma.FormGroupingScalarWhereInput | Prisma.FormGroupingScalarWhereInput[]
}

export type FormGroupingCreateNestedOneWithoutFieldsInput = {
  create?: Prisma.XOR<Prisma.FormGroupingCreateWithoutFieldsInput, Prisma.FormGroupingUncheckedCreateWithoutFieldsInput>
  connectOrCreate?: Prisma.FormGroupingCreateOrConnectWithoutFieldsInput
  connect?: Prisma.FormGroupingWhereUniqueInput
}

export type FormGroupingUpdateOneRequiredWithoutFieldsNestedInput = {
  create?: Prisma.XOR<Prisma.FormGroupingCreateWithoutFieldsInput, Prisma.FormGroupingUncheckedCreateWithoutFieldsInput>
  connectOrCreate?: Prisma.FormGroupingCreateOrConnectWithoutFieldsInput
  upsert?: Prisma.FormGroupingUpsertWithoutFieldsInput
  connect?: Prisma.FormGroupingWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FormGroupingUpdateToOneWithWhereWithoutFieldsInput, Prisma.FormGroupingUpdateWithoutFieldsInput>, Prisma.FormGroupingUncheckedUpdateWithoutFieldsInput>
}

export type FormGroupingCreateWithoutFormTemplateInput = {
  id?: string
  title?: string | null
  order: number
  Fields?: Prisma.FormFieldCreateNestedManyWithoutFormGroupingInput
}

export type FormGroupingUncheckedCreateWithoutFormTemplateInput = {
  id?: string
  title?: string | null
  order: number
  Fields?: Prisma.FormFieldUncheckedCreateNestedManyWithoutFormGroupingInput
}

export type FormGroupingCreateOrConnectWithoutFormTemplateInput = {
  where: Prisma.FormGroupingWhereUniqueInput
  create: Prisma.XOR<Prisma.FormGroupingCreateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput>
}

export type FormGroupingUpsertWithWhereUniqueWithoutFormTemplateInput = {
  where: Prisma.FormGroupingWhereUniqueInput
  update: Prisma.XOR<Prisma.FormGroupingUpdateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedUpdateWithoutFormTemplateInput>
  create: Prisma.XOR<Prisma.FormGroupingCreateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedCreateWithoutFormTemplateInput>
}

export type FormGroupingUpdateWithWhereUniqueWithoutFormTemplateInput = {
  where: Prisma.FormGroupingWhereUniqueInput
  data: Prisma.XOR<Prisma.FormGroupingUpdateWithoutFormTemplateInput, Prisma.FormGroupingUncheckedUpdateWithoutFormTemplateInput>
}

export type FormGroupingUpdateManyWithWhereWithoutFormTemplateInput = {
  where: Prisma.FormGroupingScalarWhereInput
  data: Prisma.XOR<Prisma.FormGroupingUpdateManyMutationInput, Prisma.FormGroupingUncheckedUpdateManyWithoutFormTemplateInput>
}

export type FormGroupingScalarWhereInput = {
  AND?: Prisma.FormGroupingScalarWhereInput | Prisma.FormGroupingScalarWhereInput[]
  OR?: Prisma.FormGroupingScalarWhereInput[]
  NOT?: Prisma.FormGroupingScalarWhereInput | Prisma.FormGroupingScalarWhereInput[]
  id?: Prisma.StringFilter<"FormGrouping"> | string
  title?: Prisma.StringNullableFilter<"FormGrouping"> | string | null
  order?: Prisma.IntFilter<"FormGrouping"> | number
}

export type FormGroupingCreateWithoutFieldsInput = {
  id?: string
  title?: string | null
  order: number
  FormTemplate?: Prisma.FormTemplateCreateNestedManyWithoutFormGroupingInput
}

export type FormGroupingUncheckedCreateWithoutFieldsInput = {
  id?: string
  title?: string | null
  order: number
  FormTemplate?: Prisma.FormTemplateUncheckedCreateNestedManyWithoutFormGroupingInput
}

export type FormGroupingCreateOrConnectWithoutFieldsInput = {
  where: Prisma.FormGroupingWhereUniqueInput
  create: Prisma.XOR<Prisma.FormGroupingCreateWithoutFieldsInput, Prisma.FormGroupingUncheckedCreateWithoutFieldsInput>
}

export type FormGroupingUpsertWithoutFieldsInput = {
  update: Prisma.XOR<Prisma.FormGroupingUpdateWithoutFieldsInput, Prisma.FormGroupingUncheckedUpdateWithoutFieldsInput>
  create: Prisma.XOR<Prisma.FormGroupingCreateWithoutFieldsInput, Prisma.FormGroupingUncheckedCreateWithoutFieldsInput>
  where?: Prisma.FormGroupingWhereInput
}

export type FormGroupingUpdateToOneWithWhereWithoutFieldsInput = {
  where?: Prisma.FormGroupingWhereInput
  data: Prisma.XOR<Prisma.FormGroupingUpdateWithoutFieldsInput, Prisma.FormGroupingUncheckedUpdateWithoutFieldsInput>
}

export type FormGroupingUpdateWithoutFieldsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  FormTemplate?: Prisma.FormTemplateUpdateManyWithoutFormGroupingNestedInput
}

export type FormGroupingUncheckedUpdateWithoutFieldsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  FormTemplate?: Prisma.FormTemplateUncheckedUpdateManyWithoutFormGroupingNestedInput
}

export type FormGroupingUpdateWithoutFormTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  Fields?: Prisma.FormFieldUpdateManyWithoutFormGroupingNestedInput
}

export type FormGroupingUncheckedUpdateWithoutFormTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  Fields?: Prisma.FormFieldUncheckedUpdateManyWithoutFormGroupingNestedInput
}

export type FormGroupingUncheckedUpdateManyWithoutFormTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type FormGroupingCountOutputType
 */

export type FormGroupingCountOutputType = {
  Fields: number
  FormTemplate: number
}

export type FormGroupingCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Fields?: boolean | FormGroupingCountOutputTypeCountFieldsArgs
  FormTemplate?: boolean | FormGroupingCountOutputTypeCountFormTemplateArgs
}

/**
 * FormGroupingCountOutputType without action
 */
export type FormGroupingCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGroupingCountOutputType
   */
  select?: Prisma.FormGroupingCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FormGroupingCountOutputType without action
 */
export type FormGroupingCountOutputTypeCountFieldsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormFieldWhereInput
}

/**
 * FormGroupingCountOutputType without action
 */
export type FormGroupingCountOutputTypeCountFormTemplateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormTemplateWhereInput
}


export type FormGroupingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  order?: boolean
  Fields?: boolean | Prisma.FormGrouping$FieldsArgs<ExtArgs>
  FormTemplate?: boolean | Prisma.FormGrouping$FormTemplateArgs<ExtArgs>
  _count?: boolean | Prisma.FormGroupingCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formGrouping"]>

export type FormGroupingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  order?: boolean
}, ExtArgs["result"]["formGrouping"]>

export type FormGroupingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  order?: boolean
}, ExtArgs["result"]["formGrouping"]>

export type FormGroupingSelectScalar = {
  id?: boolean
  title?: boolean
  order?: boolean
}

export type FormGroupingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "order", ExtArgs["result"]["formGrouping"]>
export type FormGroupingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Fields?: boolean | Prisma.FormGrouping$FieldsArgs<ExtArgs>
  FormTemplate?: boolean | Prisma.FormGrouping$FormTemplateArgs<ExtArgs>
  _count?: boolean | Prisma.FormGroupingCountOutputTypeDefaultArgs<ExtArgs>
}
export type FormGroupingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type FormGroupingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $FormGroupingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormGrouping"
  objects: {
    Fields: Prisma.$FormFieldPayload<ExtArgs>[]
    FormTemplate: Prisma.$FormTemplatePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string | null
    order: number
  }, ExtArgs["result"]["formGrouping"]>
  composites: {}
}

export type FormGroupingGetPayload<S extends boolean | null | undefined | FormGroupingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload, S>

export type FormGroupingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormGroupingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormGroupingCountAggregateInputType | true
  }

export interface FormGroupingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormGrouping'], meta: { name: 'FormGrouping' } }
  /**
   * Find zero or one FormGrouping that matches the filter.
   * @param {FormGroupingFindUniqueArgs} args - Arguments to find a FormGrouping
   * @example
   * // Get one FormGrouping
   * const formGrouping = await prisma.formGrouping.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormGroupingFindUniqueArgs>(args: Prisma.SelectSubset<T, FormGroupingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormGrouping that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormGroupingFindUniqueOrThrowArgs} args - Arguments to find a FormGrouping
   * @example
   * // Get one FormGrouping
   * const formGrouping = await prisma.formGrouping.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormGroupingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormGroupingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormGrouping that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingFindFirstArgs} args - Arguments to find a FormGrouping
   * @example
   * // Get one FormGrouping
   * const formGrouping = await prisma.formGrouping.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormGroupingFindFirstArgs>(args?: Prisma.SelectSubset<T, FormGroupingFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormGrouping that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingFindFirstOrThrowArgs} args - Arguments to find a FormGrouping
   * @example
   * // Get one FormGrouping
   * const formGrouping = await prisma.formGrouping.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormGroupingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormGroupingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormGroupings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormGroupings
   * const formGroupings = await prisma.formGrouping.findMany()
   * 
   * // Get first 10 FormGroupings
   * const formGroupings = await prisma.formGrouping.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formGroupingWithIdOnly = await prisma.formGrouping.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormGroupingFindManyArgs>(args?: Prisma.SelectSubset<T, FormGroupingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormGrouping.
   * @param {FormGroupingCreateArgs} args - Arguments to create a FormGrouping.
   * @example
   * // Create one FormGrouping
   * const FormGrouping = await prisma.formGrouping.create({
   *   data: {
   *     // ... data to create a FormGrouping
   *   }
   * })
   * 
   */
  create<T extends FormGroupingCreateArgs>(args: Prisma.SelectSubset<T, FormGroupingCreateArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormGroupings.
   * @param {FormGroupingCreateManyArgs} args - Arguments to create many FormGroupings.
   * @example
   * // Create many FormGroupings
   * const formGrouping = await prisma.formGrouping.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormGroupingCreateManyArgs>(args?: Prisma.SelectSubset<T, FormGroupingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormGroupings and returns the data saved in the database.
   * @param {FormGroupingCreateManyAndReturnArgs} args - Arguments to create many FormGroupings.
   * @example
   * // Create many FormGroupings
   * const formGrouping = await prisma.formGrouping.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormGroupings and only return the `id`
   * const formGroupingWithIdOnly = await prisma.formGrouping.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormGroupingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormGroupingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormGrouping.
   * @param {FormGroupingDeleteArgs} args - Arguments to delete one FormGrouping.
   * @example
   * // Delete one FormGrouping
   * const FormGrouping = await prisma.formGrouping.delete({
   *   where: {
   *     // ... filter to delete one FormGrouping
   *   }
   * })
   * 
   */
  delete<T extends FormGroupingDeleteArgs>(args: Prisma.SelectSubset<T, FormGroupingDeleteArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormGrouping.
   * @param {FormGroupingUpdateArgs} args - Arguments to update one FormGrouping.
   * @example
   * // Update one FormGrouping
   * const formGrouping = await prisma.formGrouping.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormGroupingUpdateArgs>(args: Prisma.SelectSubset<T, FormGroupingUpdateArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormGroupings.
   * @param {FormGroupingDeleteManyArgs} args - Arguments to filter FormGroupings to delete.
   * @example
   * // Delete a few FormGroupings
   * const { count } = await prisma.formGrouping.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormGroupingDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormGroupingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormGroupings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormGroupings
   * const formGrouping = await prisma.formGrouping.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormGroupingUpdateManyArgs>(args: Prisma.SelectSubset<T, FormGroupingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormGroupings and returns the data updated in the database.
   * @param {FormGroupingUpdateManyAndReturnArgs} args - Arguments to update many FormGroupings.
   * @example
   * // Update many FormGroupings
   * const formGrouping = await prisma.formGrouping.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormGroupings and only return the `id`
   * const formGroupingWithIdOnly = await prisma.formGrouping.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormGroupingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormGroupingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormGrouping.
   * @param {FormGroupingUpsertArgs} args - Arguments to update or create a FormGrouping.
   * @example
   * // Update or create a FormGrouping
   * const formGrouping = await prisma.formGrouping.upsert({
   *   create: {
   *     // ... data to create a FormGrouping
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormGrouping we want to update
   *   }
   * })
   */
  upsert<T extends FormGroupingUpsertArgs>(args: Prisma.SelectSubset<T, FormGroupingUpsertArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormGroupings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingCountArgs} args - Arguments to filter FormGroupings to count.
   * @example
   * // Count the number of FormGroupings
   * const count = await prisma.formGrouping.count({
   *   where: {
   *     // ... the filter for the FormGroupings we want to count
   *   }
   * })
  **/
  count<T extends FormGroupingCountArgs>(
    args?: Prisma.Subset<T, FormGroupingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormGroupingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormGrouping.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormGroupingAggregateArgs>(args: Prisma.Subset<T, FormGroupingAggregateArgs>): Prisma.PrismaPromise<GetFormGroupingAggregateType<T>>

  /**
   * Group by FormGrouping.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormGroupingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormGroupingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormGroupingGroupByArgs['orderBy'] }
      : { orderBy?: FormGroupingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormGroupingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormGroupingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormGrouping model
 */
readonly fields: FormGroupingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormGrouping.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormGroupingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Fields<T extends Prisma.FormGrouping$FieldsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormGrouping$FieldsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  FormTemplate<T extends Prisma.FormGrouping$FormTemplateArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormGrouping$FormTemplateArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormGrouping model
 */
export interface FormGroupingFieldRefs {
  readonly id: Prisma.FieldRef<"FormGrouping", 'String'>
  readonly title: Prisma.FieldRef<"FormGrouping", 'String'>
  readonly order: Prisma.FieldRef<"FormGrouping", 'Int'>
}
    

// Custom InputTypes
/**
 * FormGrouping findUnique
 */
export type FormGroupingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * Filter, which FormGrouping to fetch.
   */
  where: Prisma.FormGroupingWhereUniqueInput
}

/**
 * FormGrouping findUniqueOrThrow
 */
export type FormGroupingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * Filter, which FormGrouping to fetch.
   */
  where: Prisma.FormGroupingWhereUniqueInput
}

/**
 * FormGrouping findFirst
 */
export type FormGroupingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * Filter, which FormGrouping to fetch.
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormGroupings to fetch.
   */
  orderBy?: Prisma.FormGroupingOrderByWithRelationInput | Prisma.FormGroupingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormGroupings.
   */
  cursor?: Prisma.FormGroupingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormGroupings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormGroupings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormGroupings.
   */
  distinct?: Prisma.FormGroupingScalarFieldEnum | Prisma.FormGroupingScalarFieldEnum[]
}

/**
 * FormGrouping findFirstOrThrow
 */
export type FormGroupingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * Filter, which FormGrouping to fetch.
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormGroupings to fetch.
   */
  orderBy?: Prisma.FormGroupingOrderByWithRelationInput | Prisma.FormGroupingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormGroupings.
   */
  cursor?: Prisma.FormGroupingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormGroupings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormGroupings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormGroupings.
   */
  distinct?: Prisma.FormGroupingScalarFieldEnum | Prisma.FormGroupingScalarFieldEnum[]
}

/**
 * FormGrouping findMany
 */
export type FormGroupingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * Filter, which FormGroupings to fetch.
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormGroupings to fetch.
   */
  orderBy?: Prisma.FormGroupingOrderByWithRelationInput | Prisma.FormGroupingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormGroupings.
   */
  cursor?: Prisma.FormGroupingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormGroupings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormGroupings.
   */
  skip?: number
  distinct?: Prisma.FormGroupingScalarFieldEnum | Prisma.FormGroupingScalarFieldEnum[]
}

/**
 * FormGrouping create
 */
export type FormGroupingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * The data needed to create a FormGrouping.
   */
  data: Prisma.XOR<Prisma.FormGroupingCreateInput, Prisma.FormGroupingUncheckedCreateInput>
}

/**
 * FormGrouping createMany
 */
export type FormGroupingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormGroupings.
   */
  data: Prisma.FormGroupingCreateManyInput | Prisma.FormGroupingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormGrouping createManyAndReturn
 */
export type FormGroupingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * The data used to create many FormGroupings.
   */
  data: Prisma.FormGroupingCreateManyInput | Prisma.FormGroupingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormGrouping update
 */
export type FormGroupingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * The data needed to update a FormGrouping.
   */
  data: Prisma.XOR<Prisma.FormGroupingUpdateInput, Prisma.FormGroupingUncheckedUpdateInput>
  /**
   * Choose, which FormGrouping to update.
   */
  where: Prisma.FormGroupingWhereUniqueInput
}

/**
 * FormGrouping updateMany
 */
export type FormGroupingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormGroupings.
   */
  data: Prisma.XOR<Prisma.FormGroupingUpdateManyMutationInput, Prisma.FormGroupingUncheckedUpdateManyInput>
  /**
   * Filter which FormGroupings to update
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * Limit how many FormGroupings to update.
   */
  limit?: number
}

/**
 * FormGrouping updateManyAndReturn
 */
export type FormGroupingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * The data used to update FormGroupings.
   */
  data: Prisma.XOR<Prisma.FormGroupingUpdateManyMutationInput, Prisma.FormGroupingUncheckedUpdateManyInput>
  /**
   * Filter which FormGroupings to update
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * Limit how many FormGroupings to update.
   */
  limit?: number
}

/**
 * FormGrouping upsert
 */
export type FormGroupingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * The filter to search for the FormGrouping to update in case it exists.
   */
  where: Prisma.FormGroupingWhereUniqueInput
  /**
   * In case the FormGrouping found by the `where` argument doesn't exist, create a new FormGrouping with this data.
   */
  create: Prisma.XOR<Prisma.FormGroupingCreateInput, Prisma.FormGroupingUncheckedCreateInput>
  /**
   * In case the FormGrouping was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormGroupingUpdateInput, Prisma.FormGroupingUncheckedUpdateInput>
}

/**
 * FormGrouping delete
 */
export type FormGroupingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
  /**
   * Filter which FormGrouping to delete.
   */
  where: Prisma.FormGroupingWhereUniqueInput
}

/**
 * FormGrouping deleteMany
 */
export type FormGroupingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormGroupings to delete
   */
  where?: Prisma.FormGroupingWhereInput
  /**
   * Limit how many FormGroupings to delete.
   */
  limit?: number
}

/**
 * FormGrouping.Fields
 */
export type FormGrouping$FieldsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  where?: Prisma.FormFieldWhereInput
  orderBy?: Prisma.FormFieldOrderByWithRelationInput | Prisma.FormFieldOrderByWithRelationInput[]
  cursor?: Prisma.FormFieldWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormFieldScalarFieldEnum | Prisma.FormFieldScalarFieldEnum[]
}

/**
 * FormGrouping.FormTemplate
 */
export type FormGrouping$FormTemplateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormTemplate
   */
  select?: Prisma.FormTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormTemplate
   */
  omit?: Prisma.FormTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormTemplateInclude<ExtArgs> | null
  where?: Prisma.FormTemplateWhereInput
  orderBy?: Prisma.FormTemplateOrderByWithRelationInput | Prisma.FormTemplateOrderByWithRelationInput[]
  cursor?: Prisma.FormTemplateWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormTemplateScalarFieldEnum | Prisma.FormTemplateScalarFieldEnum[]
}

/**
 * FormGrouping without action
 */
export type FormGroupingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormGrouping
   */
  select?: Prisma.FormGroupingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormGrouping
   */
  omit?: Prisma.FormGroupingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormGroupingInclude<ExtArgs> | null
}
