
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FormField` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FormField
 * 
 */
export type FormFieldModel = runtime.Types.Result.DefaultSelection<Prisma.$FormFieldPayload>

export type AggregateFormField = {
  _count: FormFieldCountAggregateOutputType | null
  _avg: FormFieldAvgAggregateOutputType | null
  _sum: FormFieldSumAggregateOutputType | null
  _min: FormFieldMinAggregateOutputType | null
  _max: FormFieldMaxAggregateOutputType | null
}

export type FormFieldAvgAggregateOutputType = {
  order: number | null
  maxLength: number | null
  minLength: number | null
}

export type FormFieldSumAggregateOutputType = {
  order: number | null
  maxLength: number | null
  minLength: number | null
}

export type FormFieldMinAggregateOutputType = {
  id: string | null
  formGroupingId: string | null
  label: string | null
  type: $Enums.FieldType | null
  required: boolean | null
  order: number | null
  placeholder: string | null
  maxLength: number | null
  minLength: number | null
  content: string | null
  filter: string | null
  multiple: boolean | null
}

export type FormFieldMaxAggregateOutputType = {
  id: string | null
  formGroupingId: string | null
  label: string | null
  type: $Enums.FieldType | null
  required: boolean | null
  order: number | null
  placeholder: string | null
  maxLength: number | null
  minLength: number | null
  content: string | null
  filter: string | null
  multiple: boolean | null
}

export type FormFieldCountAggregateOutputType = {
  id: number
  formGroupingId: number
  label: number
  type: number
  required: number
  order: number
  placeholder: number
  maxLength: number
  minLength: number
  content: number
  filter: number
  multiple: number
  _all: number
}


export type FormFieldAvgAggregateInputType = {
  order?: true
  maxLength?: true
  minLength?: true
}

export type FormFieldSumAggregateInputType = {
  order?: true
  maxLength?: true
  minLength?: true
}

export type FormFieldMinAggregateInputType = {
  id?: true
  formGroupingId?: true
  label?: true
  type?: true
  required?: true
  order?: true
  placeholder?: true
  maxLength?: true
  minLength?: true
  content?: true
  filter?: true
  multiple?: true
}

export type FormFieldMaxAggregateInputType = {
  id?: true
  formGroupingId?: true
  label?: true
  type?: true
  required?: true
  order?: true
  placeholder?: true
  maxLength?: true
  minLength?: true
  content?: true
  filter?: true
  multiple?: true
}

export type FormFieldCountAggregateInputType = {
  id?: true
  formGroupingId?: true
  label?: true
  type?: true
  required?: true
  order?: true
  placeholder?: true
  maxLength?: true
  minLength?: true
  content?: true
  filter?: true
  multiple?: true
  _all?: true
}

export type FormFieldAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormField to aggregate.
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFields to fetch.
   */
  orderBy?: Prisma.FormFieldOrderByWithRelationInput | Prisma.FormFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFields.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormFields
  **/
  _count?: true | FormFieldCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FormFieldAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FormFieldSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormFieldMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormFieldMaxAggregateInputType
}

export type GetFormFieldAggregateType<T extends FormFieldAggregateArgs> = {
      [P in keyof T & keyof AggregateFormField]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormField[P]>
    : Prisma.GetScalarType<T[P], AggregateFormField[P]>
}




export type FormFieldGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormFieldWhereInput
  orderBy?: Prisma.FormFieldOrderByWithAggregationInput | Prisma.FormFieldOrderByWithAggregationInput[]
  by: Prisma.FormFieldScalarFieldEnum[] | Prisma.FormFieldScalarFieldEnum
  having?: Prisma.FormFieldScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormFieldCountAggregateInputType | true
  _avg?: FormFieldAvgAggregateInputType
  _sum?: FormFieldSumAggregateInputType
  _min?: FormFieldMinAggregateInputType
  _max?: FormFieldMaxAggregateInputType
}

export type FormFieldGroupByOutputType = {
  id: string
  formGroupingId: string
  label: string
  type: $Enums.FieldType
  required: boolean
  order: number
  placeholder: string | null
  maxLength: number | null
  minLength: number | null
  content: string | null
  filter: string | null
  multiple: boolean | null
  _count: FormFieldCountAggregateOutputType | null
  _avg: FormFieldAvgAggregateOutputType | null
  _sum: FormFieldSumAggregateOutputType | null
  _min: FormFieldMinAggregateOutputType | null
  _max: FormFieldMaxAggregateOutputType | null
}

type GetFormFieldGroupByPayload<T extends FormFieldGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormFieldGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormFieldGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormFieldGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormFieldGroupByOutputType[P]>
      }
    >
  >



export type FormFieldWhereInput = {
  AND?: Prisma.FormFieldWhereInput | Prisma.FormFieldWhereInput[]
  OR?: Prisma.FormFieldWhereInput[]
  NOT?: Prisma.FormFieldWhereInput | Prisma.FormFieldWhereInput[]
  id?: Prisma.StringFilter<"FormField"> | string
  formGroupingId?: Prisma.StringFilter<"FormField"> | string
  label?: Prisma.StringFilter<"FormField"> | string
  type?: Prisma.EnumFieldTypeFilter<"FormField"> | $Enums.FieldType
  required?: Prisma.BoolFilter<"FormField"> | boolean
  order?: Prisma.IntFilter<"FormField"> | number
  placeholder?: Prisma.StringNullableFilter<"FormField"> | string | null
  maxLength?: Prisma.IntNullableFilter<"FormField"> | number | null
  minLength?: Prisma.IntNullableFilter<"FormField"> | number | null
  content?: Prisma.StringNullableFilter<"FormField"> | string | null
  filter?: Prisma.StringNullableFilter<"FormField"> | string | null
  multiple?: Prisma.BoolNullableFilter<"FormField"> | boolean | null
  FormGrouping?: Prisma.XOR<Prisma.FormGroupingScalarRelationFilter, Prisma.FormGroupingWhereInput>
  Options?: Prisma.FormFieldOptionListRelationFilter
}

export type FormFieldOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  formGroupingId?: Prisma.SortOrder
  label?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  order?: Prisma.SortOrder
  placeholder?: Prisma.SortOrderInput | Prisma.SortOrder
  maxLength?: Prisma.SortOrderInput | Prisma.SortOrder
  minLength?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  filter?: Prisma.SortOrderInput | Prisma.SortOrder
  multiple?: Prisma.SortOrderInput | Prisma.SortOrder
  FormGrouping?: Prisma.FormGroupingOrderByWithRelationInput
  Options?: Prisma.FormFieldOptionOrderByRelationAggregateInput
}

export type FormFieldWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormFieldWhereInput | Prisma.FormFieldWhereInput[]
  OR?: Prisma.FormFieldWhereInput[]
  NOT?: Prisma.FormFieldWhereInput | Prisma.FormFieldWhereInput[]
  formGroupingId?: Prisma.StringFilter<"FormField"> | string
  label?: Prisma.StringFilter<"FormField"> | string
  type?: Prisma.EnumFieldTypeFilter<"FormField"> | $Enums.FieldType
  required?: Prisma.BoolFilter<"FormField"> | boolean
  order?: Prisma.IntFilter<"FormField"> | number
  placeholder?: Prisma.StringNullableFilter<"FormField"> | string | null
  maxLength?: Prisma.IntNullableFilter<"FormField"> | number | null
  minLength?: Prisma.IntNullableFilter<"FormField"> | number | null
  content?: Prisma.StringNullableFilter<"FormField"> | string | null
  filter?: Prisma.StringNullableFilter<"FormField"> | string | null
  multiple?: Prisma.BoolNullableFilter<"FormField"> | boolean | null
  FormGrouping?: Prisma.XOR<Prisma.FormGroupingScalarRelationFilter, Prisma.FormGroupingWhereInput>
  Options?: Prisma.FormFieldOptionListRelationFilter
}, "id">

export type FormFieldOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  formGroupingId?: Prisma.SortOrder
  label?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  order?: Prisma.SortOrder
  placeholder?: Prisma.SortOrderInput | Prisma.SortOrder
  maxLength?: Prisma.SortOrderInput | Prisma.SortOrder
  minLength?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  filter?: Prisma.SortOrderInput | Prisma.SortOrder
  multiple?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FormFieldCountOrderByAggregateInput
  _avg?: Prisma.FormFieldAvgOrderByAggregateInput
  _max?: Prisma.FormFieldMaxOrderByAggregateInput
  _min?: Prisma.FormFieldMinOrderByAggregateInput
  _sum?: Prisma.FormFieldSumOrderByAggregateInput
}

export type FormFieldScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormFieldScalarWhereWithAggregatesInput | Prisma.FormFieldScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormFieldScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormFieldScalarWhereWithAggregatesInput | Prisma.FormFieldScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormField"> | string
  formGroupingId?: Prisma.StringWithAggregatesFilter<"FormField"> | string
  label?: Prisma.StringWithAggregatesFilter<"FormField"> | string
  type?: Prisma.EnumFieldTypeWithAggregatesFilter<"FormField"> | $Enums.FieldType
  required?: Prisma.BoolWithAggregatesFilter<"FormField"> | boolean
  order?: Prisma.IntWithAggregatesFilter<"FormField"> | number
  placeholder?: Prisma.StringNullableWithAggregatesFilter<"FormField"> | string | null
  maxLength?: Prisma.IntNullableWithAggregatesFilter<"FormField"> | number | null
  minLength?: Prisma.IntNullableWithAggregatesFilter<"FormField"> | number | null
  content?: Prisma.StringNullableWithAggregatesFilter<"FormField"> | string | null
  filter?: Prisma.StringNullableWithAggregatesFilter<"FormField"> | string | null
  multiple?: Prisma.BoolNullableWithAggregatesFilter<"FormField"> | boolean | null
}

export type FormFieldCreateInput = {
  id?: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
  FormGrouping: Prisma.FormGroupingCreateNestedOneWithoutFieldsInput
  Options?: Prisma.FormFieldOptionCreateNestedManyWithoutFieldInput
}

export type FormFieldUncheckedCreateInput = {
  id?: string
  formGroupingId: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
  Options?: Prisma.FormFieldOptionUncheckedCreateNestedManyWithoutFieldInput
}

export type FormFieldUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  FormGrouping?: Prisma.FormGroupingUpdateOneRequiredWithoutFieldsNestedInput
  Options?: Prisma.FormFieldOptionUpdateManyWithoutFieldNestedInput
}

export type FormFieldUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formGroupingId?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  Options?: Prisma.FormFieldOptionUncheckedUpdateManyWithoutFieldNestedInput
}

export type FormFieldCreateManyInput = {
  id?: string
  formGroupingId: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
}

export type FormFieldUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type FormFieldUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formGroupingId?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type FormFieldListRelationFilter = {
  every?: Prisma.FormFieldWhereInput
  some?: Prisma.FormFieldWhereInput
  none?: Prisma.FormFieldWhereInput
}

export type FormFieldOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormFieldCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formGroupingId?: Prisma.SortOrder
  label?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  order?: Prisma.SortOrder
  placeholder?: Prisma.SortOrder
  maxLength?: Prisma.SortOrder
  minLength?: Prisma.SortOrder
  content?: Prisma.SortOrder
  filter?: Prisma.SortOrder
  multiple?: Prisma.SortOrder
}

export type FormFieldAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
  maxLength?: Prisma.SortOrder
  minLength?: Prisma.SortOrder
}

export type FormFieldMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formGroupingId?: Prisma.SortOrder
  label?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  order?: Prisma.SortOrder
  placeholder?: Prisma.SortOrder
  maxLength?: Prisma.SortOrder
  minLength?: Prisma.SortOrder
  content?: Prisma.SortOrder
  filter?: Prisma.SortOrder
  multiple?: Prisma.SortOrder
}

export type FormFieldMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formGroupingId?: Prisma.SortOrder
  label?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  order?: Prisma.SortOrder
  placeholder?: Prisma.SortOrder
  maxLength?: Prisma.SortOrder
  minLength?: Prisma.SortOrder
  content?: Prisma.SortOrder
  filter?: Prisma.SortOrder
  multiple?: Prisma.SortOrder
}

export type FormFieldSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
  maxLength?: Prisma.SortOrder
  minLength?: Prisma.SortOrder
}

export type FormFieldScalarRelationFilter = {
  is?: Prisma.FormFieldWhereInput
  isNot?: Prisma.FormFieldWhereInput
}

export type FormFieldCreateNestedManyWithoutFormGroupingInput = {
  create?: Prisma.XOR<Prisma.FormFieldCreateWithoutFormGroupingInput, Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput> | Prisma.FormFieldCreateWithoutFormGroupingInput[] | Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput | Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput[]
  createMany?: Prisma.FormFieldCreateManyFormGroupingInputEnvelope
  connect?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
}

export type FormFieldUncheckedCreateNestedManyWithoutFormGroupingInput = {
  create?: Prisma.XOR<Prisma.FormFieldCreateWithoutFormGroupingInput, Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput> | Prisma.FormFieldCreateWithoutFormGroupingInput[] | Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput | Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput[]
  createMany?: Prisma.FormFieldCreateManyFormGroupingInputEnvelope
  connect?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
}

export type FormFieldUpdateManyWithoutFormGroupingNestedInput = {
  create?: Prisma.XOR<Prisma.FormFieldCreateWithoutFormGroupingInput, Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput> | Prisma.FormFieldCreateWithoutFormGroupingInput[] | Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput | Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput[]
  upsert?: Prisma.FormFieldUpsertWithWhereUniqueWithoutFormGroupingInput | Prisma.FormFieldUpsertWithWhereUniqueWithoutFormGroupingInput[]
  createMany?: Prisma.FormFieldCreateManyFormGroupingInputEnvelope
  set?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  disconnect?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  delete?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  connect?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  update?: Prisma.FormFieldUpdateWithWhereUniqueWithoutFormGroupingInput | Prisma.FormFieldUpdateWithWhereUniqueWithoutFormGroupingInput[]
  updateMany?: Prisma.FormFieldUpdateManyWithWhereWithoutFormGroupingInput | Prisma.FormFieldUpdateManyWithWhereWithoutFormGroupingInput[]
  deleteMany?: Prisma.FormFieldScalarWhereInput | Prisma.FormFieldScalarWhereInput[]
}

export type FormFieldUncheckedUpdateManyWithoutFormGroupingNestedInput = {
  create?: Prisma.XOR<Prisma.FormFieldCreateWithoutFormGroupingInput, Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput> | Prisma.FormFieldCreateWithoutFormGroupingInput[] | Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput[]
  connectOrCreate?: Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput | Prisma.FormFieldCreateOrConnectWithoutFormGroupingInput[]
  upsert?: Prisma.FormFieldUpsertWithWhereUniqueWithoutFormGroupingInput | Prisma.FormFieldUpsertWithWhereUniqueWithoutFormGroupingInput[]
  createMany?: Prisma.FormFieldCreateManyFormGroupingInputEnvelope
  set?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  disconnect?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  delete?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  connect?: Prisma.FormFieldWhereUniqueInput | Prisma.FormFieldWhereUniqueInput[]
  update?: Prisma.FormFieldUpdateWithWhereUniqueWithoutFormGroupingInput | Prisma.FormFieldUpdateWithWhereUniqueWithoutFormGroupingInput[]
  updateMany?: Prisma.FormFieldUpdateManyWithWhereWithoutFormGroupingInput | Prisma.FormFieldUpdateManyWithWhereWithoutFormGroupingInput[]
  deleteMany?: Prisma.FormFieldScalarWhereInput | Prisma.FormFieldScalarWhereInput[]
}

export type EnumFieldTypeFieldUpdateOperationsInput = {
  set?: $Enums.FieldType
}

export type FormFieldCreateNestedOneWithoutOptionsInput = {
  create?: Prisma.XOR<Prisma.FormFieldCreateWithoutOptionsInput, Prisma.FormFieldUncheckedCreateWithoutOptionsInput>
  connectOrCreate?: Prisma.FormFieldCreateOrConnectWithoutOptionsInput
  connect?: Prisma.FormFieldWhereUniqueInput
}

export type FormFieldUpdateOneRequiredWithoutOptionsNestedInput = {
  create?: Prisma.XOR<Prisma.FormFieldCreateWithoutOptionsInput, Prisma.FormFieldUncheckedCreateWithoutOptionsInput>
  connectOrCreate?: Prisma.FormFieldCreateOrConnectWithoutOptionsInput
  upsert?: Prisma.FormFieldUpsertWithoutOptionsInput
  connect?: Prisma.FormFieldWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FormFieldUpdateToOneWithWhereWithoutOptionsInput, Prisma.FormFieldUpdateWithoutOptionsInput>, Prisma.FormFieldUncheckedUpdateWithoutOptionsInput>
}

export type FormFieldCreateWithoutFormGroupingInput = {
  id?: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
  Options?: Prisma.FormFieldOptionCreateNestedManyWithoutFieldInput
}

export type FormFieldUncheckedCreateWithoutFormGroupingInput = {
  id?: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
  Options?: Prisma.FormFieldOptionUncheckedCreateNestedManyWithoutFieldInput
}

export type FormFieldCreateOrConnectWithoutFormGroupingInput = {
  where: Prisma.FormFieldWhereUniqueInput
  create: Prisma.XOR<Prisma.FormFieldCreateWithoutFormGroupingInput, Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput>
}

export type FormFieldCreateManyFormGroupingInputEnvelope = {
  data: Prisma.FormFieldCreateManyFormGroupingInput | Prisma.FormFieldCreateManyFormGroupingInput[]
  skipDuplicates?: boolean
}

export type FormFieldUpsertWithWhereUniqueWithoutFormGroupingInput = {
  where: Prisma.FormFieldWhereUniqueInput
  update: Prisma.XOR<Prisma.FormFieldUpdateWithoutFormGroupingInput, Prisma.FormFieldUncheckedUpdateWithoutFormGroupingInput>
  create: Prisma.XOR<Prisma.FormFieldCreateWithoutFormGroupingInput, Prisma.FormFieldUncheckedCreateWithoutFormGroupingInput>
}

export type FormFieldUpdateWithWhereUniqueWithoutFormGroupingInput = {
  where: Prisma.FormFieldWhereUniqueInput
  data: Prisma.XOR<Prisma.FormFieldUpdateWithoutFormGroupingInput, Prisma.FormFieldUncheckedUpdateWithoutFormGroupingInput>
}

export type FormFieldUpdateManyWithWhereWithoutFormGroupingInput = {
  where: Prisma.FormFieldScalarWhereInput
  data: Prisma.XOR<Prisma.FormFieldUpdateManyMutationInput, Prisma.FormFieldUncheckedUpdateManyWithoutFormGroupingInput>
}

export type FormFieldScalarWhereInput = {
  AND?: Prisma.FormFieldScalarWhereInput | Prisma.FormFieldScalarWhereInput[]
  OR?: Prisma.FormFieldScalarWhereInput[]
  NOT?: Prisma.FormFieldScalarWhereInput | Prisma.FormFieldScalarWhereInput[]
  id?: Prisma.StringFilter<"FormField"> | string
  formGroupingId?: Prisma.StringFilter<"FormField"> | string
  label?: Prisma.StringFilter<"FormField"> | string
  type?: Prisma.EnumFieldTypeFilter<"FormField"> | $Enums.FieldType
  required?: Prisma.BoolFilter<"FormField"> | boolean
  order?: Prisma.IntFilter<"FormField"> | number
  placeholder?: Prisma.StringNullableFilter<"FormField"> | string | null
  maxLength?: Prisma.IntNullableFilter<"FormField"> | number | null
  minLength?: Prisma.IntNullableFilter<"FormField"> | number | null
  content?: Prisma.StringNullableFilter<"FormField"> | string | null
  filter?: Prisma.StringNullableFilter<"FormField"> | string | null
  multiple?: Prisma.BoolNullableFilter<"FormField"> | boolean | null
}

export type FormFieldCreateWithoutOptionsInput = {
  id?: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
  FormGrouping: Prisma.FormGroupingCreateNestedOneWithoutFieldsInput
}

export type FormFieldUncheckedCreateWithoutOptionsInput = {
  id?: string
  formGroupingId: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
}

export type FormFieldCreateOrConnectWithoutOptionsInput = {
  where: Prisma.FormFieldWhereUniqueInput
  create: Prisma.XOR<Prisma.FormFieldCreateWithoutOptionsInput, Prisma.FormFieldUncheckedCreateWithoutOptionsInput>
}

export type FormFieldUpsertWithoutOptionsInput = {
  update: Prisma.XOR<Prisma.FormFieldUpdateWithoutOptionsInput, Prisma.FormFieldUncheckedUpdateWithoutOptionsInput>
  create: Prisma.XOR<Prisma.FormFieldCreateWithoutOptionsInput, Prisma.FormFieldUncheckedCreateWithoutOptionsInput>
  where?: Prisma.FormFieldWhereInput
}

export type FormFieldUpdateToOneWithWhereWithoutOptionsInput = {
  where?: Prisma.FormFieldWhereInput
  data: Prisma.XOR<Prisma.FormFieldUpdateWithoutOptionsInput, Prisma.FormFieldUncheckedUpdateWithoutOptionsInput>
}

export type FormFieldUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  FormGrouping?: Prisma.FormGroupingUpdateOneRequiredWithoutFieldsNestedInput
}

export type FormFieldUncheckedUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formGroupingId?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type FormFieldCreateManyFormGroupingInput = {
  id?: string
  label: string
  type: $Enums.FieldType
  required?: boolean
  order: number
  placeholder?: string | null
  maxLength?: number | null
  minLength?: number | null
  content?: string | null
  filter?: string | null
  multiple?: boolean | null
}

export type FormFieldUpdateWithoutFormGroupingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  Options?: Prisma.FormFieldOptionUpdateManyWithoutFieldNestedInput
}

export type FormFieldUncheckedUpdateWithoutFormGroupingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  Options?: Prisma.FormFieldOptionUncheckedUpdateManyWithoutFieldNestedInput
}

export type FormFieldUncheckedUpdateManyWithoutFormGroupingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  placeholder?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  minLength?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  multiple?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}


/**
 * Count Type FormFieldCountOutputType
 */

export type FormFieldCountOutputType = {
  Options: number
}

export type FormFieldCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Options?: boolean | FormFieldCountOutputTypeCountOptionsArgs
}

/**
 * FormFieldCountOutputType without action
 */
export type FormFieldCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldCountOutputType
   */
  select?: Prisma.FormFieldCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FormFieldCountOutputType without action
 */
export type FormFieldCountOutputTypeCountOptionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormFieldOptionWhereInput
}


export type FormFieldSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formGroupingId?: boolean
  label?: boolean
  type?: boolean
  required?: boolean
  order?: boolean
  placeholder?: boolean
  maxLength?: boolean
  minLength?: boolean
  content?: boolean
  filter?: boolean
  multiple?: boolean
  FormGrouping?: boolean | Prisma.FormGroupingDefaultArgs<ExtArgs>
  Options?: boolean | Prisma.FormField$OptionsArgs<ExtArgs>
  _count?: boolean | Prisma.FormFieldCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formField"]>

export type FormFieldSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formGroupingId?: boolean
  label?: boolean
  type?: boolean
  required?: boolean
  order?: boolean
  placeholder?: boolean
  maxLength?: boolean
  minLength?: boolean
  content?: boolean
  filter?: boolean
  multiple?: boolean
  FormGrouping?: boolean | Prisma.FormGroupingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formField"]>

export type FormFieldSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formGroupingId?: boolean
  label?: boolean
  type?: boolean
  required?: boolean
  order?: boolean
  placeholder?: boolean
  maxLength?: boolean
  minLength?: boolean
  content?: boolean
  filter?: boolean
  multiple?: boolean
  FormGrouping?: boolean | Prisma.FormGroupingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formField"]>

export type FormFieldSelectScalar = {
  id?: boolean
  formGroupingId?: boolean
  label?: boolean
  type?: boolean
  required?: boolean
  order?: boolean
  placeholder?: boolean
  maxLength?: boolean
  minLength?: boolean
  content?: boolean
  filter?: boolean
  multiple?: boolean
}

export type FormFieldOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "formGroupingId" | "label" | "type" | "required" | "order" | "placeholder" | "maxLength" | "minLength" | "content" | "filter" | "multiple", ExtArgs["result"]["formField"]>
export type FormFieldInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormGrouping?: boolean | Prisma.FormGroupingDefaultArgs<ExtArgs>
  Options?: boolean | Prisma.FormField$OptionsArgs<ExtArgs>
  _count?: boolean | Prisma.FormFieldCountOutputTypeDefaultArgs<ExtArgs>
}
export type FormFieldIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormGrouping?: boolean | Prisma.FormGroupingDefaultArgs<ExtArgs>
}
export type FormFieldIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormGrouping?: boolean | Prisma.FormGroupingDefaultArgs<ExtArgs>
}

export type $FormFieldPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormField"
  objects: {
    FormGrouping: Prisma.$FormGroupingPayload<ExtArgs>
    Options: Prisma.$FormFieldOptionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    formGroupingId: string
    label: string
    type: $Enums.FieldType
    required: boolean
    order: number
    placeholder: string | null
    maxLength: number | null
    minLength: number | null
    content: string | null
    filter: string | null
    multiple: boolean | null
  }, ExtArgs["result"]["formField"]>
  composites: {}
}

export type FormFieldGetPayload<S extends boolean | null | undefined | FormFieldDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormFieldPayload, S>

export type FormFieldCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormFieldFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormFieldCountAggregateInputType | true
  }

export interface FormFieldDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormField'], meta: { name: 'FormField' } }
  /**
   * Find zero or one FormField that matches the filter.
   * @param {FormFieldFindUniqueArgs} args - Arguments to find a FormField
   * @example
   * // Get one FormField
   * const formField = await prisma.formField.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormFieldFindUniqueArgs>(args: Prisma.SelectSubset<T, FormFieldFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormField that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormFieldFindUniqueOrThrowArgs} args - Arguments to find a FormField
   * @example
   * // Get one FormField
   * const formField = await prisma.formField.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormFieldFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormField that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldFindFirstArgs} args - Arguments to find a FormField
   * @example
   * // Get one FormField
   * const formField = await prisma.formField.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormFieldFindFirstArgs>(args?: Prisma.SelectSubset<T, FormFieldFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormField that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldFindFirstOrThrowArgs} args - Arguments to find a FormField
   * @example
   * // Get one FormField
   * const formField = await prisma.formField.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormFieldFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormFields that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormFields
   * const formFields = await prisma.formField.findMany()
   * 
   * // Get first 10 FormFields
   * const formFields = await prisma.formField.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formFieldWithIdOnly = await prisma.formField.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormFieldFindManyArgs>(args?: Prisma.SelectSubset<T, FormFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormField.
   * @param {FormFieldCreateArgs} args - Arguments to create a FormField.
   * @example
   * // Create one FormField
   * const FormField = await prisma.formField.create({
   *   data: {
   *     // ... data to create a FormField
   *   }
   * })
   * 
   */
  create<T extends FormFieldCreateArgs>(args: Prisma.SelectSubset<T, FormFieldCreateArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormFields.
   * @param {FormFieldCreateManyArgs} args - Arguments to create many FormFields.
   * @example
   * // Create many FormFields
   * const formField = await prisma.formField.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormFieldCreateManyArgs>(args?: Prisma.SelectSubset<T, FormFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormFields and returns the data saved in the database.
   * @param {FormFieldCreateManyAndReturnArgs} args - Arguments to create many FormFields.
   * @example
   * // Create many FormFields
   * const formField = await prisma.formField.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormFields and only return the `id`
   * const formFieldWithIdOnly = await prisma.formField.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormFieldCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormFieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormField.
   * @param {FormFieldDeleteArgs} args - Arguments to delete one FormField.
   * @example
   * // Delete one FormField
   * const FormField = await prisma.formField.delete({
   *   where: {
   *     // ... filter to delete one FormField
   *   }
   * })
   * 
   */
  delete<T extends FormFieldDeleteArgs>(args: Prisma.SelectSubset<T, FormFieldDeleteArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormField.
   * @param {FormFieldUpdateArgs} args - Arguments to update one FormField.
   * @example
   * // Update one FormField
   * const formField = await prisma.formField.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormFieldUpdateArgs>(args: Prisma.SelectSubset<T, FormFieldUpdateArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormFields.
   * @param {FormFieldDeleteManyArgs} args - Arguments to filter FormFields to delete.
   * @example
   * // Delete a few FormFields
   * const { count } = await prisma.formField.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormFieldDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormFields.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormFields
   * const formField = await prisma.formField.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormFieldUpdateManyArgs>(args: Prisma.SelectSubset<T, FormFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormFields and returns the data updated in the database.
   * @param {FormFieldUpdateManyAndReturnArgs} args - Arguments to update many FormFields.
   * @example
   * // Update many FormFields
   * const formField = await prisma.formField.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormFields and only return the `id`
   * const formFieldWithIdOnly = await prisma.formField.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormFieldUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormFieldUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormField.
   * @param {FormFieldUpsertArgs} args - Arguments to update or create a FormField.
   * @example
   * // Update or create a FormField
   * const formField = await prisma.formField.upsert({
   *   create: {
   *     // ... data to create a FormField
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormField we want to update
   *   }
   * })
   */
  upsert<T extends FormFieldUpsertArgs>(args: Prisma.SelectSubset<T, FormFieldUpsertArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormFields.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldCountArgs} args - Arguments to filter FormFields to count.
   * @example
   * // Count the number of FormFields
   * const count = await prisma.formField.count({
   *   where: {
   *     // ... the filter for the FormFields we want to count
   *   }
   * })
  **/
  count<T extends FormFieldCountArgs>(
    args?: Prisma.Subset<T, FormFieldCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormFieldCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormField.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormFieldAggregateArgs>(args: Prisma.Subset<T, FormFieldAggregateArgs>): Prisma.PrismaPromise<GetFormFieldAggregateType<T>>

  /**
   * Group by FormField.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormFieldGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormFieldGroupByArgs['orderBy'] }
      : { orderBy?: FormFieldGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormField model
 */
readonly fields: FormFieldFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormField.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormFieldClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  FormGrouping<T extends Prisma.FormGroupingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormGroupingDefaultArgs<ExtArgs>>): Prisma.Prisma__FormGroupingClient<runtime.Types.Result.GetResult<Prisma.$FormGroupingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Options<T extends Prisma.FormField$OptionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormField$OptionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormField model
 */
export interface FormFieldFieldRefs {
  readonly id: Prisma.FieldRef<"FormField", 'String'>
  readonly formGroupingId: Prisma.FieldRef<"FormField", 'String'>
  readonly label: Prisma.FieldRef<"FormField", 'String'>
  readonly type: Prisma.FieldRef<"FormField", 'FieldType'>
  readonly required: Prisma.FieldRef<"FormField", 'Boolean'>
  readonly order: Prisma.FieldRef<"FormField", 'Int'>
  readonly placeholder: Prisma.FieldRef<"FormField", 'String'>
  readonly maxLength: Prisma.FieldRef<"FormField", 'Int'>
  readonly minLength: Prisma.FieldRef<"FormField", 'Int'>
  readonly content: Prisma.FieldRef<"FormField", 'String'>
  readonly filter: Prisma.FieldRef<"FormField", 'String'>
  readonly multiple: Prisma.FieldRef<"FormField", 'Boolean'>
}
    

// Custom InputTypes
/**
 * FormField findUnique
 */
export type FormFieldFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * Filter, which FormField to fetch.
   */
  where: Prisma.FormFieldWhereUniqueInput
}

/**
 * FormField findUniqueOrThrow
 */
export type FormFieldFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * Filter, which FormField to fetch.
   */
  where: Prisma.FormFieldWhereUniqueInput
}

/**
 * FormField findFirst
 */
export type FormFieldFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * Filter, which FormField to fetch.
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFields to fetch.
   */
  orderBy?: Prisma.FormFieldOrderByWithRelationInput | Prisma.FormFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormFields.
   */
  cursor?: Prisma.FormFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFields.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormFields.
   */
  distinct?: Prisma.FormFieldScalarFieldEnum | Prisma.FormFieldScalarFieldEnum[]
}

/**
 * FormField findFirstOrThrow
 */
export type FormFieldFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * Filter, which FormField to fetch.
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFields to fetch.
   */
  orderBy?: Prisma.FormFieldOrderByWithRelationInput | Prisma.FormFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormFields.
   */
  cursor?: Prisma.FormFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFields.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormFields.
   */
  distinct?: Prisma.FormFieldScalarFieldEnum | Prisma.FormFieldScalarFieldEnum[]
}

/**
 * FormField findMany
 */
export type FormFieldFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * Filter, which FormFields to fetch.
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFields to fetch.
   */
  orderBy?: Prisma.FormFieldOrderByWithRelationInput | Prisma.FormFieldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormFields.
   */
  cursor?: Prisma.FormFieldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFields from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFields.
   */
  skip?: number
  distinct?: Prisma.FormFieldScalarFieldEnum | Prisma.FormFieldScalarFieldEnum[]
}

/**
 * FormField create
 */
export type FormFieldCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * The data needed to create a FormField.
   */
  data: Prisma.XOR<Prisma.FormFieldCreateInput, Prisma.FormFieldUncheckedCreateInput>
}

/**
 * FormField createMany
 */
export type FormFieldCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormFields.
   */
  data: Prisma.FormFieldCreateManyInput | Prisma.FormFieldCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormField createManyAndReturn
 */
export type FormFieldCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * The data used to create many FormFields.
   */
  data: Prisma.FormFieldCreateManyInput | Prisma.FormFieldCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormField update
 */
export type FormFieldUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * The data needed to update a FormField.
   */
  data: Prisma.XOR<Prisma.FormFieldUpdateInput, Prisma.FormFieldUncheckedUpdateInput>
  /**
   * Choose, which FormField to update.
   */
  where: Prisma.FormFieldWhereUniqueInput
}

/**
 * FormField updateMany
 */
export type FormFieldUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormFields.
   */
  data: Prisma.XOR<Prisma.FormFieldUpdateManyMutationInput, Prisma.FormFieldUncheckedUpdateManyInput>
  /**
   * Filter which FormFields to update
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * Limit how many FormFields to update.
   */
  limit?: number
}

/**
 * FormField updateManyAndReturn
 */
export type FormFieldUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * The data used to update FormFields.
   */
  data: Prisma.XOR<Prisma.FormFieldUpdateManyMutationInput, Prisma.FormFieldUncheckedUpdateManyInput>
  /**
   * Filter which FormFields to update
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * Limit how many FormFields to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormField upsert
 */
export type FormFieldUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * The filter to search for the FormField to update in case it exists.
   */
  where: Prisma.FormFieldWhereUniqueInput
  /**
   * In case the FormField found by the `where` argument doesn't exist, create a new FormField with this data.
   */
  create: Prisma.XOR<Prisma.FormFieldCreateInput, Prisma.FormFieldUncheckedCreateInput>
  /**
   * In case the FormField was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormFieldUpdateInput, Prisma.FormFieldUncheckedUpdateInput>
}

/**
 * FormField delete
 */
export type FormFieldDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
  /**
   * Filter which FormField to delete.
   */
  where: Prisma.FormFieldWhereUniqueInput
}

/**
 * FormField deleteMany
 */
export type FormFieldDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormFields to delete
   */
  where?: Prisma.FormFieldWhereInput
  /**
   * Limit how many FormFields to delete.
   */
  limit?: number
}

/**
 * FormField.Options
 */
export type FormField$OptionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  where?: Prisma.FormFieldOptionWhereInput
  orderBy?: Prisma.FormFieldOptionOrderByWithRelationInput | Prisma.FormFieldOptionOrderByWithRelationInput[]
  cursor?: Prisma.FormFieldOptionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormFieldOptionScalarFieldEnum | Prisma.FormFieldOptionScalarFieldEnum[]
}

/**
 * FormField without action
 */
export type FormFieldDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormField
   */
  select?: Prisma.FormFieldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormField
   */
  omit?: Prisma.FormFieldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldInclude<ExtArgs> | null
}
