
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Contacts` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Contacts
 * 
 */
export type ContactsModel = runtime.Types.Result.DefaultSelection<Prisma.$ContactsPayload>

export type AggregateContacts = {
  _count: ContactsCountAggregateOutputType | null
  _min: ContactsMinAggregateOutputType | null
  _max: ContactsMaxAggregateOutputType | null
}

export type ContactsMinAggregateOutputType = {
  id: string | null
  userId: string | null
  phoneNumber: string | null
  emergencyContact: string | null
  emergencyContactNumber: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContactsMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  phoneNumber: string | null
  emergencyContact: string | null
  emergencyContactNumber: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContactsCountAggregateOutputType = {
  id: number
  userId: number
  phoneNumber: number
  emergencyContact: number
  emergencyContactNumber: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ContactsMinAggregateInputType = {
  id?: true
  userId?: true
  phoneNumber?: true
  emergencyContact?: true
  emergencyContactNumber?: true
  createdAt?: true
  updatedAt?: true
}

export type ContactsMaxAggregateInputType = {
  id?: true
  userId?: true
  phoneNumber?: true
  emergencyContact?: true
  emergencyContactNumber?: true
  createdAt?: true
  updatedAt?: true
}

export type ContactsCountAggregateInputType = {
  id?: true
  userId?: true
  phoneNumber?: true
  emergencyContact?: true
  emergencyContactNumber?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ContactsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contacts to aggregate.
   */
  where?: Prisma.ContactsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactsOrderByWithRelationInput | Prisma.ContactsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContactsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Contacts
  **/
  _count?: true | ContactsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContactsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContactsMaxAggregateInputType
}

export type GetContactsAggregateType<T extends ContactsAggregateArgs> = {
      [P in keyof T & keyof AggregateContacts]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContacts[P]>
    : Prisma.GetScalarType<T[P], AggregateContacts[P]>
}




export type ContactsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContactsWhereInput
  orderBy?: Prisma.ContactsOrderByWithAggregationInput | Prisma.ContactsOrderByWithAggregationInput[]
  by: Prisma.ContactsScalarFieldEnum[] | Prisma.ContactsScalarFieldEnum
  having?: Prisma.ContactsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContactsCountAggregateInputType | true
  _min?: ContactsMinAggregateInputType
  _max?: ContactsMaxAggregateInputType
}

export type ContactsGroupByOutputType = {
  id: string
  userId: string
  phoneNumber: string | null
  emergencyContact: string | null
  emergencyContactNumber: string | null
  createdAt: Date
  updatedAt: Date
  _count: ContactsCountAggregateOutputType | null
  _min: ContactsMinAggregateOutputType | null
  _max: ContactsMaxAggregateOutputType | null
}

type GetContactsGroupByPayload<T extends ContactsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContactsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContactsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContactsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContactsGroupByOutputType[P]>
      }
    >
  >



export type ContactsWhereInput = {
  AND?: Prisma.ContactsWhereInput | Prisma.ContactsWhereInput[]
  OR?: Prisma.ContactsWhereInput[]
  NOT?: Prisma.ContactsWhereInput | Prisma.ContactsWhereInput[]
  id?: Prisma.StringFilter<"Contacts"> | string
  userId?: Prisma.StringFilter<"Contacts"> | string
  phoneNumber?: Prisma.StringNullableFilter<"Contacts"> | string | null
  emergencyContact?: Prisma.StringNullableFilter<"Contacts"> | string | null
  emergencyContactNumber?: Prisma.StringNullableFilter<"Contacts"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contacts"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contacts"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ContactsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  emergencyContact?: Prisma.SortOrderInput | Prisma.SortOrder
  emergencyContactNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
}

export type ContactsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.ContactsWhereInput | Prisma.ContactsWhereInput[]
  OR?: Prisma.ContactsWhereInput[]
  NOT?: Prisma.ContactsWhereInput | Prisma.ContactsWhereInput[]
  phoneNumber?: Prisma.StringNullableFilter<"Contacts"> | string | null
  emergencyContact?: Prisma.StringNullableFilter<"Contacts"> | string | null
  emergencyContactNumber?: Prisma.StringNullableFilter<"Contacts"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contacts"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contacts"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type ContactsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  emergencyContact?: Prisma.SortOrderInput | Prisma.SortOrder
  emergencyContactNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ContactsCountOrderByAggregateInput
  _max?: Prisma.ContactsMaxOrderByAggregateInput
  _min?: Prisma.ContactsMinOrderByAggregateInput
}

export type ContactsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContactsScalarWhereWithAggregatesInput | Prisma.ContactsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContactsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContactsScalarWhereWithAggregatesInput | Prisma.ContactsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Contacts"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Contacts"> | string
  phoneNumber?: Prisma.StringNullableWithAggregatesFilter<"Contacts"> | string | null
  emergencyContact?: Prisma.StringNullableWithAggregatesFilter<"Contacts"> | string | null
  emergencyContactNumber?: Prisma.StringNullableWithAggregatesFilter<"Contacts"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Contacts"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Contacts"> | Date | string
}

export type ContactsCreateInput = {
  id?: string
  phoneNumber?: string | null
  emergencyContact?: string | null
  emergencyContactNumber?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  User: Prisma.UserCreateNestedOneWithoutContactInput
}

export type ContactsUncheckedCreateInput = {
  id?: string
  userId: string
  phoneNumber?: string | null
  emergencyContact?: string | null
  emergencyContactNumber?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutContactNestedInput
}

export type ContactsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactsCreateManyInput = {
  id?: string
  userId: string
  phoneNumber?: string | null
  emergencyContact?: string | null
  emergencyContactNumber?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactsNullableScalarRelationFilter = {
  is?: Prisma.ContactsWhereInput | null
  isNot?: Prisma.ContactsWhereInput | null
}

export type ContactsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  emergencyContactNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  emergencyContactNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  emergencyContact?: Prisma.SortOrder
  emergencyContactNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactsCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ContactsCreateWithoutUserInput, Prisma.ContactsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.ContactsCreateOrConnectWithoutUserInput
  connect?: Prisma.ContactsWhereUniqueInput
}

export type ContactsUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ContactsCreateWithoutUserInput, Prisma.ContactsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.ContactsCreateOrConnectWithoutUserInput
  connect?: Prisma.ContactsWhereUniqueInput
}

export type ContactsUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ContactsCreateWithoutUserInput, Prisma.ContactsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.ContactsCreateOrConnectWithoutUserInput
  upsert?: Prisma.ContactsUpsertWithoutUserInput
  disconnect?: Prisma.ContactsWhereInput | boolean
  delete?: Prisma.ContactsWhereInput | boolean
  connect?: Prisma.ContactsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContactsUpdateToOneWithWhereWithoutUserInput, Prisma.ContactsUpdateWithoutUserInput>, Prisma.ContactsUncheckedUpdateWithoutUserInput>
}

export type ContactsUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ContactsCreateWithoutUserInput, Prisma.ContactsUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.ContactsCreateOrConnectWithoutUserInput
  upsert?: Prisma.ContactsUpsertWithoutUserInput
  disconnect?: Prisma.ContactsWhereInput | boolean
  delete?: Prisma.ContactsWhereInput | boolean
  connect?: Prisma.ContactsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContactsUpdateToOneWithWhereWithoutUserInput, Prisma.ContactsUpdateWithoutUserInput>, Prisma.ContactsUncheckedUpdateWithoutUserInput>
}

export type ContactsCreateWithoutUserInput = {
  id?: string
  phoneNumber?: string | null
  emergencyContact?: string | null
  emergencyContactNumber?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactsUncheckedCreateWithoutUserInput = {
  id?: string
  phoneNumber?: string | null
  emergencyContact?: string | null
  emergencyContactNumber?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactsCreateOrConnectWithoutUserInput = {
  where: Prisma.ContactsWhereUniqueInput
  create: Prisma.XOR<Prisma.ContactsCreateWithoutUserInput, Prisma.ContactsUncheckedCreateWithoutUserInput>
}

export type ContactsUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.ContactsUpdateWithoutUserInput, Prisma.ContactsUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ContactsCreateWithoutUserInput, Prisma.ContactsUncheckedCreateWithoutUserInput>
  where?: Prisma.ContactsWhereInput
}

export type ContactsUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.ContactsWhereInput
  data: Prisma.XOR<Prisma.ContactsUpdateWithoutUserInput, Prisma.ContactsUncheckedUpdateWithoutUserInput>
}

export type ContactsUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emergencyContactNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ContactsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  phoneNumber?: boolean
  emergencyContact?: boolean
  emergencyContactNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contacts"]>

export type ContactsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  phoneNumber?: boolean
  emergencyContact?: boolean
  emergencyContactNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contacts"]>

export type ContactsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  phoneNumber?: boolean
  emergencyContact?: boolean
  emergencyContactNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contacts"]>

export type ContactsSelectScalar = {
  id?: boolean
  userId?: boolean
  phoneNumber?: boolean
  emergencyContact?: boolean
  emergencyContactNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ContactsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "phoneNumber" | "emergencyContact" | "emergencyContactNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["contacts"]>
export type ContactsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ContactsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ContactsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ContactsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Contacts"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    phoneNumber: string | null
    emergencyContact: string | null
    emergencyContactNumber: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["contacts"]>
  composites: {}
}

export type ContactsGetPayload<S extends boolean | null | undefined | ContactsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContactsPayload, S>

export type ContactsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContactsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContactsCountAggregateInputType | true
  }

export interface ContactsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contacts'], meta: { name: 'Contacts' } }
  /**
   * Find zero or one Contacts that matches the filter.
   * @param {ContactsFindUniqueArgs} args - Arguments to find a Contacts
   * @example
   * // Get one Contacts
   * const contacts = await prisma.contacts.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactsFindUniqueArgs>(args: Prisma.SelectSubset<T, ContactsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Contacts that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactsFindUniqueOrThrowArgs} args - Arguments to find a Contacts
   * @example
   * // Get one Contacts
   * const contacts = await prisma.contacts.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContactsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsFindFirstArgs} args - Arguments to find a Contacts
   * @example
   * // Get one Contacts
   * const contacts = await prisma.contacts.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactsFindFirstArgs>(args?: Prisma.SelectSubset<T, ContactsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contacts that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsFindFirstOrThrowArgs} args - Arguments to find a Contacts
   * @example
   * // Get one Contacts
   * const contacts = await prisma.contacts.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContactsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Contacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Contacts
   * const contacts = await prisma.contacts.findMany()
   * 
   * // Get first 10 Contacts
   * const contacts = await prisma.contacts.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contactsWithIdOnly = await prisma.contacts.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContactsFindManyArgs>(args?: Prisma.SelectSubset<T, ContactsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Contacts.
   * @param {ContactsCreateArgs} args - Arguments to create a Contacts.
   * @example
   * // Create one Contacts
   * const Contacts = await prisma.contacts.create({
   *   data: {
   *     // ... data to create a Contacts
   *   }
   * })
   * 
   */
  create<T extends ContactsCreateArgs>(args: Prisma.SelectSubset<T, ContactsCreateArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Contacts.
   * @param {ContactsCreateManyArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contacts = await prisma.contacts.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContactsCreateManyArgs>(args?: Prisma.SelectSubset<T, ContactsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Contacts and returns the data saved in the database.
   * @param {ContactsCreateManyAndReturnArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contacts = await prisma.contacts.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Contacts and only return the `id`
   * const contactsWithIdOnly = await prisma.contacts.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContactsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContactsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Contacts.
   * @param {ContactsDeleteArgs} args - Arguments to delete one Contacts.
   * @example
   * // Delete one Contacts
   * const Contacts = await prisma.contacts.delete({
   *   where: {
   *     // ... filter to delete one Contacts
   *   }
   * })
   * 
   */
  delete<T extends ContactsDeleteArgs>(args: Prisma.SelectSubset<T, ContactsDeleteArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Contacts.
   * @param {ContactsUpdateArgs} args - Arguments to update one Contacts.
   * @example
   * // Update one Contacts
   * const contacts = await prisma.contacts.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContactsUpdateArgs>(args: Prisma.SelectSubset<T, ContactsUpdateArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Contacts.
   * @param {ContactsDeleteManyArgs} args - Arguments to filter Contacts to delete.
   * @example
   * // Delete a few Contacts
   * const { count } = await prisma.contacts.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContactsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContactsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Contacts
   * const contacts = await prisma.contacts.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContactsUpdateManyArgs>(args: Prisma.SelectSubset<T, ContactsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contacts and returns the data updated in the database.
   * @param {ContactsUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
   * @example
   * // Update many Contacts
   * const contacts = await prisma.contacts.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Contacts and only return the `id`
   * const contactsWithIdOnly = await prisma.contacts.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContactsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContactsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Contacts.
   * @param {ContactsUpsertArgs} args - Arguments to update or create a Contacts.
   * @example
   * // Update or create a Contacts
   * const contacts = await prisma.contacts.upsert({
   *   create: {
   *     // ... data to create a Contacts
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Contacts we want to update
   *   }
   * })
   */
  upsert<T extends ContactsUpsertArgs>(args: Prisma.SelectSubset<T, ContactsUpsertArgs<ExtArgs>>): Prisma.Prisma__ContactsClient<runtime.Types.Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsCountArgs} args - Arguments to filter Contacts to count.
   * @example
   * // Count the number of Contacts
   * const count = await prisma.contacts.count({
   *   where: {
   *     // ... the filter for the Contacts we want to count
   *   }
   * })
  **/
  count<T extends ContactsCountArgs>(
    args?: Prisma.Subset<T, ContactsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContactsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContactsAggregateArgs>(args: Prisma.Subset<T, ContactsAggregateArgs>): Prisma.PrismaPromise<GetContactsAggregateType<T>>

  /**
   * Group by Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContactsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactsGroupByArgs['orderBy'] }
      : { orderBy?: ContactsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContactsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Contacts model
 */
readonly fields: ContactsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Contacts.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Contacts model
 */
export interface ContactsFieldRefs {
  readonly id: Prisma.FieldRef<"Contacts", 'String'>
  readonly userId: Prisma.FieldRef<"Contacts", 'String'>
  readonly phoneNumber: Prisma.FieldRef<"Contacts", 'String'>
  readonly emergencyContact: Prisma.FieldRef<"Contacts", 'String'>
  readonly emergencyContactNumber: Prisma.FieldRef<"Contacts", 'String'>
  readonly createdAt: Prisma.FieldRef<"Contacts", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Contacts", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Contacts findUnique
 */
export type ContactsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * Filter, which Contacts to fetch.
   */
  where: Prisma.ContactsWhereUniqueInput
}

/**
 * Contacts findUniqueOrThrow
 */
export type ContactsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * Filter, which Contacts to fetch.
   */
  where: Prisma.ContactsWhereUniqueInput
}

/**
 * Contacts findFirst
 */
export type ContactsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * Filter, which Contacts to fetch.
   */
  where?: Prisma.ContactsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactsOrderByWithRelationInput | Prisma.ContactsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactsScalarFieldEnum | Prisma.ContactsScalarFieldEnum[]
}

/**
 * Contacts findFirstOrThrow
 */
export type ContactsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * Filter, which Contacts to fetch.
   */
  where?: Prisma.ContactsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactsOrderByWithRelationInput | Prisma.ContactsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactsScalarFieldEnum | Prisma.ContactsScalarFieldEnum[]
}

/**
 * Contacts findMany
 */
export type ContactsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * Filter, which Contacts to fetch.
   */
  where?: Prisma.ContactsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactsOrderByWithRelationInput | Prisma.ContactsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Contacts.
   */
  cursor?: Prisma.ContactsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  distinct?: Prisma.ContactsScalarFieldEnum | Prisma.ContactsScalarFieldEnum[]
}

/**
 * Contacts create
 */
export type ContactsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * The data needed to create a Contacts.
   */
  data: Prisma.XOR<Prisma.ContactsCreateInput, Prisma.ContactsUncheckedCreateInput>
}

/**
 * Contacts createMany
 */
export type ContactsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactsCreateManyInput | Prisma.ContactsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Contacts createManyAndReturn
 */
export type ContactsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactsCreateManyInput | Prisma.ContactsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Contacts update
 */
export type ContactsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * The data needed to update a Contacts.
   */
  data: Prisma.XOR<Prisma.ContactsUpdateInput, Prisma.ContactsUncheckedUpdateInput>
  /**
   * Choose, which Contacts to update.
   */
  where: Prisma.ContactsWhereUniqueInput
}

/**
 * Contacts updateMany
 */
export type ContactsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<Prisma.ContactsUpdateManyMutationInput, Prisma.ContactsUncheckedUpdateManyInput>
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactsWhereInput
  /**
   * Limit how many Contacts to update.
   */
  limit?: number
}

/**
 * Contacts updateManyAndReturn
 */
export type ContactsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<Prisma.ContactsUpdateManyMutationInput, Prisma.ContactsUncheckedUpdateManyInput>
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactsWhereInput
  /**
   * Limit how many Contacts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Contacts upsert
 */
export type ContactsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * The filter to search for the Contacts to update in case it exists.
   */
  where: Prisma.ContactsWhereUniqueInput
  /**
   * In case the Contacts found by the `where` argument doesn't exist, create a new Contacts with this data.
   */
  create: Prisma.XOR<Prisma.ContactsCreateInput, Prisma.ContactsUncheckedCreateInput>
  /**
   * In case the Contacts was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContactsUpdateInput, Prisma.ContactsUncheckedUpdateInput>
}

/**
 * Contacts delete
 */
export type ContactsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
  /**
   * Filter which Contacts to delete.
   */
  where: Prisma.ContactsWhereUniqueInput
}

/**
 * Contacts deleteMany
 */
export type ContactsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contacts to delete
   */
  where?: Prisma.ContactsWhereInput
  /**
   * Limit how many Contacts to delete.
   */
  limit?: number
}

/**
 * Contacts without action
 */
export type ContactsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contacts
   */
  select?: Prisma.ContactsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contacts
   */
  omit?: Prisma.ContactsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactsInclude<ExtArgs> | null
}
