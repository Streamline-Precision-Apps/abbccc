
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FormSubmission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FormSubmission
 * 
 */
export type FormSubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$FormSubmissionPayload>

export type AggregateFormSubmission = {
  _count: FormSubmissionCountAggregateOutputType | null
  _min: FormSubmissionMinAggregateOutputType | null
  _max: FormSubmissionMaxAggregateOutputType | null
}

export type FormSubmissionMinAggregateOutputType = {
  id: string | null
  title: string | null
  formTemplateId: string | null
  userId: string | null
  formType: string | null
  createdAt: Date | null
  updatedAt: Date | null
  submittedAt: Date | null
  status: $Enums.FormStatus | null
}

export type FormSubmissionMaxAggregateOutputType = {
  id: string | null
  title: string | null
  formTemplateId: string | null
  userId: string | null
  formType: string | null
  createdAt: Date | null
  updatedAt: Date | null
  submittedAt: Date | null
  status: $Enums.FormStatus | null
}

export type FormSubmissionCountAggregateOutputType = {
  id: number
  title: number
  formTemplateId: number
  userId: number
  formType: number
  data: number
  createdAt: number
  updatedAt: number
  submittedAt: number
  status: number
  _all: number
}


export type FormSubmissionMinAggregateInputType = {
  id?: true
  title?: true
  formTemplateId?: true
  userId?: true
  formType?: true
  createdAt?: true
  updatedAt?: true
  submittedAt?: true
  status?: true
}

export type FormSubmissionMaxAggregateInputType = {
  id?: true
  title?: true
  formTemplateId?: true
  userId?: true
  formType?: true
  createdAt?: true
  updatedAt?: true
  submittedAt?: true
  status?: true
}

export type FormSubmissionCountAggregateInputType = {
  id?: true
  title?: true
  formTemplateId?: true
  userId?: true
  formType?: true
  data?: true
  createdAt?: true
  updatedAt?: true
  submittedAt?: true
  status?: true
  _all?: true
}

export type FormSubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormSubmission to aggregate.
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormSubmissions to fetch.
   */
  orderBy?: Prisma.FormSubmissionOrderByWithRelationInput | Prisma.FormSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormSubmissions
  **/
  _count?: true | FormSubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormSubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormSubmissionMaxAggregateInputType
}

export type GetFormSubmissionAggregateType<T extends FormSubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateFormSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateFormSubmission[P]>
}




export type FormSubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormSubmissionWhereInput
  orderBy?: Prisma.FormSubmissionOrderByWithAggregationInput | Prisma.FormSubmissionOrderByWithAggregationInput[]
  by: Prisma.FormSubmissionScalarFieldEnum[] | Prisma.FormSubmissionScalarFieldEnum
  having?: Prisma.FormSubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormSubmissionCountAggregateInputType | true
  _min?: FormSubmissionMinAggregateInputType
  _max?: FormSubmissionMaxAggregateInputType
}

export type FormSubmissionGroupByOutputType = {
  id: string
  title: string | null
  formTemplateId: string
  userId: string
  formType: string | null
  data: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  submittedAt: Date | null
  status: $Enums.FormStatus
  _count: FormSubmissionCountAggregateOutputType | null
  _min: FormSubmissionMinAggregateOutputType | null
  _max: FormSubmissionMaxAggregateOutputType | null
}

type GetFormSubmissionGroupByPayload<T extends FormSubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormSubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormSubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormSubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormSubmissionGroupByOutputType[P]>
      }
    >
  >



export type FormSubmissionWhereInput = {
  AND?: Prisma.FormSubmissionWhereInput | Prisma.FormSubmissionWhereInput[]
  OR?: Prisma.FormSubmissionWhereInput[]
  NOT?: Prisma.FormSubmissionWhereInput | Prisma.FormSubmissionWhereInput[]
  id?: Prisma.StringFilter<"FormSubmission"> | string
  title?: Prisma.StringNullableFilter<"FormSubmission"> | string | null
  formTemplateId?: Prisma.StringFilter<"FormSubmission"> | string
  userId?: Prisma.StringFilter<"FormSubmission"> | string
  formType?: Prisma.StringNullableFilter<"FormSubmission"> | string | null
  data?: Prisma.JsonNullableFilter<"FormSubmission">
  createdAt?: Prisma.DateTimeFilter<"FormSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormSubmission"> | Date | string
  submittedAt?: Prisma.DateTimeNullableFilter<"FormSubmission"> | Date | string | null
  status?: Prisma.EnumFormStatusFilter<"FormSubmission"> | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalListRelationFilter
  FormTemplate?: Prisma.XOR<Prisma.FormTemplateScalarRelationFilter, Prisma.FormTemplateWhereInput>
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type FormSubmissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  formTemplateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  formType?: Prisma.SortOrderInput | Prisma.SortOrder
  data?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  Approvals?: Prisma.FormApprovalOrderByRelationAggregateInput
  FormTemplate?: Prisma.FormTemplateOrderByWithRelationInput
  User?: Prisma.UserOrderByWithRelationInput
}

export type FormSubmissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormSubmissionWhereInput | Prisma.FormSubmissionWhereInput[]
  OR?: Prisma.FormSubmissionWhereInput[]
  NOT?: Prisma.FormSubmissionWhereInput | Prisma.FormSubmissionWhereInput[]
  title?: Prisma.StringNullableFilter<"FormSubmission"> | string | null
  formTemplateId?: Prisma.StringFilter<"FormSubmission"> | string
  userId?: Prisma.StringFilter<"FormSubmission"> | string
  formType?: Prisma.StringNullableFilter<"FormSubmission"> | string | null
  data?: Prisma.JsonNullableFilter<"FormSubmission">
  createdAt?: Prisma.DateTimeFilter<"FormSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormSubmission"> | Date | string
  submittedAt?: Prisma.DateTimeNullableFilter<"FormSubmission"> | Date | string | null
  status?: Prisma.EnumFormStatusFilter<"FormSubmission"> | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalListRelationFilter
  FormTemplate?: Prisma.XOR<Prisma.FormTemplateScalarRelationFilter, Prisma.FormTemplateWhereInput>
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type FormSubmissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  formTemplateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  formType?: Prisma.SortOrderInput | Prisma.SortOrder
  data?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.FormSubmissionCountOrderByAggregateInput
  _max?: Prisma.FormSubmissionMaxOrderByAggregateInput
  _min?: Prisma.FormSubmissionMinOrderByAggregateInput
}

export type FormSubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormSubmissionScalarWhereWithAggregatesInput | Prisma.FormSubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormSubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormSubmissionScalarWhereWithAggregatesInput | Prisma.FormSubmissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormSubmission"> | string
  title?: Prisma.StringNullableWithAggregatesFilter<"FormSubmission"> | string | null
  formTemplateId?: Prisma.StringWithAggregatesFilter<"FormSubmission"> | string
  userId?: Prisma.StringWithAggregatesFilter<"FormSubmission"> | string
  formType?: Prisma.StringNullableWithAggregatesFilter<"FormSubmission"> | string | null
  data?: Prisma.JsonNullableWithAggregatesFilter<"FormSubmission">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FormSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"FormSubmission"> | Date | string
  submittedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"FormSubmission"> | Date | string | null
  status?: Prisma.EnumFormStatusWithAggregatesFilter<"FormSubmission"> | $Enums.FormStatus
}

export type FormSubmissionCreateInput = {
  id?: string
  title?: string | null
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  Approvals?: Prisma.FormApprovalCreateNestedManyWithoutFormSubmissionInput
  FormTemplate: Prisma.FormTemplateCreateNestedOneWithoutSubmissionsInput
  User: Prisma.UserCreateNestedOneWithoutFormSubmissionsInput
}

export type FormSubmissionUncheckedCreateInput = {
  id?: string
  title?: string | null
  formTemplateId: string
  userId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUncheckedCreateNestedManyWithoutFormSubmissionInput
}

export type FormSubmissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUpdateManyWithoutFormSubmissionNestedInput
  FormTemplate?: Prisma.FormTemplateUpdateOneRequiredWithoutSubmissionsNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutFormSubmissionsNestedInput
}

export type FormSubmissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formTemplateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUncheckedUpdateManyWithoutFormSubmissionNestedInput
}

export type FormSubmissionCreateManyInput = {
  id?: string
  title?: string | null
  formTemplateId: string
  userId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
}

export type FormSubmissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
}

export type FormSubmissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formTemplateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
}

export type FormSubmissionListRelationFilter = {
  every?: Prisma.FormSubmissionWhereInput
  some?: Prisma.FormSubmissionWhereInput
  none?: Prisma.FormSubmissionWhereInput
}

export type FormSubmissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormSubmissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  formTemplateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  formType?: Prisma.SortOrder
  data?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type FormSubmissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  formTemplateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  formType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type FormSubmissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  formTemplateId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  formType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type FormSubmissionScalarRelationFilter = {
  is?: Prisma.FormSubmissionWhereInput
  isNot?: Prisma.FormSubmissionWhereInput
}

export type FormSubmissionCreateNestedManyWithoutFormTemplateInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput> | Prisma.FormSubmissionCreateWithoutFormTemplateInput[] | Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput | Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput[]
  createMany?: Prisma.FormSubmissionCreateManyFormTemplateInputEnvelope
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
}

export type FormSubmissionUncheckedCreateNestedManyWithoutFormTemplateInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput> | Prisma.FormSubmissionCreateWithoutFormTemplateInput[] | Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput | Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput[]
  createMany?: Prisma.FormSubmissionCreateManyFormTemplateInputEnvelope
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
}

export type FormSubmissionUpdateManyWithoutFormTemplateNestedInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput> | Prisma.FormSubmissionCreateWithoutFormTemplateInput[] | Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput | Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput[]
  upsert?: Prisma.FormSubmissionUpsertWithWhereUniqueWithoutFormTemplateInput | Prisma.FormSubmissionUpsertWithWhereUniqueWithoutFormTemplateInput[]
  createMany?: Prisma.FormSubmissionCreateManyFormTemplateInputEnvelope
  set?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  delete?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  update?: Prisma.FormSubmissionUpdateWithWhereUniqueWithoutFormTemplateInput | Prisma.FormSubmissionUpdateWithWhereUniqueWithoutFormTemplateInput[]
  updateMany?: Prisma.FormSubmissionUpdateManyWithWhereWithoutFormTemplateInput | Prisma.FormSubmissionUpdateManyWithWhereWithoutFormTemplateInput[]
  deleteMany?: Prisma.FormSubmissionScalarWhereInput | Prisma.FormSubmissionScalarWhereInput[]
}

export type FormSubmissionUncheckedUpdateManyWithoutFormTemplateNestedInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput> | Prisma.FormSubmissionCreateWithoutFormTemplateInput[] | Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput | Prisma.FormSubmissionCreateOrConnectWithoutFormTemplateInput[]
  upsert?: Prisma.FormSubmissionUpsertWithWhereUniqueWithoutFormTemplateInput | Prisma.FormSubmissionUpsertWithWhereUniqueWithoutFormTemplateInput[]
  createMany?: Prisma.FormSubmissionCreateManyFormTemplateInputEnvelope
  set?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  delete?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  update?: Prisma.FormSubmissionUpdateWithWhereUniqueWithoutFormTemplateInput | Prisma.FormSubmissionUpdateWithWhereUniqueWithoutFormTemplateInput[]
  updateMany?: Prisma.FormSubmissionUpdateManyWithWhereWithoutFormTemplateInput | Prisma.FormSubmissionUpdateManyWithWhereWithoutFormTemplateInput[]
  deleteMany?: Prisma.FormSubmissionScalarWhereInput | Prisma.FormSubmissionScalarWhereInput[]
}

export type EnumFormStatusFieldUpdateOperationsInput = {
  set?: $Enums.FormStatus
}

export type FormSubmissionCreateNestedOneWithoutApprovalsInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutApprovalsInput, Prisma.FormSubmissionUncheckedCreateWithoutApprovalsInput>
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutApprovalsInput
  connect?: Prisma.FormSubmissionWhereUniqueInput
}

export type FormSubmissionUpdateOneRequiredWithoutApprovalsNestedInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutApprovalsInput, Prisma.FormSubmissionUncheckedCreateWithoutApprovalsInput>
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutApprovalsInput
  upsert?: Prisma.FormSubmissionUpsertWithoutApprovalsInput
  connect?: Prisma.FormSubmissionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FormSubmissionUpdateToOneWithWhereWithoutApprovalsInput, Prisma.FormSubmissionUpdateWithoutApprovalsInput>, Prisma.FormSubmissionUncheckedUpdateWithoutApprovalsInput>
}

export type FormSubmissionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutUserInput, Prisma.FormSubmissionUncheckedCreateWithoutUserInput> | Prisma.FormSubmissionCreateWithoutUserInput[] | Prisma.FormSubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutUserInput | Prisma.FormSubmissionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FormSubmissionCreateManyUserInputEnvelope
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
}

export type FormSubmissionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutUserInput, Prisma.FormSubmissionUncheckedCreateWithoutUserInput> | Prisma.FormSubmissionCreateWithoutUserInput[] | Prisma.FormSubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutUserInput | Prisma.FormSubmissionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FormSubmissionCreateManyUserInputEnvelope
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
}

export type FormSubmissionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutUserInput, Prisma.FormSubmissionUncheckedCreateWithoutUserInput> | Prisma.FormSubmissionCreateWithoutUserInput[] | Prisma.FormSubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutUserInput | Prisma.FormSubmissionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.FormSubmissionUpsertWithWhereUniqueWithoutUserInput | Prisma.FormSubmissionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FormSubmissionCreateManyUserInputEnvelope
  set?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  delete?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  update?: Prisma.FormSubmissionUpdateWithWhereUniqueWithoutUserInput | Prisma.FormSubmissionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.FormSubmissionUpdateManyWithWhereWithoutUserInput | Prisma.FormSubmissionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.FormSubmissionScalarWhereInput | Prisma.FormSubmissionScalarWhereInput[]
}

export type FormSubmissionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FormSubmissionCreateWithoutUserInput, Prisma.FormSubmissionUncheckedCreateWithoutUserInput> | Prisma.FormSubmissionCreateWithoutUserInput[] | Prisma.FormSubmissionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FormSubmissionCreateOrConnectWithoutUserInput | Prisma.FormSubmissionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.FormSubmissionUpsertWithWhereUniqueWithoutUserInput | Prisma.FormSubmissionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FormSubmissionCreateManyUserInputEnvelope
  set?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  disconnect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  delete?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  connect?: Prisma.FormSubmissionWhereUniqueInput | Prisma.FormSubmissionWhereUniqueInput[]
  update?: Prisma.FormSubmissionUpdateWithWhereUniqueWithoutUserInput | Prisma.FormSubmissionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.FormSubmissionUpdateManyWithWhereWithoutUserInput | Prisma.FormSubmissionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.FormSubmissionScalarWhereInput | Prisma.FormSubmissionScalarWhereInput[]
}

export type FormSubmissionCreateWithoutFormTemplateInput = {
  id?: string
  title?: string | null
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  Approvals?: Prisma.FormApprovalCreateNestedManyWithoutFormSubmissionInput
  User: Prisma.UserCreateNestedOneWithoutFormSubmissionsInput
}

export type FormSubmissionUncheckedCreateWithoutFormTemplateInput = {
  id?: string
  title?: string | null
  userId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUncheckedCreateNestedManyWithoutFormSubmissionInput
}

export type FormSubmissionCreateOrConnectWithoutFormTemplateInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FormSubmissionCreateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput>
}

export type FormSubmissionCreateManyFormTemplateInputEnvelope = {
  data: Prisma.FormSubmissionCreateManyFormTemplateInput | Prisma.FormSubmissionCreateManyFormTemplateInput[]
  skipDuplicates?: boolean
}

export type FormSubmissionUpsertWithWhereUniqueWithoutFormTemplateInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  update: Prisma.XOR<Prisma.FormSubmissionUpdateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedUpdateWithoutFormTemplateInput>
  create: Prisma.XOR<Prisma.FormSubmissionCreateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedCreateWithoutFormTemplateInput>
}

export type FormSubmissionUpdateWithWhereUniqueWithoutFormTemplateInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  data: Prisma.XOR<Prisma.FormSubmissionUpdateWithoutFormTemplateInput, Prisma.FormSubmissionUncheckedUpdateWithoutFormTemplateInput>
}

export type FormSubmissionUpdateManyWithWhereWithoutFormTemplateInput = {
  where: Prisma.FormSubmissionScalarWhereInput
  data: Prisma.XOR<Prisma.FormSubmissionUpdateManyMutationInput, Prisma.FormSubmissionUncheckedUpdateManyWithoutFormTemplateInput>
}

export type FormSubmissionScalarWhereInput = {
  AND?: Prisma.FormSubmissionScalarWhereInput | Prisma.FormSubmissionScalarWhereInput[]
  OR?: Prisma.FormSubmissionScalarWhereInput[]
  NOT?: Prisma.FormSubmissionScalarWhereInput | Prisma.FormSubmissionScalarWhereInput[]
  id?: Prisma.StringFilter<"FormSubmission"> | string
  title?: Prisma.StringNullableFilter<"FormSubmission"> | string | null
  formTemplateId?: Prisma.StringFilter<"FormSubmission"> | string
  userId?: Prisma.StringFilter<"FormSubmission"> | string
  formType?: Prisma.StringNullableFilter<"FormSubmission"> | string | null
  data?: Prisma.JsonNullableFilter<"FormSubmission">
  createdAt?: Prisma.DateTimeFilter<"FormSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"FormSubmission"> | Date | string
  submittedAt?: Prisma.DateTimeNullableFilter<"FormSubmission"> | Date | string | null
  status?: Prisma.EnumFormStatusFilter<"FormSubmission"> | $Enums.FormStatus
}

export type FormSubmissionCreateWithoutApprovalsInput = {
  id?: string
  title?: string | null
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  FormTemplate: Prisma.FormTemplateCreateNestedOneWithoutSubmissionsInput
  User: Prisma.UserCreateNestedOneWithoutFormSubmissionsInput
}

export type FormSubmissionUncheckedCreateWithoutApprovalsInput = {
  id?: string
  title?: string | null
  formTemplateId: string
  userId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
}

export type FormSubmissionCreateOrConnectWithoutApprovalsInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FormSubmissionCreateWithoutApprovalsInput, Prisma.FormSubmissionUncheckedCreateWithoutApprovalsInput>
}

export type FormSubmissionUpsertWithoutApprovalsInput = {
  update: Prisma.XOR<Prisma.FormSubmissionUpdateWithoutApprovalsInput, Prisma.FormSubmissionUncheckedUpdateWithoutApprovalsInput>
  create: Prisma.XOR<Prisma.FormSubmissionCreateWithoutApprovalsInput, Prisma.FormSubmissionUncheckedCreateWithoutApprovalsInput>
  where?: Prisma.FormSubmissionWhereInput
}

export type FormSubmissionUpdateToOneWithWhereWithoutApprovalsInput = {
  where?: Prisma.FormSubmissionWhereInput
  data: Prisma.XOR<Prisma.FormSubmissionUpdateWithoutApprovalsInput, Prisma.FormSubmissionUncheckedUpdateWithoutApprovalsInput>
}

export type FormSubmissionUpdateWithoutApprovalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  FormTemplate?: Prisma.FormTemplateUpdateOneRequiredWithoutSubmissionsNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutFormSubmissionsNestedInput
}

export type FormSubmissionUncheckedUpdateWithoutApprovalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formTemplateId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
}

export type FormSubmissionCreateWithoutUserInput = {
  id?: string
  title?: string | null
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  Approvals?: Prisma.FormApprovalCreateNestedManyWithoutFormSubmissionInput
  FormTemplate: Prisma.FormTemplateCreateNestedOneWithoutSubmissionsInput
}

export type FormSubmissionUncheckedCreateWithoutUserInput = {
  id?: string
  title?: string | null
  formTemplateId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUncheckedCreateNestedManyWithoutFormSubmissionInput
}

export type FormSubmissionCreateOrConnectWithoutUserInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  create: Prisma.XOR<Prisma.FormSubmissionCreateWithoutUserInput, Prisma.FormSubmissionUncheckedCreateWithoutUserInput>
}

export type FormSubmissionCreateManyUserInputEnvelope = {
  data: Prisma.FormSubmissionCreateManyUserInput | Prisma.FormSubmissionCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type FormSubmissionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  update: Prisma.XOR<Prisma.FormSubmissionUpdateWithoutUserInput, Prisma.FormSubmissionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.FormSubmissionCreateWithoutUserInput, Prisma.FormSubmissionUncheckedCreateWithoutUserInput>
}

export type FormSubmissionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.FormSubmissionWhereUniqueInput
  data: Prisma.XOR<Prisma.FormSubmissionUpdateWithoutUserInput, Prisma.FormSubmissionUncheckedUpdateWithoutUserInput>
}

export type FormSubmissionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.FormSubmissionScalarWhereInput
  data: Prisma.XOR<Prisma.FormSubmissionUpdateManyMutationInput, Prisma.FormSubmissionUncheckedUpdateManyWithoutUserInput>
}

export type FormSubmissionCreateManyFormTemplateInput = {
  id?: string
  title?: string | null
  userId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
}

export type FormSubmissionUpdateWithoutFormTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUpdateManyWithoutFormSubmissionNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutFormSubmissionsNestedInput
}

export type FormSubmissionUncheckedUpdateWithoutFormTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUncheckedUpdateManyWithoutFormSubmissionNestedInput
}

export type FormSubmissionUncheckedUpdateManyWithoutFormTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
}

export type FormSubmissionCreateManyUserInput = {
  id?: string
  title?: string | null
  formTemplateId: string
  formType?: string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  submittedAt?: Date | string | null
  status?: $Enums.FormStatus
}

export type FormSubmissionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUpdateManyWithoutFormSubmissionNestedInput
  FormTemplate?: Prisma.FormTemplateUpdateOneRequiredWithoutSubmissionsNestedInput
}

export type FormSubmissionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formTemplateId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
  Approvals?: Prisma.FormApprovalUncheckedUpdateManyWithoutFormSubmissionNestedInput
}

export type FormSubmissionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formTemplateId?: Prisma.StringFieldUpdateOperationsInput | string
  formType?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  submittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.EnumFormStatusFieldUpdateOperationsInput | $Enums.FormStatus
}


/**
 * Count Type FormSubmissionCountOutputType
 */

export type FormSubmissionCountOutputType = {
  Approvals: number
}

export type FormSubmissionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Approvals?: boolean | FormSubmissionCountOutputTypeCountApprovalsArgs
}

/**
 * FormSubmissionCountOutputType without action
 */
export type FormSubmissionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmissionCountOutputType
   */
  select?: Prisma.FormSubmissionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FormSubmissionCountOutputType without action
 */
export type FormSubmissionCountOutputTypeCountApprovalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormApprovalWhereInput
}


export type FormSubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  formTemplateId?: boolean
  userId?: boolean
  formType?: boolean
  data?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submittedAt?: boolean
  status?: boolean
  Approvals?: boolean | Prisma.FormSubmission$ApprovalsArgs<ExtArgs>
  FormTemplate?: boolean | Prisma.FormTemplateDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.FormSubmissionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formSubmission"]>

export type FormSubmissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  formTemplateId?: boolean
  userId?: boolean
  formType?: boolean
  data?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submittedAt?: boolean
  status?: boolean
  FormTemplate?: boolean | Prisma.FormTemplateDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formSubmission"]>

export type FormSubmissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  formTemplateId?: boolean
  userId?: boolean
  formType?: boolean
  data?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submittedAt?: boolean
  status?: boolean
  FormTemplate?: boolean | Prisma.FormTemplateDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formSubmission"]>

export type FormSubmissionSelectScalar = {
  id?: boolean
  title?: boolean
  formTemplateId?: boolean
  userId?: boolean
  formType?: boolean
  data?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  submittedAt?: boolean
  status?: boolean
}

export type FormSubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "formTemplateId" | "userId" | "formType" | "data" | "createdAt" | "updatedAt" | "submittedAt" | "status", ExtArgs["result"]["formSubmission"]>
export type FormSubmissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Approvals?: boolean | Prisma.FormSubmission$ApprovalsArgs<ExtArgs>
  FormTemplate?: boolean | Prisma.FormTemplateDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.FormSubmissionCountOutputTypeDefaultArgs<ExtArgs>
}
export type FormSubmissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormTemplate?: boolean | Prisma.FormTemplateDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FormSubmissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  FormTemplate?: boolean | Prisma.FormTemplateDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $FormSubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormSubmission"
  objects: {
    Approvals: Prisma.$FormApprovalPayload<ExtArgs>[]
    FormTemplate: Prisma.$FormTemplatePayload<ExtArgs>
    User: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string | null
    formTemplateId: string
    userId: string
    formType: string | null
    data: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date
    submittedAt: Date | null
    status: $Enums.FormStatus
  }, ExtArgs["result"]["formSubmission"]>
  composites: {}
}

export type FormSubmissionGetPayload<S extends boolean | null | undefined | FormSubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload, S>

export type FormSubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormSubmissionCountAggregateInputType | true
  }

export interface FormSubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormSubmission'], meta: { name: 'FormSubmission' } }
  /**
   * Find zero or one FormSubmission that matches the filter.
   * @param {FormSubmissionFindUniqueArgs} args - Arguments to find a FormSubmission
   * @example
   * // Get one FormSubmission
   * const formSubmission = await prisma.formSubmission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormSubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, FormSubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormSubmission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormSubmissionFindUniqueOrThrowArgs} args - Arguments to find a FormSubmission
   * @example
   * // Get one FormSubmission
   * const formSubmission = await prisma.formSubmission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormSubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormSubmission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionFindFirstArgs} args - Arguments to find a FormSubmission
   * @example
   * // Get one FormSubmission
   * const formSubmission = await prisma.formSubmission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormSubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, FormSubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormSubmission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionFindFirstOrThrowArgs} args - Arguments to find a FormSubmission
   * @example
   * // Get one FormSubmission
   * const formSubmission = await prisma.formSubmission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormSubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormSubmissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormSubmissions
   * const formSubmissions = await prisma.formSubmission.findMany()
   * 
   * // Get first 10 FormSubmissions
   * const formSubmissions = await prisma.formSubmission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formSubmissionWithIdOnly = await prisma.formSubmission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormSubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, FormSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormSubmission.
   * @param {FormSubmissionCreateArgs} args - Arguments to create a FormSubmission.
   * @example
   * // Create one FormSubmission
   * const FormSubmission = await prisma.formSubmission.create({
   *   data: {
   *     // ... data to create a FormSubmission
   *   }
   * })
   * 
   */
  create<T extends FormSubmissionCreateArgs>(args: Prisma.SelectSubset<T, FormSubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormSubmissions.
   * @param {FormSubmissionCreateManyArgs} args - Arguments to create many FormSubmissions.
   * @example
   * // Create many FormSubmissions
   * const formSubmission = await prisma.formSubmission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormSubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, FormSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormSubmissions and returns the data saved in the database.
   * @param {FormSubmissionCreateManyAndReturnArgs} args - Arguments to create many FormSubmissions.
   * @example
   * // Create many FormSubmissions
   * const formSubmission = await prisma.formSubmission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormSubmissions and only return the `id`
   * const formSubmissionWithIdOnly = await prisma.formSubmission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormSubmissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormSubmission.
   * @param {FormSubmissionDeleteArgs} args - Arguments to delete one FormSubmission.
   * @example
   * // Delete one FormSubmission
   * const FormSubmission = await prisma.formSubmission.delete({
   *   where: {
   *     // ... filter to delete one FormSubmission
   *   }
   * })
   * 
   */
  delete<T extends FormSubmissionDeleteArgs>(args: Prisma.SelectSubset<T, FormSubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormSubmission.
   * @param {FormSubmissionUpdateArgs} args - Arguments to update one FormSubmission.
   * @example
   * // Update one FormSubmission
   * const formSubmission = await prisma.formSubmission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormSubmissionUpdateArgs>(args: Prisma.SelectSubset<T, FormSubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormSubmissions.
   * @param {FormSubmissionDeleteManyArgs} args - Arguments to filter FormSubmissions to delete.
   * @example
   * // Delete a few FormSubmissions
   * const { count } = await prisma.formSubmission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormSubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormSubmissions
   * const formSubmission = await prisma.formSubmission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormSubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, FormSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormSubmissions and returns the data updated in the database.
   * @param {FormSubmissionUpdateManyAndReturnArgs} args - Arguments to update many FormSubmissions.
   * @example
   * // Update many FormSubmissions
   * const formSubmission = await prisma.formSubmission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormSubmissions and only return the `id`
   * const formSubmissionWithIdOnly = await prisma.formSubmission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormSubmissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormSubmission.
   * @param {FormSubmissionUpsertArgs} args - Arguments to update or create a FormSubmission.
   * @example
   * // Update or create a FormSubmission
   * const formSubmission = await prisma.formSubmission.upsert({
   *   create: {
   *     // ... data to create a FormSubmission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormSubmission we want to update
   *   }
   * })
   */
  upsert<T extends FormSubmissionUpsertArgs>(args: Prisma.SelectSubset<T, FormSubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__FormSubmissionClient<runtime.Types.Result.GetResult<Prisma.$FormSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionCountArgs} args - Arguments to filter FormSubmissions to count.
   * @example
   * // Count the number of FormSubmissions
   * const count = await prisma.formSubmission.count({
   *   where: {
   *     // ... the filter for the FormSubmissions we want to count
   *   }
   * })
  **/
  count<T extends FormSubmissionCountArgs>(
    args?: Prisma.Subset<T, FormSubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormSubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormSubmissionAggregateArgs>(args: Prisma.Subset<T, FormSubmissionAggregateArgs>): Prisma.PrismaPromise<GetFormSubmissionAggregateType<T>>

  /**
   * Group by FormSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormSubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormSubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormSubmissionGroupByArgs['orderBy'] }
      : { orderBy?: FormSubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormSubmission model
 */
readonly fields: FormSubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormSubmission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormSubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Approvals<T extends Prisma.FormSubmission$ApprovalsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormSubmission$ApprovalsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  FormTemplate<T extends Prisma.FormTemplateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormTemplateDefaultArgs<ExtArgs>>): Prisma.Prisma__FormTemplateClient<runtime.Types.Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormSubmission model
 */
export interface FormSubmissionFieldRefs {
  readonly id: Prisma.FieldRef<"FormSubmission", 'String'>
  readonly title: Prisma.FieldRef<"FormSubmission", 'String'>
  readonly formTemplateId: Prisma.FieldRef<"FormSubmission", 'String'>
  readonly userId: Prisma.FieldRef<"FormSubmission", 'String'>
  readonly formType: Prisma.FieldRef<"FormSubmission", 'String'>
  readonly data: Prisma.FieldRef<"FormSubmission", 'Json'>
  readonly createdAt: Prisma.FieldRef<"FormSubmission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"FormSubmission", 'DateTime'>
  readonly submittedAt: Prisma.FieldRef<"FormSubmission", 'DateTime'>
  readonly status: Prisma.FieldRef<"FormSubmission", 'FormStatus'>
}
    

// Custom InputTypes
/**
 * FormSubmission findUnique
 */
export type FormSubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FormSubmission to fetch.
   */
  where: Prisma.FormSubmissionWhereUniqueInput
}

/**
 * FormSubmission findUniqueOrThrow
 */
export type FormSubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FormSubmission to fetch.
   */
  where: Prisma.FormSubmissionWhereUniqueInput
}

/**
 * FormSubmission findFirst
 */
export type FormSubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FormSubmission to fetch.
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormSubmissions to fetch.
   */
  orderBy?: Prisma.FormSubmissionOrderByWithRelationInput | Prisma.FormSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormSubmissions.
   */
  cursor?: Prisma.FormSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormSubmissions.
   */
  distinct?: Prisma.FormSubmissionScalarFieldEnum | Prisma.FormSubmissionScalarFieldEnum[]
}

/**
 * FormSubmission findFirstOrThrow
 */
export type FormSubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FormSubmission to fetch.
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormSubmissions to fetch.
   */
  orderBy?: Prisma.FormSubmissionOrderByWithRelationInput | Prisma.FormSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormSubmissions.
   */
  cursor?: Prisma.FormSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormSubmissions.
   */
  distinct?: Prisma.FormSubmissionScalarFieldEnum | Prisma.FormSubmissionScalarFieldEnum[]
}

/**
 * FormSubmission findMany
 */
export type FormSubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * Filter, which FormSubmissions to fetch.
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormSubmissions to fetch.
   */
  orderBy?: Prisma.FormSubmissionOrderByWithRelationInput | Prisma.FormSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormSubmissions.
   */
  cursor?: Prisma.FormSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormSubmissions.
   */
  skip?: number
  distinct?: Prisma.FormSubmissionScalarFieldEnum | Prisma.FormSubmissionScalarFieldEnum[]
}

/**
 * FormSubmission create
 */
export type FormSubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * The data needed to create a FormSubmission.
   */
  data: Prisma.XOR<Prisma.FormSubmissionCreateInput, Prisma.FormSubmissionUncheckedCreateInput>
}

/**
 * FormSubmission createMany
 */
export type FormSubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormSubmissions.
   */
  data: Prisma.FormSubmissionCreateManyInput | Prisma.FormSubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormSubmission createManyAndReturn
 */
export type FormSubmissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * The data used to create many FormSubmissions.
   */
  data: Prisma.FormSubmissionCreateManyInput | Prisma.FormSubmissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormSubmission update
 */
export type FormSubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * The data needed to update a FormSubmission.
   */
  data: Prisma.XOR<Prisma.FormSubmissionUpdateInput, Prisma.FormSubmissionUncheckedUpdateInput>
  /**
   * Choose, which FormSubmission to update.
   */
  where: Prisma.FormSubmissionWhereUniqueInput
}

/**
 * FormSubmission updateMany
 */
export type FormSubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormSubmissions.
   */
  data: Prisma.XOR<Prisma.FormSubmissionUpdateManyMutationInput, Prisma.FormSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which FormSubmissions to update
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * Limit how many FormSubmissions to update.
   */
  limit?: number
}

/**
 * FormSubmission updateManyAndReturn
 */
export type FormSubmissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * The data used to update FormSubmissions.
   */
  data: Prisma.XOR<Prisma.FormSubmissionUpdateManyMutationInput, Prisma.FormSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which FormSubmissions to update
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * Limit how many FormSubmissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormSubmission upsert
 */
export type FormSubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * The filter to search for the FormSubmission to update in case it exists.
   */
  where: Prisma.FormSubmissionWhereUniqueInput
  /**
   * In case the FormSubmission found by the `where` argument doesn't exist, create a new FormSubmission with this data.
   */
  create: Prisma.XOR<Prisma.FormSubmissionCreateInput, Prisma.FormSubmissionUncheckedCreateInput>
  /**
   * In case the FormSubmission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormSubmissionUpdateInput, Prisma.FormSubmissionUncheckedUpdateInput>
}

/**
 * FormSubmission delete
 */
export type FormSubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
  /**
   * Filter which FormSubmission to delete.
   */
  where: Prisma.FormSubmissionWhereUniqueInput
}

/**
 * FormSubmission deleteMany
 */
export type FormSubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormSubmissions to delete
   */
  where?: Prisma.FormSubmissionWhereInput
  /**
   * Limit how many FormSubmissions to delete.
   */
  limit?: number
}

/**
 * FormSubmission.Approvals
 */
export type FormSubmission$ApprovalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormApproval
   */
  select?: Prisma.FormApprovalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormApproval
   */
  omit?: Prisma.FormApprovalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormApprovalInclude<ExtArgs> | null
  where?: Prisma.FormApprovalWhereInput
  orderBy?: Prisma.FormApprovalOrderByWithRelationInput | Prisma.FormApprovalOrderByWithRelationInput[]
  cursor?: Prisma.FormApprovalWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormApprovalScalarFieldEnum | Prisma.FormApprovalScalarFieldEnum[]
}

/**
 * FormSubmission without action
 */
export type FormSubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormSubmission
   */
  select?: Prisma.FormSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormSubmission
   */
  omit?: Prisma.FormSubmissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormSubmissionInclude<ExtArgs> | null
}
