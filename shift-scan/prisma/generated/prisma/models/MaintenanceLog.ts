
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MaintenanceLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MaintenanceLog
 * 
 */
export type MaintenanceLogModel = runtime.Types.Result.DefaultSelection<Prisma.$MaintenanceLogPayload>

export type AggregateMaintenanceLog = {
  _count: MaintenanceLogCountAggregateOutputType | null
  _min: MaintenanceLogMinAggregateOutputType | null
  _max: MaintenanceLogMaxAggregateOutputType | null
}

export type MaintenanceLogMinAggregateOutputType = {
  id: string | null
  timeSheetId: string | null
  userId: string | null
  maintenanceId: string | null
  startTime: Date | null
  endTime: Date | null
  comment: string | null
}

export type MaintenanceLogMaxAggregateOutputType = {
  id: string | null
  timeSheetId: string | null
  userId: string | null
  maintenanceId: string | null
  startTime: Date | null
  endTime: Date | null
  comment: string | null
}

export type MaintenanceLogCountAggregateOutputType = {
  id: number
  timeSheetId: number
  userId: number
  maintenanceId: number
  startTime: number
  endTime: number
  comment: number
  _all: number
}


export type MaintenanceLogMinAggregateInputType = {
  id?: true
  timeSheetId?: true
  userId?: true
  maintenanceId?: true
  startTime?: true
  endTime?: true
  comment?: true
}

export type MaintenanceLogMaxAggregateInputType = {
  id?: true
  timeSheetId?: true
  userId?: true
  maintenanceId?: true
  startTime?: true
  endTime?: true
  comment?: true
}

export type MaintenanceLogCountAggregateInputType = {
  id?: true
  timeSheetId?: true
  userId?: true
  maintenanceId?: true
  startTime?: true
  endTime?: true
  comment?: true
  _all?: true
}

export type MaintenanceLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MaintenanceLog to aggregate.
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MaintenanceLogs to fetch.
   */
  orderBy?: Prisma.MaintenanceLogOrderByWithRelationInput | Prisma.MaintenanceLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MaintenanceLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MaintenanceLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MaintenanceLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MaintenanceLogs
  **/
  _count?: true | MaintenanceLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MaintenanceLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MaintenanceLogMaxAggregateInputType
}

export type GetMaintenanceLogAggregateType<T extends MaintenanceLogAggregateArgs> = {
      [P in keyof T & keyof AggregateMaintenanceLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMaintenanceLog[P]>
    : Prisma.GetScalarType<T[P], AggregateMaintenanceLog[P]>
}




export type MaintenanceLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MaintenanceLogWhereInput
  orderBy?: Prisma.MaintenanceLogOrderByWithAggregationInput | Prisma.MaintenanceLogOrderByWithAggregationInput[]
  by: Prisma.MaintenanceLogScalarFieldEnum[] | Prisma.MaintenanceLogScalarFieldEnum
  having?: Prisma.MaintenanceLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MaintenanceLogCountAggregateInputType | true
  _min?: MaintenanceLogMinAggregateInputType
  _max?: MaintenanceLogMaxAggregateInputType
}

export type MaintenanceLogGroupByOutputType = {
  id: string
  timeSheetId: string
  userId: string
  maintenanceId: string
  startTime: Date
  endTime: Date | null
  comment: string | null
  _count: MaintenanceLogCountAggregateOutputType | null
  _min: MaintenanceLogMinAggregateOutputType | null
  _max: MaintenanceLogMaxAggregateOutputType | null
}

type GetMaintenanceLogGroupByPayload<T extends MaintenanceLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MaintenanceLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MaintenanceLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MaintenanceLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MaintenanceLogGroupByOutputType[P]>
      }
    >
  >



export type MaintenanceLogWhereInput = {
  AND?: Prisma.MaintenanceLogWhereInput | Prisma.MaintenanceLogWhereInput[]
  OR?: Prisma.MaintenanceLogWhereInput[]
  NOT?: Prisma.MaintenanceLogWhereInput | Prisma.MaintenanceLogWhereInput[]
  id?: Prisma.StringFilter<"MaintenanceLog"> | string
  timeSheetId?: Prisma.StringFilter<"MaintenanceLog"> | string
  userId?: Prisma.StringFilter<"MaintenanceLog"> | string
  maintenanceId?: Prisma.StringFilter<"MaintenanceLog"> | string
  startTime?: Prisma.DateTimeFilter<"MaintenanceLog"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"MaintenanceLog"> | Date | string | null
  comment?: Prisma.StringNullableFilter<"MaintenanceLog"> | string | null
  Maintenance?: Prisma.XOR<Prisma.MaintenanceScalarRelationFilter, Prisma.MaintenanceWhereInput>
  TimeSheet?: Prisma.XOR<Prisma.TimeSheetScalarRelationFilter, Prisma.TimeSheetWhereInput>
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MaintenanceLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  Maintenance?: Prisma.MaintenanceOrderByWithRelationInput
  TimeSheet?: Prisma.TimeSheetOrderByWithRelationInput
  User?: Prisma.UserOrderByWithRelationInput
}

export type MaintenanceLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MaintenanceLogWhereInput | Prisma.MaintenanceLogWhereInput[]
  OR?: Prisma.MaintenanceLogWhereInput[]
  NOT?: Prisma.MaintenanceLogWhereInput | Prisma.MaintenanceLogWhereInput[]
  timeSheetId?: Prisma.StringFilter<"MaintenanceLog"> | string
  userId?: Prisma.StringFilter<"MaintenanceLog"> | string
  maintenanceId?: Prisma.StringFilter<"MaintenanceLog"> | string
  startTime?: Prisma.DateTimeFilter<"MaintenanceLog"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"MaintenanceLog"> | Date | string | null
  comment?: Prisma.StringNullableFilter<"MaintenanceLog"> | string | null
  Maintenance?: Prisma.XOR<Prisma.MaintenanceScalarRelationFilter, Prisma.MaintenanceWhereInput>
  TimeSheet?: Prisma.XOR<Prisma.TimeSheetScalarRelationFilter, Prisma.TimeSheetWhereInput>
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type MaintenanceLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrderInput | Prisma.SortOrder
  comment?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.MaintenanceLogCountOrderByAggregateInput
  _max?: Prisma.MaintenanceLogMaxOrderByAggregateInput
  _min?: Prisma.MaintenanceLogMinOrderByAggregateInput
}

export type MaintenanceLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.MaintenanceLogScalarWhereWithAggregatesInput | Prisma.MaintenanceLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.MaintenanceLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MaintenanceLogScalarWhereWithAggregatesInput | Prisma.MaintenanceLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MaintenanceLog"> | string
  timeSheetId?: Prisma.StringWithAggregatesFilter<"MaintenanceLog"> | string
  userId?: Prisma.StringWithAggregatesFilter<"MaintenanceLog"> | string
  maintenanceId?: Prisma.StringWithAggregatesFilter<"MaintenanceLog"> | string
  startTime?: Prisma.DateTimeWithAggregatesFilter<"MaintenanceLog"> | Date | string
  endTime?: Prisma.DateTimeNullableWithAggregatesFilter<"MaintenanceLog"> | Date | string | null
  comment?: Prisma.StringNullableWithAggregatesFilter<"MaintenanceLog"> | string | null
}

export type MaintenanceLogCreateInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Maintenance: Prisma.MaintenanceCreateNestedOneWithoutMaintenanceLogsInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutMaintenanceLogsInput
  User: Prisma.UserCreateNestedOneWithoutMaintenanceLogsInput
}

export type MaintenanceLogUncheckedCreateInput = {
  id?: string
  timeSheetId: string
  userId: string
  maintenanceId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Maintenance?: Prisma.MaintenanceUpdateOneRequiredWithoutMaintenanceLogsNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutMaintenanceLogsNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutMaintenanceLogsNestedInput
}

export type MaintenanceLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogCreateManyInput = {
  id?: string
  timeSheetId: string
  userId: string
  maintenanceId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogListRelationFilter = {
  every?: Prisma.MaintenanceLogWhereInput
  some?: Prisma.MaintenanceLogWhereInput
  none?: Prisma.MaintenanceLogWhereInput
}

export type MaintenanceLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MaintenanceLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type MaintenanceLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type MaintenanceLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timeSheetId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  maintenanceId?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type MaintenanceLogCreateNestedManyWithoutTimeSheetInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput> | Prisma.MaintenanceLogCreateWithoutTimeSheetInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput | Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput[]
  createMany?: Prisma.MaintenanceLogCreateManyTimeSheetInputEnvelope
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
}

export type MaintenanceLogUncheckedCreateNestedManyWithoutTimeSheetInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput> | Prisma.MaintenanceLogCreateWithoutTimeSheetInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput | Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput[]
  createMany?: Prisma.MaintenanceLogCreateManyTimeSheetInputEnvelope
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
}

export type MaintenanceLogUpdateManyWithoutTimeSheetNestedInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput> | Prisma.MaintenanceLogCreateWithoutTimeSheetInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput | Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput[]
  upsert?: Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutTimeSheetInput | Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutTimeSheetInput[]
  createMany?: Prisma.MaintenanceLogCreateManyTimeSheetInputEnvelope
  set?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  disconnect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  delete?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  update?: Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutTimeSheetInput | Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutTimeSheetInput[]
  updateMany?: Prisma.MaintenanceLogUpdateManyWithWhereWithoutTimeSheetInput | Prisma.MaintenanceLogUpdateManyWithWhereWithoutTimeSheetInput[]
  deleteMany?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
}

export type MaintenanceLogUncheckedUpdateManyWithoutTimeSheetNestedInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput> | Prisma.MaintenanceLogCreateWithoutTimeSheetInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput | Prisma.MaintenanceLogCreateOrConnectWithoutTimeSheetInput[]
  upsert?: Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutTimeSheetInput | Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutTimeSheetInput[]
  createMany?: Prisma.MaintenanceLogCreateManyTimeSheetInputEnvelope
  set?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  disconnect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  delete?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  update?: Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutTimeSheetInput | Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutTimeSheetInput[]
  updateMany?: Prisma.MaintenanceLogUpdateManyWithWhereWithoutTimeSheetInput | Prisma.MaintenanceLogUpdateManyWithWhereWithoutTimeSheetInput[]
  deleteMany?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
}

export type MaintenanceLogCreateNestedManyWithoutMaintenanceInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput> | Prisma.MaintenanceLogCreateWithoutMaintenanceInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput | Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput[]
  createMany?: Prisma.MaintenanceLogCreateManyMaintenanceInputEnvelope
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
}

export type MaintenanceLogUncheckedCreateNestedManyWithoutMaintenanceInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput> | Prisma.MaintenanceLogCreateWithoutMaintenanceInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput | Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput[]
  createMany?: Prisma.MaintenanceLogCreateManyMaintenanceInputEnvelope
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
}

export type MaintenanceLogUpdateManyWithoutMaintenanceNestedInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput> | Prisma.MaintenanceLogCreateWithoutMaintenanceInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput | Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput[]
  upsert?: Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutMaintenanceInput | Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutMaintenanceInput[]
  createMany?: Prisma.MaintenanceLogCreateManyMaintenanceInputEnvelope
  set?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  disconnect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  delete?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  update?: Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutMaintenanceInput | Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutMaintenanceInput[]
  updateMany?: Prisma.MaintenanceLogUpdateManyWithWhereWithoutMaintenanceInput | Prisma.MaintenanceLogUpdateManyWithWhereWithoutMaintenanceInput[]
  deleteMany?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
}

export type MaintenanceLogUncheckedUpdateManyWithoutMaintenanceNestedInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput> | Prisma.MaintenanceLogCreateWithoutMaintenanceInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput | Prisma.MaintenanceLogCreateOrConnectWithoutMaintenanceInput[]
  upsert?: Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutMaintenanceInput | Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutMaintenanceInput[]
  createMany?: Prisma.MaintenanceLogCreateManyMaintenanceInputEnvelope
  set?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  disconnect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  delete?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  update?: Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutMaintenanceInput | Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutMaintenanceInput[]
  updateMany?: Prisma.MaintenanceLogUpdateManyWithWhereWithoutMaintenanceInput | Prisma.MaintenanceLogUpdateManyWithWhereWithoutMaintenanceInput[]
  deleteMany?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
}

export type MaintenanceLogCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutUserInput, Prisma.MaintenanceLogUncheckedCreateWithoutUserInput> | Prisma.MaintenanceLogCreateWithoutUserInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutUserInput | Prisma.MaintenanceLogCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MaintenanceLogCreateManyUserInputEnvelope
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
}

export type MaintenanceLogUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutUserInput, Prisma.MaintenanceLogUncheckedCreateWithoutUserInput> | Prisma.MaintenanceLogCreateWithoutUserInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutUserInput | Prisma.MaintenanceLogCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MaintenanceLogCreateManyUserInputEnvelope
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
}

export type MaintenanceLogUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutUserInput, Prisma.MaintenanceLogUncheckedCreateWithoutUserInput> | Prisma.MaintenanceLogCreateWithoutUserInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutUserInput | Prisma.MaintenanceLogCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutUserInput | Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MaintenanceLogCreateManyUserInputEnvelope
  set?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  disconnect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  delete?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  update?: Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutUserInput | Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MaintenanceLogUpdateManyWithWhereWithoutUserInput | Prisma.MaintenanceLogUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
}

export type MaintenanceLogUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutUserInput, Prisma.MaintenanceLogUncheckedCreateWithoutUserInput> | Prisma.MaintenanceLogCreateWithoutUserInput[] | Prisma.MaintenanceLogUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MaintenanceLogCreateOrConnectWithoutUserInput | Prisma.MaintenanceLogCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutUserInput | Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MaintenanceLogCreateManyUserInputEnvelope
  set?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  disconnect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  delete?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  connect?: Prisma.MaintenanceLogWhereUniqueInput | Prisma.MaintenanceLogWhereUniqueInput[]
  update?: Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutUserInput | Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MaintenanceLogUpdateManyWithWhereWithoutUserInput | Prisma.MaintenanceLogUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
}

export type MaintenanceLogCreateWithoutTimeSheetInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Maintenance: Prisma.MaintenanceCreateNestedOneWithoutMaintenanceLogsInput
  User: Prisma.UserCreateNestedOneWithoutMaintenanceLogsInput
}

export type MaintenanceLogUncheckedCreateWithoutTimeSheetInput = {
  id?: string
  userId: string
  maintenanceId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogCreateOrConnectWithoutTimeSheetInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  create: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput>
}

export type MaintenanceLogCreateManyTimeSheetInputEnvelope = {
  data: Prisma.MaintenanceLogCreateManyTimeSheetInput | Prisma.MaintenanceLogCreateManyTimeSheetInput[]
  skipDuplicates?: boolean
}

export type MaintenanceLogUpsertWithWhereUniqueWithoutTimeSheetInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  update: Prisma.XOR<Prisma.MaintenanceLogUpdateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedUpdateWithoutTimeSheetInput>
  create: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedCreateWithoutTimeSheetInput>
}

export type MaintenanceLogUpdateWithWhereUniqueWithoutTimeSheetInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateWithoutTimeSheetInput, Prisma.MaintenanceLogUncheckedUpdateWithoutTimeSheetInput>
}

export type MaintenanceLogUpdateManyWithWhereWithoutTimeSheetInput = {
  where: Prisma.MaintenanceLogScalarWhereInput
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateManyMutationInput, Prisma.MaintenanceLogUncheckedUpdateManyWithoutTimeSheetInput>
}

export type MaintenanceLogScalarWhereInput = {
  AND?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
  OR?: Prisma.MaintenanceLogScalarWhereInput[]
  NOT?: Prisma.MaintenanceLogScalarWhereInput | Prisma.MaintenanceLogScalarWhereInput[]
  id?: Prisma.StringFilter<"MaintenanceLog"> | string
  timeSheetId?: Prisma.StringFilter<"MaintenanceLog"> | string
  userId?: Prisma.StringFilter<"MaintenanceLog"> | string
  maintenanceId?: Prisma.StringFilter<"MaintenanceLog"> | string
  startTime?: Prisma.DateTimeFilter<"MaintenanceLog"> | Date | string
  endTime?: Prisma.DateTimeNullableFilter<"MaintenanceLog"> | Date | string | null
  comment?: Prisma.StringNullableFilter<"MaintenanceLog"> | string | null
}

export type MaintenanceLogCreateWithoutMaintenanceInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutMaintenanceLogsInput
  User: Prisma.UserCreateNestedOneWithoutMaintenanceLogsInput
}

export type MaintenanceLogUncheckedCreateWithoutMaintenanceInput = {
  id?: string
  timeSheetId: string
  userId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogCreateOrConnectWithoutMaintenanceInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  create: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput>
}

export type MaintenanceLogCreateManyMaintenanceInputEnvelope = {
  data: Prisma.MaintenanceLogCreateManyMaintenanceInput | Prisma.MaintenanceLogCreateManyMaintenanceInput[]
  skipDuplicates?: boolean
}

export type MaintenanceLogUpsertWithWhereUniqueWithoutMaintenanceInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  update: Prisma.XOR<Prisma.MaintenanceLogUpdateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedUpdateWithoutMaintenanceInput>
  create: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedCreateWithoutMaintenanceInput>
}

export type MaintenanceLogUpdateWithWhereUniqueWithoutMaintenanceInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateWithoutMaintenanceInput, Prisma.MaintenanceLogUncheckedUpdateWithoutMaintenanceInput>
}

export type MaintenanceLogUpdateManyWithWhereWithoutMaintenanceInput = {
  where: Prisma.MaintenanceLogScalarWhereInput
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateManyMutationInput, Prisma.MaintenanceLogUncheckedUpdateManyWithoutMaintenanceInput>
}

export type MaintenanceLogCreateWithoutUserInput = {
  id?: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
  Maintenance: Prisma.MaintenanceCreateNestedOneWithoutMaintenanceLogsInput
  TimeSheet: Prisma.TimeSheetCreateNestedOneWithoutMaintenanceLogsInput
}

export type MaintenanceLogUncheckedCreateWithoutUserInput = {
  id?: string
  timeSheetId: string
  maintenanceId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogCreateOrConnectWithoutUserInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  create: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutUserInput, Prisma.MaintenanceLogUncheckedCreateWithoutUserInput>
}

export type MaintenanceLogCreateManyUserInputEnvelope = {
  data: Prisma.MaintenanceLogCreateManyUserInput | Prisma.MaintenanceLogCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MaintenanceLogUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  update: Prisma.XOR<Prisma.MaintenanceLogUpdateWithoutUserInput, Prisma.MaintenanceLogUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MaintenanceLogCreateWithoutUserInput, Prisma.MaintenanceLogUncheckedCreateWithoutUserInput>
}

export type MaintenanceLogUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MaintenanceLogWhereUniqueInput
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateWithoutUserInput, Prisma.MaintenanceLogUncheckedUpdateWithoutUserInput>
}

export type MaintenanceLogUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MaintenanceLogScalarWhereInput
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateManyMutationInput, Prisma.MaintenanceLogUncheckedUpdateManyWithoutUserInput>
}

export type MaintenanceLogCreateManyTimeSheetInput = {
  id?: string
  userId: string
  maintenanceId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogUpdateWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Maintenance?: Prisma.MaintenanceUpdateOneRequiredWithoutMaintenanceLogsNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutMaintenanceLogsNestedInput
}

export type MaintenanceLogUncheckedUpdateWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogUncheckedUpdateManyWithoutTimeSheetInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogCreateManyMaintenanceInput = {
  id?: string
  timeSheetId: string
  userId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogUpdateWithoutMaintenanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutMaintenanceLogsNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutMaintenanceLogsNestedInput
}

export type MaintenanceLogUncheckedUpdateWithoutMaintenanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogUncheckedUpdateManyWithoutMaintenanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogCreateManyUserInput = {
  id?: string
  timeSheetId: string
  maintenanceId: string
  startTime: Date | string
  endTime?: Date | string | null
  comment?: string | null
}

export type MaintenanceLogUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Maintenance?: Prisma.MaintenanceUpdateOneRequiredWithoutMaintenanceLogsNestedInput
  TimeSheet?: Prisma.TimeSheetUpdateOneRequiredWithoutMaintenanceLogsNestedInput
}

export type MaintenanceLogUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type MaintenanceLogUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timeSheetId?: Prisma.StringFieldUpdateOperationsInput | string
  maintenanceId?: Prisma.StringFieldUpdateOperationsInput | string
  startTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  comment?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type MaintenanceLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  userId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
  Maintenance?: boolean | Prisma.MaintenanceDefaultArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["maintenanceLog"]>

export type MaintenanceLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  userId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
  Maintenance?: boolean | Prisma.MaintenanceDefaultArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["maintenanceLog"]>

export type MaintenanceLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timeSheetId?: boolean
  userId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
  Maintenance?: boolean | Prisma.MaintenanceDefaultArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["maintenanceLog"]>

export type MaintenanceLogSelectScalar = {
  id?: boolean
  timeSheetId?: boolean
  userId?: boolean
  maintenanceId?: boolean
  startTime?: boolean
  endTime?: boolean
  comment?: boolean
}

export type MaintenanceLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "timeSheetId" | "userId" | "maintenanceId" | "startTime" | "endTime" | "comment", ExtArgs["result"]["maintenanceLog"]>
export type MaintenanceLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Maintenance?: boolean | Prisma.MaintenanceDefaultArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MaintenanceLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Maintenance?: boolean | Prisma.MaintenanceDefaultArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MaintenanceLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Maintenance?: boolean | Prisma.MaintenanceDefaultArgs<ExtArgs>
  TimeSheet?: boolean | Prisma.TimeSheetDefaultArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MaintenanceLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MaintenanceLog"
  objects: {
    Maintenance: Prisma.$MaintenancePayload<ExtArgs>
    TimeSheet: Prisma.$TimeSheetPayload<ExtArgs>
    User: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    timeSheetId: string
    userId: string
    maintenanceId: string
    startTime: Date
    endTime: Date | null
    comment: string | null
  }, ExtArgs["result"]["maintenanceLog"]>
  composites: {}
}

export type MaintenanceLogGetPayload<S extends boolean | null | undefined | MaintenanceLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload, S>

export type MaintenanceLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MaintenanceLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MaintenanceLogCountAggregateInputType | true
  }

export interface MaintenanceLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceLog'], meta: { name: 'MaintenanceLog' } }
  /**
   * Find zero or one MaintenanceLog that matches the filter.
   * @param {MaintenanceLogFindUniqueArgs} args - Arguments to find a MaintenanceLog
   * @example
   * // Get one MaintenanceLog
   * const maintenanceLog = await prisma.maintenanceLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MaintenanceLogFindUniqueArgs>(args: Prisma.SelectSubset<T, MaintenanceLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MaintenanceLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MaintenanceLogFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceLog
   * @example
   * // Get one MaintenanceLog
   * const maintenanceLog = await prisma.maintenanceLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MaintenanceLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MaintenanceLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MaintenanceLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogFindFirstArgs} args - Arguments to find a MaintenanceLog
   * @example
   * // Get one MaintenanceLog
   * const maintenanceLog = await prisma.maintenanceLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MaintenanceLogFindFirstArgs>(args?: Prisma.SelectSubset<T, MaintenanceLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MaintenanceLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogFindFirstOrThrowArgs} args - Arguments to find a MaintenanceLog
   * @example
   * // Get one MaintenanceLog
   * const maintenanceLog = await prisma.maintenanceLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MaintenanceLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MaintenanceLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MaintenanceLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MaintenanceLogs
   * const maintenanceLogs = await prisma.maintenanceLog.findMany()
   * 
   * // Get first 10 MaintenanceLogs
   * const maintenanceLogs = await prisma.maintenanceLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const maintenanceLogWithIdOnly = await prisma.maintenanceLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MaintenanceLogFindManyArgs>(args?: Prisma.SelectSubset<T, MaintenanceLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MaintenanceLog.
   * @param {MaintenanceLogCreateArgs} args - Arguments to create a MaintenanceLog.
   * @example
   * // Create one MaintenanceLog
   * const MaintenanceLog = await prisma.maintenanceLog.create({
   *   data: {
   *     // ... data to create a MaintenanceLog
   *   }
   * })
   * 
   */
  create<T extends MaintenanceLogCreateArgs>(args: Prisma.SelectSubset<T, MaintenanceLogCreateArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MaintenanceLogs.
   * @param {MaintenanceLogCreateManyArgs} args - Arguments to create many MaintenanceLogs.
   * @example
   * // Create many MaintenanceLogs
   * const maintenanceLog = await prisma.maintenanceLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MaintenanceLogCreateManyArgs>(args?: Prisma.SelectSubset<T, MaintenanceLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MaintenanceLogs and returns the data saved in the database.
   * @param {MaintenanceLogCreateManyAndReturnArgs} args - Arguments to create many MaintenanceLogs.
   * @example
   * // Create many MaintenanceLogs
   * const maintenanceLog = await prisma.maintenanceLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MaintenanceLogs and only return the `id`
   * const maintenanceLogWithIdOnly = await prisma.maintenanceLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MaintenanceLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MaintenanceLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MaintenanceLog.
   * @param {MaintenanceLogDeleteArgs} args - Arguments to delete one MaintenanceLog.
   * @example
   * // Delete one MaintenanceLog
   * const MaintenanceLog = await prisma.maintenanceLog.delete({
   *   where: {
   *     // ... filter to delete one MaintenanceLog
   *   }
   * })
   * 
   */
  delete<T extends MaintenanceLogDeleteArgs>(args: Prisma.SelectSubset<T, MaintenanceLogDeleteArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MaintenanceLog.
   * @param {MaintenanceLogUpdateArgs} args - Arguments to update one MaintenanceLog.
   * @example
   * // Update one MaintenanceLog
   * const maintenanceLog = await prisma.maintenanceLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MaintenanceLogUpdateArgs>(args: Prisma.SelectSubset<T, MaintenanceLogUpdateArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MaintenanceLogs.
   * @param {MaintenanceLogDeleteManyArgs} args - Arguments to filter MaintenanceLogs to delete.
   * @example
   * // Delete a few MaintenanceLogs
   * const { count } = await prisma.maintenanceLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MaintenanceLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, MaintenanceLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MaintenanceLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MaintenanceLogs
   * const maintenanceLog = await prisma.maintenanceLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MaintenanceLogUpdateManyArgs>(args: Prisma.SelectSubset<T, MaintenanceLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MaintenanceLogs and returns the data updated in the database.
   * @param {MaintenanceLogUpdateManyAndReturnArgs} args - Arguments to update many MaintenanceLogs.
   * @example
   * // Update many MaintenanceLogs
   * const maintenanceLog = await prisma.maintenanceLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MaintenanceLogs and only return the `id`
   * const maintenanceLogWithIdOnly = await prisma.maintenanceLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MaintenanceLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MaintenanceLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MaintenanceLog.
   * @param {MaintenanceLogUpsertArgs} args - Arguments to update or create a MaintenanceLog.
   * @example
   * // Update or create a MaintenanceLog
   * const maintenanceLog = await prisma.maintenanceLog.upsert({
   *   create: {
   *     // ... data to create a MaintenanceLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MaintenanceLog we want to update
   *   }
   * })
   */
  upsert<T extends MaintenanceLogUpsertArgs>(args: Prisma.SelectSubset<T, MaintenanceLogUpsertArgs<ExtArgs>>): Prisma.Prisma__MaintenanceLogClient<runtime.Types.Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MaintenanceLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogCountArgs} args - Arguments to filter MaintenanceLogs to count.
   * @example
   * // Count the number of MaintenanceLogs
   * const count = await prisma.maintenanceLog.count({
   *   where: {
   *     // ... the filter for the MaintenanceLogs we want to count
   *   }
   * })
  **/
  count<T extends MaintenanceLogCountArgs>(
    args?: Prisma.Subset<T, MaintenanceLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MaintenanceLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MaintenanceLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MaintenanceLogAggregateArgs>(args: Prisma.Subset<T, MaintenanceLogAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceLogAggregateType<T>>

  /**
   * Group by MaintenanceLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MaintenanceLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MaintenanceLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MaintenanceLogGroupByArgs['orderBy'] }
      : { orderBy?: MaintenanceLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MaintenanceLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MaintenanceLog model
 */
readonly fields: MaintenanceLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MaintenanceLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MaintenanceLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Maintenance<T extends Prisma.MaintenanceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MaintenanceDefaultArgs<ExtArgs>>): Prisma.Prisma__MaintenanceClient<runtime.Types.Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  TimeSheet<T extends Prisma.TimeSheetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TimeSheetDefaultArgs<ExtArgs>>): Prisma.Prisma__TimeSheetClient<runtime.Types.Result.GetResult<Prisma.$TimeSheetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MaintenanceLog model
 */
export interface MaintenanceLogFieldRefs {
  readonly id: Prisma.FieldRef<"MaintenanceLog", 'String'>
  readonly timeSheetId: Prisma.FieldRef<"MaintenanceLog", 'String'>
  readonly userId: Prisma.FieldRef<"MaintenanceLog", 'String'>
  readonly maintenanceId: Prisma.FieldRef<"MaintenanceLog", 'String'>
  readonly startTime: Prisma.FieldRef<"MaintenanceLog", 'DateTime'>
  readonly endTime: Prisma.FieldRef<"MaintenanceLog", 'DateTime'>
  readonly comment: Prisma.FieldRef<"MaintenanceLog", 'String'>
}
    

// Custom InputTypes
/**
 * MaintenanceLog findUnique
 */
export type MaintenanceLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * Filter, which MaintenanceLog to fetch.
   */
  where: Prisma.MaintenanceLogWhereUniqueInput
}

/**
 * MaintenanceLog findUniqueOrThrow
 */
export type MaintenanceLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * Filter, which MaintenanceLog to fetch.
   */
  where: Prisma.MaintenanceLogWhereUniqueInput
}

/**
 * MaintenanceLog findFirst
 */
export type MaintenanceLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * Filter, which MaintenanceLog to fetch.
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MaintenanceLogs to fetch.
   */
  orderBy?: Prisma.MaintenanceLogOrderByWithRelationInput | Prisma.MaintenanceLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MaintenanceLogs.
   */
  cursor?: Prisma.MaintenanceLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MaintenanceLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MaintenanceLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MaintenanceLogs.
   */
  distinct?: Prisma.MaintenanceLogScalarFieldEnum | Prisma.MaintenanceLogScalarFieldEnum[]
}

/**
 * MaintenanceLog findFirstOrThrow
 */
export type MaintenanceLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * Filter, which MaintenanceLog to fetch.
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MaintenanceLogs to fetch.
   */
  orderBy?: Prisma.MaintenanceLogOrderByWithRelationInput | Prisma.MaintenanceLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MaintenanceLogs.
   */
  cursor?: Prisma.MaintenanceLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MaintenanceLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MaintenanceLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MaintenanceLogs.
   */
  distinct?: Prisma.MaintenanceLogScalarFieldEnum | Prisma.MaintenanceLogScalarFieldEnum[]
}

/**
 * MaintenanceLog findMany
 */
export type MaintenanceLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * Filter, which MaintenanceLogs to fetch.
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MaintenanceLogs to fetch.
   */
  orderBy?: Prisma.MaintenanceLogOrderByWithRelationInput | Prisma.MaintenanceLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MaintenanceLogs.
   */
  cursor?: Prisma.MaintenanceLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MaintenanceLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MaintenanceLogs.
   */
  skip?: number
  distinct?: Prisma.MaintenanceLogScalarFieldEnum | Prisma.MaintenanceLogScalarFieldEnum[]
}

/**
 * MaintenanceLog create
 */
export type MaintenanceLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * The data needed to create a MaintenanceLog.
   */
  data: Prisma.XOR<Prisma.MaintenanceLogCreateInput, Prisma.MaintenanceLogUncheckedCreateInput>
}

/**
 * MaintenanceLog createMany
 */
export type MaintenanceLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MaintenanceLogs.
   */
  data: Prisma.MaintenanceLogCreateManyInput | Prisma.MaintenanceLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MaintenanceLog createManyAndReturn
 */
export type MaintenanceLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * The data used to create many MaintenanceLogs.
   */
  data: Prisma.MaintenanceLogCreateManyInput | Prisma.MaintenanceLogCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MaintenanceLog update
 */
export type MaintenanceLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * The data needed to update a MaintenanceLog.
   */
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateInput, Prisma.MaintenanceLogUncheckedUpdateInput>
  /**
   * Choose, which MaintenanceLog to update.
   */
  where: Prisma.MaintenanceLogWhereUniqueInput
}

/**
 * MaintenanceLog updateMany
 */
export type MaintenanceLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MaintenanceLogs.
   */
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateManyMutationInput, Prisma.MaintenanceLogUncheckedUpdateManyInput>
  /**
   * Filter which MaintenanceLogs to update
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * Limit how many MaintenanceLogs to update.
   */
  limit?: number
}

/**
 * MaintenanceLog updateManyAndReturn
 */
export type MaintenanceLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * The data used to update MaintenanceLogs.
   */
  data: Prisma.XOR<Prisma.MaintenanceLogUpdateManyMutationInput, Prisma.MaintenanceLogUncheckedUpdateManyInput>
  /**
   * Filter which MaintenanceLogs to update
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * Limit how many MaintenanceLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MaintenanceLog upsert
 */
export type MaintenanceLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * The filter to search for the MaintenanceLog to update in case it exists.
   */
  where: Prisma.MaintenanceLogWhereUniqueInput
  /**
   * In case the MaintenanceLog found by the `where` argument doesn't exist, create a new MaintenanceLog with this data.
   */
  create: Prisma.XOR<Prisma.MaintenanceLogCreateInput, Prisma.MaintenanceLogUncheckedCreateInput>
  /**
   * In case the MaintenanceLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MaintenanceLogUpdateInput, Prisma.MaintenanceLogUncheckedUpdateInput>
}

/**
 * MaintenanceLog delete
 */
export type MaintenanceLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
  /**
   * Filter which MaintenanceLog to delete.
   */
  where: Prisma.MaintenanceLogWhereUniqueInput
}

/**
 * MaintenanceLog deleteMany
 */
export type MaintenanceLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MaintenanceLogs to delete
   */
  where?: Prisma.MaintenanceLogWhereInput
  /**
   * Limit how many MaintenanceLogs to delete.
   */
  limit?: number
}

/**
 * MaintenanceLog without action
 */
export type MaintenanceLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MaintenanceLog
   */
  select?: Prisma.MaintenanceLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MaintenanceLog
   */
  omit?: Prisma.MaintenanceLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MaintenanceLogInclude<ExtArgs> | null
}
