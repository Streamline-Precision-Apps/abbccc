
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `FormFieldOption` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FormFieldOption
 * 
 */
export type FormFieldOptionModel = runtime.Types.Result.DefaultSelection<Prisma.$FormFieldOptionPayload>

export type AggregateFormFieldOption = {
  _count: FormFieldOptionCountAggregateOutputType | null
  _min: FormFieldOptionMinAggregateOutputType | null
  _max: FormFieldOptionMaxAggregateOutputType | null
}

export type FormFieldOptionMinAggregateOutputType = {
  id: string | null
  fieldId: string | null
  value: string | null
}

export type FormFieldOptionMaxAggregateOutputType = {
  id: string | null
  fieldId: string | null
  value: string | null
}

export type FormFieldOptionCountAggregateOutputType = {
  id: number
  fieldId: number
  value: number
  _all: number
}


export type FormFieldOptionMinAggregateInputType = {
  id?: true
  fieldId?: true
  value?: true
}

export type FormFieldOptionMaxAggregateInputType = {
  id?: true
  fieldId?: true
  value?: true
}

export type FormFieldOptionCountAggregateInputType = {
  id?: true
  fieldId?: true
  value?: true
  _all?: true
}

export type FormFieldOptionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormFieldOption to aggregate.
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFieldOptions to fetch.
   */
  orderBy?: Prisma.FormFieldOptionOrderByWithRelationInput | Prisma.FormFieldOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormFieldOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFieldOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFieldOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormFieldOptions
  **/
  _count?: true | FormFieldOptionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormFieldOptionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormFieldOptionMaxAggregateInputType
}

export type GetFormFieldOptionAggregateType<T extends FormFieldOptionAggregateArgs> = {
      [P in keyof T & keyof AggregateFormFieldOption]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormFieldOption[P]>
    : Prisma.GetScalarType<T[P], AggregateFormFieldOption[P]>
}




export type FormFieldOptionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormFieldOptionWhereInput
  orderBy?: Prisma.FormFieldOptionOrderByWithAggregationInput | Prisma.FormFieldOptionOrderByWithAggregationInput[]
  by: Prisma.FormFieldOptionScalarFieldEnum[] | Prisma.FormFieldOptionScalarFieldEnum
  having?: Prisma.FormFieldOptionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormFieldOptionCountAggregateInputType | true
  _min?: FormFieldOptionMinAggregateInputType
  _max?: FormFieldOptionMaxAggregateInputType
}

export type FormFieldOptionGroupByOutputType = {
  id: string
  fieldId: string
  value: string
  _count: FormFieldOptionCountAggregateOutputType | null
  _min: FormFieldOptionMinAggregateOutputType | null
  _max: FormFieldOptionMaxAggregateOutputType | null
}

type GetFormFieldOptionGroupByPayload<T extends FormFieldOptionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormFieldOptionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormFieldOptionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormFieldOptionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormFieldOptionGroupByOutputType[P]>
      }
    >
  >



export type FormFieldOptionWhereInput = {
  AND?: Prisma.FormFieldOptionWhereInput | Prisma.FormFieldOptionWhereInput[]
  OR?: Prisma.FormFieldOptionWhereInput[]
  NOT?: Prisma.FormFieldOptionWhereInput | Prisma.FormFieldOptionWhereInput[]
  id?: Prisma.StringFilter<"FormFieldOption"> | string
  fieldId?: Prisma.StringFilter<"FormFieldOption"> | string
  value?: Prisma.StringFilter<"FormFieldOption"> | string
  Field?: Prisma.XOR<Prisma.FormFieldScalarRelationFilter, Prisma.FormFieldWhereInput>
}

export type FormFieldOptionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fieldId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  Field?: Prisma.FormFieldOrderByWithRelationInput
}

export type FormFieldOptionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormFieldOptionWhereInput | Prisma.FormFieldOptionWhereInput[]
  OR?: Prisma.FormFieldOptionWhereInput[]
  NOT?: Prisma.FormFieldOptionWhereInput | Prisma.FormFieldOptionWhereInput[]
  fieldId?: Prisma.StringFilter<"FormFieldOption"> | string
  value?: Prisma.StringFilter<"FormFieldOption"> | string
  Field?: Prisma.XOR<Prisma.FormFieldScalarRelationFilter, Prisma.FormFieldWhereInput>
}, "id">

export type FormFieldOptionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fieldId?: Prisma.SortOrder
  value?: Prisma.SortOrder
  _count?: Prisma.FormFieldOptionCountOrderByAggregateInput
  _max?: Prisma.FormFieldOptionMaxOrderByAggregateInput
  _min?: Prisma.FormFieldOptionMinOrderByAggregateInput
}

export type FormFieldOptionScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormFieldOptionScalarWhereWithAggregatesInput | Prisma.FormFieldOptionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormFieldOptionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormFieldOptionScalarWhereWithAggregatesInput | Prisma.FormFieldOptionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormFieldOption"> | string
  fieldId?: Prisma.StringWithAggregatesFilter<"FormFieldOption"> | string
  value?: Prisma.StringWithAggregatesFilter<"FormFieldOption"> | string
}

export type FormFieldOptionCreateInput = {
  id?: string
  value: string
  Field: Prisma.FormFieldCreateNestedOneWithoutOptionsInput
}

export type FormFieldOptionUncheckedCreateInput = {
  id?: string
  fieldId: string
  value: string
}

export type FormFieldOptionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  Field?: Prisma.FormFieldUpdateOneRequiredWithoutOptionsNestedInput
}

export type FormFieldOptionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fieldId?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormFieldOptionCreateManyInput = {
  id?: string
  fieldId: string
  value: string
}

export type FormFieldOptionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormFieldOptionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fieldId?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormFieldOptionListRelationFilter = {
  every?: Prisma.FormFieldOptionWhereInput
  some?: Prisma.FormFieldOptionWhereInput
  none?: Prisma.FormFieldOptionWhereInput
}

export type FormFieldOptionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormFieldOptionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fieldId?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type FormFieldOptionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fieldId?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type FormFieldOptionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fieldId?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type FormFieldOptionCreateNestedManyWithoutFieldInput = {
  create?: Prisma.XOR<Prisma.FormFieldOptionCreateWithoutFieldInput, Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput> | Prisma.FormFieldOptionCreateWithoutFieldInput[] | Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput[]
  connectOrCreate?: Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput | Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput[]
  createMany?: Prisma.FormFieldOptionCreateManyFieldInputEnvelope
  connect?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
}

export type FormFieldOptionUncheckedCreateNestedManyWithoutFieldInput = {
  create?: Prisma.XOR<Prisma.FormFieldOptionCreateWithoutFieldInput, Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput> | Prisma.FormFieldOptionCreateWithoutFieldInput[] | Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput[]
  connectOrCreate?: Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput | Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput[]
  createMany?: Prisma.FormFieldOptionCreateManyFieldInputEnvelope
  connect?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
}

export type FormFieldOptionUpdateManyWithoutFieldNestedInput = {
  create?: Prisma.XOR<Prisma.FormFieldOptionCreateWithoutFieldInput, Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput> | Prisma.FormFieldOptionCreateWithoutFieldInput[] | Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput[]
  connectOrCreate?: Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput | Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput[]
  upsert?: Prisma.FormFieldOptionUpsertWithWhereUniqueWithoutFieldInput | Prisma.FormFieldOptionUpsertWithWhereUniqueWithoutFieldInput[]
  createMany?: Prisma.FormFieldOptionCreateManyFieldInputEnvelope
  set?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  disconnect?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  delete?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  connect?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  update?: Prisma.FormFieldOptionUpdateWithWhereUniqueWithoutFieldInput | Prisma.FormFieldOptionUpdateWithWhereUniqueWithoutFieldInput[]
  updateMany?: Prisma.FormFieldOptionUpdateManyWithWhereWithoutFieldInput | Prisma.FormFieldOptionUpdateManyWithWhereWithoutFieldInput[]
  deleteMany?: Prisma.FormFieldOptionScalarWhereInput | Prisma.FormFieldOptionScalarWhereInput[]
}

export type FormFieldOptionUncheckedUpdateManyWithoutFieldNestedInput = {
  create?: Prisma.XOR<Prisma.FormFieldOptionCreateWithoutFieldInput, Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput> | Prisma.FormFieldOptionCreateWithoutFieldInput[] | Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput[]
  connectOrCreate?: Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput | Prisma.FormFieldOptionCreateOrConnectWithoutFieldInput[]
  upsert?: Prisma.FormFieldOptionUpsertWithWhereUniqueWithoutFieldInput | Prisma.FormFieldOptionUpsertWithWhereUniqueWithoutFieldInput[]
  createMany?: Prisma.FormFieldOptionCreateManyFieldInputEnvelope
  set?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  disconnect?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  delete?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  connect?: Prisma.FormFieldOptionWhereUniqueInput | Prisma.FormFieldOptionWhereUniqueInput[]
  update?: Prisma.FormFieldOptionUpdateWithWhereUniqueWithoutFieldInput | Prisma.FormFieldOptionUpdateWithWhereUniqueWithoutFieldInput[]
  updateMany?: Prisma.FormFieldOptionUpdateManyWithWhereWithoutFieldInput | Prisma.FormFieldOptionUpdateManyWithWhereWithoutFieldInput[]
  deleteMany?: Prisma.FormFieldOptionScalarWhereInput | Prisma.FormFieldOptionScalarWhereInput[]
}

export type FormFieldOptionCreateWithoutFieldInput = {
  id?: string
  value: string
}

export type FormFieldOptionUncheckedCreateWithoutFieldInput = {
  id?: string
  value: string
}

export type FormFieldOptionCreateOrConnectWithoutFieldInput = {
  where: Prisma.FormFieldOptionWhereUniqueInput
  create: Prisma.XOR<Prisma.FormFieldOptionCreateWithoutFieldInput, Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput>
}

export type FormFieldOptionCreateManyFieldInputEnvelope = {
  data: Prisma.FormFieldOptionCreateManyFieldInput | Prisma.FormFieldOptionCreateManyFieldInput[]
  skipDuplicates?: boolean
}

export type FormFieldOptionUpsertWithWhereUniqueWithoutFieldInput = {
  where: Prisma.FormFieldOptionWhereUniqueInput
  update: Prisma.XOR<Prisma.FormFieldOptionUpdateWithoutFieldInput, Prisma.FormFieldOptionUncheckedUpdateWithoutFieldInput>
  create: Prisma.XOR<Prisma.FormFieldOptionCreateWithoutFieldInput, Prisma.FormFieldOptionUncheckedCreateWithoutFieldInput>
}

export type FormFieldOptionUpdateWithWhereUniqueWithoutFieldInput = {
  where: Prisma.FormFieldOptionWhereUniqueInput
  data: Prisma.XOR<Prisma.FormFieldOptionUpdateWithoutFieldInput, Prisma.FormFieldOptionUncheckedUpdateWithoutFieldInput>
}

export type FormFieldOptionUpdateManyWithWhereWithoutFieldInput = {
  where: Prisma.FormFieldOptionScalarWhereInput
  data: Prisma.XOR<Prisma.FormFieldOptionUpdateManyMutationInput, Prisma.FormFieldOptionUncheckedUpdateManyWithoutFieldInput>
}

export type FormFieldOptionScalarWhereInput = {
  AND?: Prisma.FormFieldOptionScalarWhereInput | Prisma.FormFieldOptionScalarWhereInput[]
  OR?: Prisma.FormFieldOptionScalarWhereInput[]
  NOT?: Prisma.FormFieldOptionScalarWhereInput | Prisma.FormFieldOptionScalarWhereInput[]
  id?: Prisma.StringFilter<"FormFieldOption"> | string
  fieldId?: Prisma.StringFilter<"FormFieldOption"> | string
  value?: Prisma.StringFilter<"FormFieldOption"> | string
}

export type FormFieldOptionCreateManyFieldInput = {
  id?: string
  value: string
}

export type FormFieldOptionUpdateWithoutFieldInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormFieldOptionUncheckedUpdateWithoutFieldInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type FormFieldOptionUncheckedUpdateManyWithoutFieldInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}



export type FormFieldOptionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fieldId?: boolean
  value?: boolean
  Field?: boolean | Prisma.FormFieldDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formFieldOption"]>

export type FormFieldOptionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fieldId?: boolean
  value?: boolean
  Field?: boolean | Prisma.FormFieldDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formFieldOption"]>

export type FormFieldOptionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fieldId?: boolean
  value?: boolean
  Field?: boolean | Prisma.FormFieldDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formFieldOption"]>

export type FormFieldOptionSelectScalar = {
  id?: boolean
  fieldId?: boolean
  value?: boolean
}

export type FormFieldOptionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fieldId" | "value", ExtArgs["result"]["formFieldOption"]>
export type FormFieldOptionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Field?: boolean | Prisma.FormFieldDefaultArgs<ExtArgs>
}
export type FormFieldOptionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Field?: boolean | Prisma.FormFieldDefaultArgs<ExtArgs>
}
export type FormFieldOptionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Field?: boolean | Prisma.FormFieldDefaultArgs<ExtArgs>
}

export type $FormFieldOptionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormFieldOption"
  objects: {
    Field: Prisma.$FormFieldPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    fieldId: string
    value: string
  }, ExtArgs["result"]["formFieldOption"]>
  composites: {}
}

export type FormFieldOptionGetPayload<S extends boolean | null | undefined | FormFieldOptionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload, S>

export type FormFieldOptionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormFieldOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormFieldOptionCountAggregateInputType | true
  }

export interface FormFieldOptionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormFieldOption'], meta: { name: 'FormFieldOption' } }
  /**
   * Find zero or one FormFieldOption that matches the filter.
   * @param {FormFieldOptionFindUniqueArgs} args - Arguments to find a FormFieldOption
   * @example
   * // Get one FormFieldOption
   * const formFieldOption = await prisma.formFieldOption.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormFieldOptionFindUniqueArgs>(args: Prisma.SelectSubset<T, FormFieldOptionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormFieldOption that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormFieldOptionFindUniqueOrThrowArgs} args - Arguments to find a FormFieldOption
   * @example
   * // Get one FormFieldOption
   * const formFieldOption = await prisma.formFieldOption.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormFieldOptionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormFieldOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormFieldOption that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionFindFirstArgs} args - Arguments to find a FormFieldOption
   * @example
   * // Get one FormFieldOption
   * const formFieldOption = await prisma.formFieldOption.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormFieldOptionFindFirstArgs>(args?: Prisma.SelectSubset<T, FormFieldOptionFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormFieldOption that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionFindFirstOrThrowArgs} args - Arguments to find a FormFieldOption
   * @example
   * // Get one FormFieldOption
   * const formFieldOption = await prisma.formFieldOption.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormFieldOptionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormFieldOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormFieldOptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormFieldOptions
   * const formFieldOptions = await prisma.formFieldOption.findMany()
   * 
   * // Get first 10 FormFieldOptions
   * const formFieldOptions = await prisma.formFieldOption.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formFieldOptionWithIdOnly = await prisma.formFieldOption.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormFieldOptionFindManyArgs>(args?: Prisma.SelectSubset<T, FormFieldOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormFieldOption.
   * @param {FormFieldOptionCreateArgs} args - Arguments to create a FormFieldOption.
   * @example
   * // Create one FormFieldOption
   * const FormFieldOption = await prisma.formFieldOption.create({
   *   data: {
   *     // ... data to create a FormFieldOption
   *   }
   * })
   * 
   */
  create<T extends FormFieldOptionCreateArgs>(args: Prisma.SelectSubset<T, FormFieldOptionCreateArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormFieldOptions.
   * @param {FormFieldOptionCreateManyArgs} args - Arguments to create many FormFieldOptions.
   * @example
   * // Create many FormFieldOptions
   * const formFieldOption = await prisma.formFieldOption.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormFieldOptionCreateManyArgs>(args?: Prisma.SelectSubset<T, FormFieldOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormFieldOptions and returns the data saved in the database.
   * @param {FormFieldOptionCreateManyAndReturnArgs} args - Arguments to create many FormFieldOptions.
   * @example
   * // Create many FormFieldOptions
   * const formFieldOption = await prisma.formFieldOption.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormFieldOptions and only return the `id`
   * const formFieldOptionWithIdOnly = await prisma.formFieldOption.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormFieldOptionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormFieldOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormFieldOption.
   * @param {FormFieldOptionDeleteArgs} args - Arguments to delete one FormFieldOption.
   * @example
   * // Delete one FormFieldOption
   * const FormFieldOption = await prisma.formFieldOption.delete({
   *   where: {
   *     // ... filter to delete one FormFieldOption
   *   }
   * })
   * 
   */
  delete<T extends FormFieldOptionDeleteArgs>(args: Prisma.SelectSubset<T, FormFieldOptionDeleteArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormFieldOption.
   * @param {FormFieldOptionUpdateArgs} args - Arguments to update one FormFieldOption.
   * @example
   * // Update one FormFieldOption
   * const formFieldOption = await prisma.formFieldOption.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormFieldOptionUpdateArgs>(args: Prisma.SelectSubset<T, FormFieldOptionUpdateArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormFieldOptions.
   * @param {FormFieldOptionDeleteManyArgs} args - Arguments to filter FormFieldOptions to delete.
   * @example
   * // Delete a few FormFieldOptions
   * const { count } = await prisma.formFieldOption.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormFieldOptionDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormFieldOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormFieldOptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormFieldOptions
   * const formFieldOption = await prisma.formFieldOption.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormFieldOptionUpdateManyArgs>(args: Prisma.SelectSubset<T, FormFieldOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormFieldOptions and returns the data updated in the database.
   * @param {FormFieldOptionUpdateManyAndReturnArgs} args - Arguments to update many FormFieldOptions.
   * @example
   * // Update many FormFieldOptions
   * const formFieldOption = await prisma.formFieldOption.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormFieldOptions and only return the `id`
   * const formFieldOptionWithIdOnly = await prisma.formFieldOption.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormFieldOptionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormFieldOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormFieldOption.
   * @param {FormFieldOptionUpsertArgs} args - Arguments to update or create a FormFieldOption.
   * @example
   * // Update or create a FormFieldOption
   * const formFieldOption = await prisma.formFieldOption.upsert({
   *   create: {
   *     // ... data to create a FormFieldOption
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormFieldOption we want to update
   *   }
   * })
   */
  upsert<T extends FormFieldOptionUpsertArgs>(args: Prisma.SelectSubset<T, FormFieldOptionUpsertArgs<ExtArgs>>): Prisma.Prisma__FormFieldOptionClient<runtime.Types.Result.GetResult<Prisma.$FormFieldOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormFieldOptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionCountArgs} args - Arguments to filter FormFieldOptions to count.
   * @example
   * // Count the number of FormFieldOptions
   * const count = await prisma.formFieldOption.count({
   *   where: {
   *     // ... the filter for the FormFieldOptions we want to count
   *   }
   * })
  **/
  count<T extends FormFieldOptionCountArgs>(
    args?: Prisma.Subset<T, FormFieldOptionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormFieldOptionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormFieldOption.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormFieldOptionAggregateArgs>(args: Prisma.Subset<T, FormFieldOptionAggregateArgs>): Prisma.PrismaPromise<GetFormFieldOptionAggregateType<T>>

  /**
   * Group by FormFieldOption.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormFieldOptionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormFieldOptionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormFieldOptionGroupByArgs['orderBy'] }
      : { orderBy?: FormFieldOptionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormFieldOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormFieldOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormFieldOption model
 */
readonly fields: FormFieldOptionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormFieldOption.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormFieldOptionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Field<T extends Prisma.FormFieldDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FormFieldDefaultArgs<ExtArgs>>): Prisma.Prisma__FormFieldClient<runtime.Types.Result.GetResult<Prisma.$FormFieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormFieldOption model
 */
export interface FormFieldOptionFieldRefs {
  readonly id: Prisma.FieldRef<"FormFieldOption", 'String'>
  readonly fieldId: Prisma.FieldRef<"FormFieldOption", 'String'>
  readonly value: Prisma.FieldRef<"FormFieldOption", 'String'>
}
    

// Custom InputTypes
/**
 * FormFieldOption findUnique
 */
export type FormFieldOptionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * Filter, which FormFieldOption to fetch.
   */
  where: Prisma.FormFieldOptionWhereUniqueInput
}

/**
 * FormFieldOption findUniqueOrThrow
 */
export type FormFieldOptionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * Filter, which FormFieldOption to fetch.
   */
  where: Prisma.FormFieldOptionWhereUniqueInput
}

/**
 * FormFieldOption findFirst
 */
export type FormFieldOptionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * Filter, which FormFieldOption to fetch.
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFieldOptions to fetch.
   */
  orderBy?: Prisma.FormFieldOptionOrderByWithRelationInput | Prisma.FormFieldOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormFieldOptions.
   */
  cursor?: Prisma.FormFieldOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFieldOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFieldOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormFieldOptions.
   */
  distinct?: Prisma.FormFieldOptionScalarFieldEnum | Prisma.FormFieldOptionScalarFieldEnum[]
}

/**
 * FormFieldOption findFirstOrThrow
 */
export type FormFieldOptionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * Filter, which FormFieldOption to fetch.
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFieldOptions to fetch.
   */
  orderBy?: Prisma.FormFieldOptionOrderByWithRelationInput | Prisma.FormFieldOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormFieldOptions.
   */
  cursor?: Prisma.FormFieldOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFieldOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFieldOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormFieldOptions.
   */
  distinct?: Prisma.FormFieldOptionScalarFieldEnum | Prisma.FormFieldOptionScalarFieldEnum[]
}

/**
 * FormFieldOption findMany
 */
export type FormFieldOptionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * Filter, which FormFieldOptions to fetch.
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormFieldOptions to fetch.
   */
  orderBy?: Prisma.FormFieldOptionOrderByWithRelationInput | Prisma.FormFieldOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormFieldOptions.
   */
  cursor?: Prisma.FormFieldOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormFieldOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormFieldOptions.
   */
  skip?: number
  distinct?: Prisma.FormFieldOptionScalarFieldEnum | Prisma.FormFieldOptionScalarFieldEnum[]
}

/**
 * FormFieldOption create
 */
export type FormFieldOptionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * The data needed to create a FormFieldOption.
   */
  data: Prisma.XOR<Prisma.FormFieldOptionCreateInput, Prisma.FormFieldOptionUncheckedCreateInput>
}

/**
 * FormFieldOption createMany
 */
export type FormFieldOptionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormFieldOptions.
   */
  data: Prisma.FormFieldOptionCreateManyInput | Prisma.FormFieldOptionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormFieldOption createManyAndReturn
 */
export type FormFieldOptionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * The data used to create many FormFieldOptions.
   */
  data: Prisma.FormFieldOptionCreateManyInput | Prisma.FormFieldOptionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormFieldOption update
 */
export type FormFieldOptionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * The data needed to update a FormFieldOption.
   */
  data: Prisma.XOR<Prisma.FormFieldOptionUpdateInput, Prisma.FormFieldOptionUncheckedUpdateInput>
  /**
   * Choose, which FormFieldOption to update.
   */
  where: Prisma.FormFieldOptionWhereUniqueInput
}

/**
 * FormFieldOption updateMany
 */
export type FormFieldOptionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormFieldOptions.
   */
  data: Prisma.XOR<Prisma.FormFieldOptionUpdateManyMutationInput, Prisma.FormFieldOptionUncheckedUpdateManyInput>
  /**
   * Filter which FormFieldOptions to update
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * Limit how many FormFieldOptions to update.
   */
  limit?: number
}

/**
 * FormFieldOption updateManyAndReturn
 */
export type FormFieldOptionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * The data used to update FormFieldOptions.
   */
  data: Prisma.XOR<Prisma.FormFieldOptionUpdateManyMutationInput, Prisma.FormFieldOptionUncheckedUpdateManyInput>
  /**
   * Filter which FormFieldOptions to update
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * Limit how many FormFieldOptions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormFieldOption upsert
 */
export type FormFieldOptionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * The filter to search for the FormFieldOption to update in case it exists.
   */
  where: Prisma.FormFieldOptionWhereUniqueInput
  /**
   * In case the FormFieldOption found by the `where` argument doesn't exist, create a new FormFieldOption with this data.
   */
  create: Prisma.XOR<Prisma.FormFieldOptionCreateInput, Prisma.FormFieldOptionUncheckedCreateInput>
  /**
   * In case the FormFieldOption was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormFieldOptionUpdateInput, Prisma.FormFieldOptionUncheckedUpdateInput>
}

/**
 * FormFieldOption delete
 */
export type FormFieldOptionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
  /**
   * Filter which FormFieldOption to delete.
   */
  where: Prisma.FormFieldOptionWhereUniqueInput
}

/**
 * FormFieldOption deleteMany
 */
export type FormFieldOptionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormFieldOptions to delete
   */
  where?: Prisma.FormFieldOptionWhereInput
  /**
   * Limit how many FormFieldOptions to delete.
   */
  limit?: number
}

/**
 * FormFieldOption without action
 */
export type FormFieldOptionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormFieldOption
   */
  select?: Prisma.FormFieldOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormFieldOption
   */
  omit?: Prisma.FormFieldOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormFieldOptionInclude<ExtArgs> | null
}
