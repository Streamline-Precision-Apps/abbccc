
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
export const prismaVersion: PrismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Client: 'Client',
  Company: 'Company',
  CostCode: 'CostCode',
  CCTag: 'CCTag',
  Crew: 'Crew',
  PdfDocument: 'PdfDocument',
  DocumentTag: 'DocumentTag',
  Equipment: 'Equipment',
  EquipmentVehicleInfo: 'EquipmentVehicleInfo',
  EmployeeEquipmentLog: 'EmployeeEquipmentLog',
  Error: 'Error',
  FormTemplate: 'FormTemplate',
  FormGrouping: 'FormGrouping',
  FormField: 'FormField',
  FormFieldOption: 'FormFieldOption',
  FormSubmission: 'FormSubmission',
  FormApproval: 'FormApproval',
  Jobsite: 'Jobsite',
  Report: 'Report',
  ReportRun: 'ReportRun',
  TimeSheet: 'TimeSheet',
  MaintenanceLog: 'MaintenanceLog',
  Maintenance: 'Maintenance',
  TascoLog: 'TascoLog',
  TascoMaterialTypes: 'TascoMaterialTypes',
  TruckingLog: 'TruckingLog',
  TruckLaborLogs: 'TruckLaborLogs',
  StateMileage: 'StateMileage',
  Material: 'Material',
  RefuelLog: 'RefuelLog',
  EquipmentHauled: 'EquipmentHauled',
  User: 'User',
  UserSettings: 'UserSettings',
  Contacts: 'Contacts',
  PasswordResetToken: 'PasswordResetToken',
  AccountSetupToken: 'AccountSetupToken',
  Address: 'Address'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "client" | "company" | "costCode" | "cCTag" | "crew" | "pdfDocument" | "documentTag" | "equipment" | "equipmentVehicleInfo" | "employeeEquipmentLog" | "error" | "formTemplate" | "formGrouping" | "formField" | "formFieldOption" | "formSubmission" | "formApproval" | "jobsite" | "report" | "reportRun" | "timeSheet" | "maintenanceLog" | "maintenance" | "tascoLog" | "tascoMaterialTypes" | "truckingLog" | "truckLaborLogs" | "stateMileage" | "material" | "refuelLog" | "equipmentHauled" | "user" | "userSettings" | "contacts" | "passwordResetToken" | "accountSetupToken" | "address"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Client: {
      payload: Prisma.$ClientPayload<ExtArgs>
      fields: Prisma.ClientFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClientFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        findFirst: {
          args: Prisma.ClientFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        findMany: {
          args: Prisma.ClientFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[]
        }
        create: {
          args: Prisma.ClientCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        createMany: {
          args: Prisma.ClientCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[]
        }
        delete: {
          args: Prisma.ClientDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        update: {
          args: Prisma.ClientUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        deleteMany: {
          args: Prisma.ClientDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClientUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[]
        }
        upsert: {
          args: Prisma.ClientUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>
        }
        aggregate: {
          args: Prisma.ClientAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClient>
        }
        groupBy: {
          args: Prisma.ClientGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClientCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientCountAggregateOutputType> | number
        }
      }
    }
    Company: {
      payload: Prisma.$CompanyPayload<ExtArgs>
      fields: Prisma.CompanyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CompanyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>
        }
        findFirst: {
          args: Prisma.CompanyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>
        }
        findMany: {
          args: Prisma.CompanyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>[]
        }
        create: {
          args: Prisma.CompanyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>
        }
        createMany: {
          args: Prisma.CompanyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>[]
        }
        delete: {
          args: Prisma.CompanyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>
        }
        update: {
          args: Prisma.CompanyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>
        }
        deleteMany: {
          args: Prisma.CompanyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CompanyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>[]
        }
        upsert: {
          args: Prisma.CompanyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompanyPayload>
        }
        aggregate: {
          args: Prisma.CompanyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCompany>
        }
        groupBy: {
          args: Prisma.CompanyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CompanyGroupByOutputType>[]
        }
        count: {
          args: Prisma.CompanyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CompanyCountAggregateOutputType> | number
        }
      }
    }
    CostCode: {
      payload: Prisma.$CostCodePayload<ExtArgs>
      fields: Prisma.CostCodeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CostCodeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CostCodeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>
        }
        findFirst: {
          args: Prisma.CostCodeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CostCodeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>
        }
        findMany: {
          args: Prisma.CostCodeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>[]
        }
        create: {
          args: Prisma.CostCodeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>
        }
        createMany: {
          args: Prisma.CostCodeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CostCodeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>[]
        }
        delete: {
          args: Prisma.CostCodeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>
        }
        update: {
          args: Prisma.CostCodeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>
        }
        deleteMany: {
          args: Prisma.CostCodeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CostCodeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CostCodeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>[]
        }
        upsert: {
          args: Prisma.CostCodeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostCodePayload>
        }
        aggregate: {
          args: Prisma.CostCodeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCostCode>
        }
        groupBy: {
          args: Prisma.CostCodeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CostCodeGroupByOutputType>[]
        }
        count: {
          args: Prisma.CostCodeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CostCodeCountAggregateOutputType> | number
        }
      }
    }
    CCTag: {
      payload: Prisma.$CCTagPayload<ExtArgs>
      fields: Prisma.CCTagFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CCTagFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CCTagFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>
        }
        findFirst: {
          args: Prisma.CCTagFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CCTagFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>
        }
        findMany: {
          args: Prisma.CCTagFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>[]
        }
        create: {
          args: Prisma.CCTagCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>
        }
        createMany: {
          args: Prisma.CCTagCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CCTagCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>[]
        }
        delete: {
          args: Prisma.CCTagDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>
        }
        update: {
          args: Prisma.CCTagUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>
        }
        deleteMany: {
          args: Prisma.CCTagDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CCTagUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CCTagUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>[]
        }
        upsert: {
          args: Prisma.CCTagUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CCTagPayload>
        }
        aggregate: {
          args: Prisma.CCTagAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCCTag>
        }
        groupBy: {
          args: Prisma.CCTagGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CCTagGroupByOutputType>[]
        }
        count: {
          args: Prisma.CCTagCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CCTagCountAggregateOutputType> | number
        }
      }
    }
    Crew: {
      payload: Prisma.$CrewPayload<ExtArgs>
      fields: Prisma.CrewFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CrewFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CrewFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>
        }
        findFirst: {
          args: Prisma.CrewFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CrewFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>
        }
        findMany: {
          args: Prisma.CrewFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>[]
        }
        create: {
          args: Prisma.CrewCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>
        }
        createMany: {
          args: Prisma.CrewCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CrewCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>[]
        }
        delete: {
          args: Prisma.CrewDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>
        }
        update: {
          args: Prisma.CrewUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>
        }
        deleteMany: {
          args: Prisma.CrewDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CrewUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CrewUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>[]
        }
        upsert: {
          args: Prisma.CrewUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CrewPayload>
        }
        aggregate: {
          args: Prisma.CrewAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCrew>
        }
        groupBy: {
          args: Prisma.CrewGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CrewGroupByOutputType>[]
        }
        count: {
          args: Prisma.CrewCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CrewCountAggregateOutputType> | number
        }
      }
    }
    PdfDocument: {
      payload: Prisma.$PdfDocumentPayload<ExtArgs>
      fields: Prisma.PdfDocumentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PdfDocumentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PdfDocumentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>
        }
        findFirst: {
          args: Prisma.PdfDocumentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PdfDocumentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>
        }
        findMany: {
          args: Prisma.PdfDocumentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>[]
        }
        create: {
          args: Prisma.PdfDocumentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>
        }
        createMany: {
          args: Prisma.PdfDocumentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PdfDocumentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>[]
        }
        delete: {
          args: Prisma.PdfDocumentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>
        }
        update: {
          args: Prisma.PdfDocumentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>
        }
        deleteMany: {
          args: Prisma.PdfDocumentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PdfDocumentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PdfDocumentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>[]
        }
        upsert: {
          args: Prisma.PdfDocumentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PdfDocumentPayload>
        }
        aggregate: {
          args: Prisma.PdfDocumentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePdfDocument>
        }
        groupBy: {
          args: Prisma.PdfDocumentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PdfDocumentGroupByOutputType>[]
        }
        count: {
          args: Prisma.PdfDocumentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PdfDocumentCountAggregateOutputType> | number
        }
      }
    }
    DocumentTag: {
      payload: Prisma.$DocumentTagPayload<ExtArgs>
      fields: Prisma.DocumentTagFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DocumentTagFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DocumentTagFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>
        }
        findFirst: {
          args: Prisma.DocumentTagFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DocumentTagFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>
        }
        findMany: {
          args: Prisma.DocumentTagFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>[]
        }
        create: {
          args: Prisma.DocumentTagCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>
        }
        createMany: {
          args: Prisma.DocumentTagCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DocumentTagCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>[]
        }
        delete: {
          args: Prisma.DocumentTagDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>
        }
        update: {
          args: Prisma.DocumentTagUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>
        }
        deleteMany: {
          args: Prisma.DocumentTagDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DocumentTagUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DocumentTagUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>[]
        }
        upsert: {
          args: Prisma.DocumentTagUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DocumentTagPayload>
        }
        aggregate: {
          args: Prisma.DocumentTagAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDocumentTag>
        }
        groupBy: {
          args: Prisma.DocumentTagGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentTagGroupByOutputType>[]
        }
        count: {
          args: Prisma.DocumentTagCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DocumentTagCountAggregateOutputType> | number
        }
      }
    }
    Equipment: {
      payload: Prisma.$EquipmentPayload<ExtArgs>
      fields: Prisma.EquipmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EquipmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EquipmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>
        }
        findFirst: {
          args: Prisma.EquipmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EquipmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>
        }
        findMany: {
          args: Prisma.EquipmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
        }
        create: {
          args: Prisma.EquipmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>
        }
        createMany: {
          args: Prisma.EquipmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EquipmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
        }
        delete: {
          args: Prisma.EquipmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>
        }
        update: {
          args: Prisma.EquipmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>
        }
        deleteMany: {
          args: Prisma.EquipmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EquipmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EquipmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>[]
        }
        upsert: {
          args: Prisma.EquipmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentPayload>
        }
        aggregate: {
          args: Prisma.EquipmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEquipment>
        }
        groupBy: {
          args: Prisma.EquipmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.EquipmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipmentCountAggregateOutputType> | number
        }
      }
    }
    EquipmentVehicleInfo: {
      payload: Prisma.$EquipmentVehicleInfoPayload<ExtArgs>
      fields: Prisma.EquipmentVehicleInfoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EquipmentVehicleInfoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EquipmentVehicleInfoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>
        }
        findFirst: {
          args: Prisma.EquipmentVehicleInfoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EquipmentVehicleInfoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>
        }
        findMany: {
          args: Prisma.EquipmentVehicleInfoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>[]
        }
        create: {
          args: Prisma.EquipmentVehicleInfoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>
        }
        createMany: {
          args: Prisma.EquipmentVehicleInfoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EquipmentVehicleInfoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>[]
        }
        delete: {
          args: Prisma.EquipmentVehicleInfoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>
        }
        update: {
          args: Prisma.EquipmentVehicleInfoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>
        }
        deleteMany: {
          args: Prisma.EquipmentVehicleInfoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EquipmentVehicleInfoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EquipmentVehicleInfoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>[]
        }
        upsert: {
          args: Prisma.EquipmentVehicleInfoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentVehicleInfoPayload>
        }
        aggregate: {
          args: Prisma.EquipmentVehicleInfoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEquipmentVehicleInfo>
        }
        groupBy: {
          args: Prisma.EquipmentVehicleInfoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipmentVehicleInfoGroupByOutputType>[]
        }
        count: {
          args: Prisma.EquipmentVehicleInfoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipmentVehicleInfoCountAggregateOutputType> | number
        }
      }
    }
    EmployeeEquipmentLog: {
      payload: Prisma.$EmployeeEquipmentLogPayload<ExtArgs>
      fields: Prisma.EmployeeEquipmentLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EmployeeEquipmentLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EmployeeEquipmentLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>
        }
        findFirst: {
          args: Prisma.EmployeeEquipmentLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EmployeeEquipmentLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>
        }
        findMany: {
          args: Prisma.EmployeeEquipmentLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>[]
        }
        create: {
          args: Prisma.EmployeeEquipmentLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>
        }
        createMany: {
          args: Prisma.EmployeeEquipmentLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EmployeeEquipmentLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>[]
        }
        delete: {
          args: Prisma.EmployeeEquipmentLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>
        }
        update: {
          args: Prisma.EmployeeEquipmentLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>
        }
        deleteMany: {
          args: Prisma.EmployeeEquipmentLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EmployeeEquipmentLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EmployeeEquipmentLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>[]
        }
        upsert: {
          args: Prisma.EmployeeEquipmentLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmployeeEquipmentLogPayload>
        }
        aggregate: {
          args: Prisma.EmployeeEquipmentLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmployeeEquipmentLog>
        }
        groupBy: {
          args: Prisma.EmployeeEquipmentLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmployeeEquipmentLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.EmployeeEquipmentLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmployeeEquipmentLogCountAggregateOutputType> | number
        }
      }
    }
    Error: {
      payload: Prisma.$ErrorPayload<ExtArgs>
      fields: Prisma.ErrorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ErrorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ErrorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        findFirst: {
          args: Prisma.ErrorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ErrorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        findMany: {
          args: Prisma.ErrorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>[]
        }
        create: {
          args: Prisma.ErrorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        createMany: {
          args: Prisma.ErrorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ErrorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>[]
        }
        delete: {
          args: Prisma.ErrorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        update: {
          args: Prisma.ErrorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        deleteMany: {
          args: Prisma.ErrorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ErrorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ErrorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>[]
        }
        upsert: {
          args: Prisma.ErrorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        aggregate: {
          args: Prisma.ErrorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateError>
        }
        groupBy: {
          args: Prisma.ErrorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ErrorGroupByOutputType>[]
        }
        count: {
          args: Prisma.ErrorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ErrorCountAggregateOutputType> | number
        }
      }
    }
    FormTemplate: {
      payload: Prisma.$FormTemplatePayload<ExtArgs>
      fields: Prisma.FormTemplateFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormTemplateFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormTemplateFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>
        }
        findFirst: {
          args: Prisma.FormTemplateFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormTemplateFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>
        }
        findMany: {
          args: Prisma.FormTemplateFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>[]
        }
        create: {
          args: Prisma.FormTemplateCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>
        }
        createMany: {
          args: Prisma.FormTemplateCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormTemplateCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>[]
        }
        delete: {
          args: Prisma.FormTemplateDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>
        }
        update: {
          args: Prisma.FormTemplateUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>
        }
        deleteMany: {
          args: Prisma.FormTemplateDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormTemplateUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormTemplateUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>[]
        }
        upsert: {
          args: Prisma.FormTemplateUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormTemplatePayload>
        }
        aggregate: {
          args: Prisma.FormTemplateAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormTemplate>
        }
        groupBy: {
          args: Prisma.FormTemplateGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormTemplateGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormTemplateCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormTemplateCountAggregateOutputType> | number
        }
      }
    }
    FormGrouping: {
      payload: Prisma.$FormGroupingPayload<ExtArgs>
      fields: Prisma.FormGroupingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormGroupingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormGroupingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>
        }
        findFirst: {
          args: Prisma.FormGroupingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormGroupingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>
        }
        findMany: {
          args: Prisma.FormGroupingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>[]
        }
        create: {
          args: Prisma.FormGroupingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>
        }
        createMany: {
          args: Prisma.FormGroupingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormGroupingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>[]
        }
        delete: {
          args: Prisma.FormGroupingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>
        }
        update: {
          args: Prisma.FormGroupingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>
        }
        deleteMany: {
          args: Prisma.FormGroupingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormGroupingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormGroupingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>[]
        }
        upsert: {
          args: Prisma.FormGroupingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormGroupingPayload>
        }
        aggregate: {
          args: Prisma.FormGroupingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormGrouping>
        }
        groupBy: {
          args: Prisma.FormGroupingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormGroupingGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormGroupingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormGroupingCountAggregateOutputType> | number
        }
      }
    }
    FormField: {
      payload: Prisma.$FormFieldPayload<ExtArgs>
      fields: Prisma.FormFieldFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormFieldFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormFieldFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>
        }
        findFirst: {
          args: Prisma.FormFieldFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormFieldFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>
        }
        findMany: {
          args: Prisma.FormFieldFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>[]
        }
        create: {
          args: Prisma.FormFieldCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>
        }
        createMany: {
          args: Prisma.FormFieldCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormFieldCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>[]
        }
        delete: {
          args: Prisma.FormFieldDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>
        }
        update: {
          args: Prisma.FormFieldUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>
        }
        deleteMany: {
          args: Prisma.FormFieldDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormFieldUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormFieldUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>[]
        }
        upsert: {
          args: Prisma.FormFieldUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldPayload>
        }
        aggregate: {
          args: Prisma.FormFieldAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormField>
        }
        groupBy: {
          args: Prisma.FormFieldGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormFieldGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormFieldCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormFieldCountAggregateOutputType> | number
        }
      }
    }
    FormFieldOption: {
      payload: Prisma.$FormFieldOptionPayload<ExtArgs>
      fields: Prisma.FormFieldOptionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormFieldOptionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormFieldOptionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>
        }
        findFirst: {
          args: Prisma.FormFieldOptionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormFieldOptionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>
        }
        findMany: {
          args: Prisma.FormFieldOptionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>[]
        }
        create: {
          args: Prisma.FormFieldOptionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>
        }
        createMany: {
          args: Prisma.FormFieldOptionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormFieldOptionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>[]
        }
        delete: {
          args: Prisma.FormFieldOptionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>
        }
        update: {
          args: Prisma.FormFieldOptionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>
        }
        deleteMany: {
          args: Prisma.FormFieldOptionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormFieldOptionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormFieldOptionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>[]
        }
        upsert: {
          args: Prisma.FormFieldOptionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormFieldOptionPayload>
        }
        aggregate: {
          args: Prisma.FormFieldOptionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormFieldOption>
        }
        groupBy: {
          args: Prisma.FormFieldOptionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormFieldOptionGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormFieldOptionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormFieldOptionCountAggregateOutputType> | number
        }
      }
    }
    FormSubmission: {
      payload: Prisma.$FormSubmissionPayload<ExtArgs>
      fields: Prisma.FormSubmissionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormSubmissionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormSubmissionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
        }
        findFirst: {
          args: Prisma.FormSubmissionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormSubmissionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
        }
        findMany: {
          args: Prisma.FormSubmissionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>[]
        }
        create: {
          args: Prisma.FormSubmissionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
        }
        createMany: {
          args: Prisma.FormSubmissionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormSubmissionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>[]
        }
        delete: {
          args: Prisma.FormSubmissionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
        }
        update: {
          args: Prisma.FormSubmissionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
        }
        deleteMany: {
          args: Prisma.FormSubmissionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormSubmissionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormSubmissionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>[]
        }
        upsert: {
          args: Prisma.FormSubmissionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormSubmissionPayload>
        }
        aggregate: {
          args: Prisma.FormSubmissionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormSubmission>
        }
        groupBy: {
          args: Prisma.FormSubmissionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormSubmissionGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormSubmissionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormSubmissionCountAggregateOutputType> | number
        }
      }
    }
    FormApproval: {
      payload: Prisma.$FormApprovalPayload<ExtArgs>
      fields: Prisma.FormApprovalFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FormApprovalFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FormApprovalFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>
        }
        findFirst: {
          args: Prisma.FormApprovalFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FormApprovalFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>
        }
        findMany: {
          args: Prisma.FormApprovalFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>[]
        }
        create: {
          args: Prisma.FormApprovalCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>
        }
        createMany: {
          args: Prisma.FormApprovalCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FormApprovalCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>[]
        }
        delete: {
          args: Prisma.FormApprovalDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>
        }
        update: {
          args: Prisma.FormApprovalUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>
        }
        deleteMany: {
          args: Prisma.FormApprovalDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FormApprovalUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FormApprovalUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>[]
        }
        upsert: {
          args: Prisma.FormApprovalUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FormApprovalPayload>
        }
        aggregate: {
          args: Prisma.FormApprovalAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFormApproval>
        }
        groupBy: {
          args: Prisma.FormApprovalGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormApprovalGroupByOutputType>[]
        }
        count: {
          args: Prisma.FormApprovalCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FormApprovalCountAggregateOutputType> | number
        }
      }
    }
    Jobsite: {
      payload: Prisma.$JobsitePayload<ExtArgs>
      fields: Prisma.JobsiteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.JobsiteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.JobsiteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>
        }
        findFirst: {
          args: Prisma.JobsiteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.JobsiteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>
        }
        findMany: {
          args: Prisma.JobsiteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>[]
        }
        create: {
          args: Prisma.JobsiteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>
        }
        createMany: {
          args: Prisma.JobsiteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.JobsiteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>[]
        }
        delete: {
          args: Prisma.JobsiteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>
        }
        update: {
          args: Prisma.JobsiteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>
        }
        deleteMany: {
          args: Prisma.JobsiteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.JobsiteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.JobsiteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>[]
        }
        upsert: {
          args: Prisma.JobsiteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobsitePayload>
        }
        aggregate: {
          args: Prisma.JobsiteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateJobsite>
        }
        groupBy: {
          args: Prisma.JobsiteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.JobsiteGroupByOutputType>[]
        }
        count: {
          args: Prisma.JobsiteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.JobsiteCountAggregateOutputType> | number
        }
      }
    }
    Report: {
      payload: Prisma.$ReportPayload<ExtArgs>
      fields: Prisma.ReportFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReportFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findFirst: {
          args: Prisma.ReportFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findMany: {
          args: Prisma.ReportFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        create: {
          args: Prisma.ReportCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        createMany: {
          args: Prisma.ReportCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        delete: {
          args: Prisma.ReportDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        update: {
          args: Prisma.ReportUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        deleteMany: {
          args: Prisma.ReportDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReportUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        upsert: {
          args: Prisma.ReportUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        aggregate: {
          args: Prisma.ReportAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReport>
        }
        groupBy: {
          args: Prisma.ReportGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReportCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportCountAggregateOutputType> | number
        }
      }
    }
    ReportRun: {
      payload: Prisma.$ReportRunPayload<ExtArgs>
      fields: Prisma.ReportRunFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReportRunFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReportRunFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>
        }
        findFirst: {
          args: Prisma.ReportRunFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReportRunFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>
        }
        findMany: {
          args: Prisma.ReportRunFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>[]
        }
        create: {
          args: Prisma.ReportRunCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>
        }
        createMany: {
          args: Prisma.ReportRunCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReportRunCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>[]
        }
        delete: {
          args: Prisma.ReportRunDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>
        }
        update: {
          args: Prisma.ReportRunUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>
        }
        deleteMany: {
          args: Prisma.ReportRunDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReportRunUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReportRunUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>[]
        }
        upsert: {
          args: Prisma.ReportRunUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportRunPayload>
        }
        aggregate: {
          args: Prisma.ReportRunAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReportRun>
        }
        groupBy: {
          args: Prisma.ReportRunGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportRunGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReportRunCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportRunCountAggregateOutputType> | number
        }
      }
    }
    TimeSheet: {
      payload: Prisma.$TimeSheetPayload<ExtArgs>
      fields: Prisma.TimeSheetFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TimeSheetFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TimeSheetFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>
        }
        findFirst: {
          args: Prisma.TimeSheetFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TimeSheetFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>
        }
        findMany: {
          args: Prisma.TimeSheetFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>[]
        }
        create: {
          args: Prisma.TimeSheetCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>
        }
        createMany: {
          args: Prisma.TimeSheetCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TimeSheetCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>[]
        }
        delete: {
          args: Prisma.TimeSheetDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>
        }
        update: {
          args: Prisma.TimeSheetUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>
        }
        deleteMany: {
          args: Prisma.TimeSheetDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TimeSheetUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TimeSheetUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>[]
        }
        upsert: {
          args: Prisma.TimeSheetUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TimeSheetPayload>
        }
        aggregate: {
          args: Prisma.TimeSheetAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTimeSheet>
        }
        groupBy: {
          args: Prisma.TimeSheetGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TimeSheetGroupByOutputType>[]
        }
        count: {
          args: Prisma.TimeSheetCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TimeSheetCountAggregateOutputType> | number
        }
      }
    }
    MaintenanceLog: {
      payload: Prisma.$MaintenanceLogPayload<ExtArgs>
      fields: Prisma.MaintenanceLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MaintenanceLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MaintenanceLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
        }
        findFirst: {
          args: Prisma.MaintenanceLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MaintenanceLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
        }
        findMany: {
          args: Prisma.MaintenanceLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>[]
        }
        create: {
          args: Prisma.MaintenanceLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
        }
        createMany: {
          args: Prisma.MaintenanceLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MaintenanceLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>[]
        }
        delete: {
          args: Prisma.MaintenanceLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
        }
        update: {
          args: Prisma.MaintenanceLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
        }
        deleteMany: {
          args: Prisma.MaintenanceLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MaintenanceLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MaintenanceLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>[]
        }
        upsert: {
          args: Prisma.MaintenanceLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
        }
        aggregate: {
          args: Prisma.MaintenanceLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMaintenanceLog>
        }
        groupBy: {
          args: Prisma.MaintenanceLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MaintenanceLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.MaintenanceLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MaintenanceLogCountAggregateOutputType> | number
        }
      }
    }
    Maintenance: {
      payload: Prisma.$MaintenancePayload<ExtArgs>
      fields: Prisma.MaintenanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MaintenanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MaintenanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>
        }
        findFirst: {
          args: Prisma.MaintenanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MaintenanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>
        }
        findMany: {
          args: Prisma.MaintenanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>[]
        }
        create: {
          args: Prisma.MaintenanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>
        }
        createMany: {
          args: Prisma.MaintenanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MaintenanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>[]
        }
        delete: {
          args: Prisma.MaintenanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>
        }
        update: {
          args: Prisma.MaintenanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>
        }
        deleteMany: {
          args: Prisma.MaintenanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MaintenanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MaintenanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>[]
        }
        upsert: {
          args: Prisma.MaintenanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaintenancePayload>
        }
        aggregate: {
          args: Prisma.MaintenanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMaintenance>
        }
        groupBy: {
          args: Prisma.MaintenanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MaintenanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.MaintenanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MaintenanceCountAggregateOutputType> | number
        }
      }
    }
    TascoLog: {
      payload: Prisma.$TascoLogPayload<ExtArgs>
      fields: Prisma.TascoLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TascoLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TascoLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>
        }
        findFirst: {
          args: Prisma.TascoLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TascoLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>
        }
        findMany: {
          args: Prisma.TascoLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>[]
        }
        create: {
          args: Prisma.TascoLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>
        }
        createMany: {
          args: Prisma.TascoLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TascoLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>[]
        }
        delete: {
          args: Prisma.TascoLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>
        }
        update: {
          args: Prisma.TascoLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>
        }
        deleteMany: {
          args: Prisma.TascoLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TascoLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TascoLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>[]
        }
        upsert: {
          args: Prisma.TascoLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoLogPayload>
        }
        aggregate: {
          args: Prisma.TascoLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTascoLog>
        }
        groupBy: {
          args: Prisma.TascoLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TascoLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.TascoLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TascoLogCountAggregateOutputType> | number
        }
      }
    }
    TascoMaterialTypes: {
      payload: Prisma.$TascoMaterialTypesPayload<ExtArgs>
      fields: Prisma.TascoMaterialTypesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TascoMaterialTypesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TascoMaterialTypesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>
        }
        findFirst: {
          args: Prisma.TascoMaterialTypesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TascoMaterialTypesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>
        }
        findMany: {
          args: Prisma.TascoMaterialTypesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>[]
        }
        create: {
          args: Prisma.TascoMaterialTypesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>
        }
        createMany: {
          args: Prisma.TascoMaterialTypesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TascoMaterialTypesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>[]
        }
        delete: {
          args: Prisma.TascoMaterialTypesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>
        }
        update: {
          args: Prisma.TascoMaterialTypesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>
        }
        deleteMany: {
          args: Prisma.TascoMaterialTypesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TascoMaterialTypesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TascoMaterialTypesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>[]
        }
        upsert: {
          args: Prisma.TascoMaterialTypesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TascoMaterialTypesPayload>
        }
        aggregate: {
          args: Prisma.TascoMaterialTypesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTascoMaterialTypes>
        }
        groupBy: {
          args: Prisma.TascoMaterialTypesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TascoMaterialTypesGroupByOutputType>[]
        }
        count: {
          args: Prisma.TascoMaterialTypesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TascoMaterialTypesCountAggregateOutputType> | number
        }
      }
    }
    TruckingLog: {
      payload: Prisma.$TruckingLogPayload<ExtArgs>
      fields: Prisma.TruckingLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TruckingLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TruckingLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>
        }
        findFirst: {
          args: Prisma.TruckingLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TruckingLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>
        }
        findMany: {
          args: Prisma.TruckingLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>[]
        }
        create: {
          args: Prisma.TruckingLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>
        }
        createMany: {
          args: Prisma.TruckingLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TruckingLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>[]
        }
        delete: {
          args: Prisma.TruckingLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>
        }
        update: {
          args: Prisma.TruckingLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>
        }
        deleteMany: {
          args: Prisma.TruckingLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TruckingLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TruckingLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>[]
        }
        upsert: {
          args: Prisma.TruckingLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckingLogPayload>
        }
        aggregate: {
          args: Prisma.TruckingLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTruckingLog>
        }
        groupBy: {
          args: Prisma.TruckingLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TruckingLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.TruckingLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TruckingLogCountAggregateOutputType> | number
        }
      }
    }
    TruckLaborLogs: {
      payload: Prisma.$TruckLaborLogsPayload<ExtArgs>
      fields: Prisma.TruckLaborLogsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TruckLaborLogsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TruckLaborLogsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>
        }
        findFirst: {
          args: Prisma.TruckLaborLogsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TruckLaborLogsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>
        }
        findMany: {
          args: Prisma.TruckLaborLogsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>[]
        }
        create: {
          args: Prisma.TruckLaborLogsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>
        }
        createMany: {
          args: Prisma.TruckLaborLogsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TruckLaborLogsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>[]
        }
        delete: {
          args: Prisma.TruckLaborLogsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>
        }
        update: {
          args: Prisma.TruckLaborLogsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>
        }
        deleteMany: {
          args: Prisma.TruckLaborLogsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TruckLaborLogsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TruckLaborLogsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>[]
        }
        upsert: {
          args: Prisma.TruckLaborLogsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TruckLaborLogsPayload>
        }
        aggregate: {
          args: Prisma.TruckLaborLogsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTruckLaborLogs>
        }
        groupBy: {
          args: Prisma.TruckLaborLogsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TruckLaborLogsGroupByOutputType>[]
        }
        count: {
          args: Prisma.TruckLaborLogsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TruckLaborLogsCountAggregateOutputType> | number
        }
      }
    }
    StateMileage: {
      payload: Prisma.$StateMileagePayload<ExtArgs>
      fields: Prisma.StateMileageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StateMileageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StateMileageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>
        }
        findFirst: {
          args: Prisma.StateMileageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StateMileageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>
        }
        findMany: {
          args: Prisma.StateMileageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>[]
        }
        create: {
          args: Prisma.StateMileageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>
        }
        createMany: {
          args: Prisma.StateMileageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StateMileageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>[]
        }
        delete: {
          args: Prisma.StateMileageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>
        }
        update: {
          args: Prisma.StateMileageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>
        }
        deleteMany: {
          args: Prisma.StateMileageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StateMileageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StateMileageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>[]
        }
        upsert: {
          args: Prisma.StateMileageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StateMileagePayload>
        }
        aggregate: {
          args: Prisma.StateMileageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStateMileage>
        }
        groupBy: {
          args: Prisma.StateMileageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StateMileageGroupByOutputType>[]
        }
        count: {
          args: Prisma.StateMileageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StateMileageCountAggregateOutputType> | number
        }
      }
    }
    Material: {
      payload: Prisma.$MaterialPayload<ExtArgs>
      fields: Prisma.MaterialFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MaterialFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MaterialFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>
        }
        findFirst: {
          args: Prisma.MaterialFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MaterialFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>
        }
        findMany: {
          args: Prisma.MaterialFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>[]
        }
        create: {
          args: Prisma.MaterialCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>
        }
        createMany: {
          args: Prisma.MaterialCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MaterialCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>[]
        }
        delete: {
          args: Prisma.MaterialDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>
        }
        update: {
          args: Prisma.MaterialUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>
        }
        deleteMany: {
          args: Prisma.MaterialDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MaterialUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MaterialUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>[]
        }
        upsert: {
          args: Prisma.MaterialUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MaterialPayload>
        }
        aggregate: {
          args: Prisma.MaterialAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMaterial>
        }
        groupBy: {
          args: Prisma.MaterialGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MaterialGroupByOutputType>[]
        }
        count: {
          args: Prisma.MaterialCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MaterialCountAggregateOutputType> | number
        }
      }
    }
    RefuelLog: {
      payload: Prisma.$RefuelLogPayload<ExtArgs>
      fields: Prisma.RefuelLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RefuelLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RefuelLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>
        }
        findFirst: {
          args: Prisma.RefuelLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RefuelLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>
        }
        findMany: {
          args: Prisma.RefuelLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>[]
        }
        create: {
          args: Prisma.RefuelLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>
        }
        createMany: {
          args: Prisma.RefuelLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RefuelLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>[]
        }
        delete: {
          args: Prisma.RefuelLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>
        }
        update: {
          args: Prisma.RefuelLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>
        }
        deleteMany: {
          args: Prisma.RefuelLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RefuelLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RefuelLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>[]
        }
        upsert: {
          args: Prisma.RefuelLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefuelLogPayload>
        }
        aggregate: {
          args: Prisma.RefuelLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRefuelLog>
        }
        groupBy: {
          args: Prisma.RefuelLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RefuelLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.RefuelLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RefuelLogCountAggregateOutputType> | number
        }
      }
    }
    EquipmentHauled: {
      payload: Prisma.$EquipmentHauledPayload<ExtArgs>
      fields: Prisma.EquipmentHauledFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EquipmentHauledFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EquipmentHauledFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>
        }
        findFirst: {
          args: Prisma.EquipmentHauledFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EquipmentHauledFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>
        }
        findMany: {
          args: Prisma.EquipmentHauledFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>[]
        }
        create: {
          args: Prisma.EquipmentHauledCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>
        }
        createMany: {
          args: Prisma.EquipmentHauledCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EquipmentHauledCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>[]
        }
        delete: {
          args: Prisma.EquipmentHauledDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>
        }
        update: {
          args: Prisma.EquipmentHauledUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>
        }
        deleteMany: {
          args: Prisma.EquipmentHauledDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EquipmentHauledUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EquipmentHauledUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>[]
        }
        upsert: {
          args: Prisma.EquipmentHauledUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipmentHauledPayload>
        }
        aggregate: {
          args: Prisma.EquipmentHauledAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEquipmentHauled>
        }
        groupBy: {
          args: Prisma.EquipmentHauledGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipmentHauledGroupByOutputType>[]
        }
        count: {
          args: Prisma.EquipmentHauledCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipmentHauledCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    UserSettings: {
      payload: Prisma.$UserSettingsPayload<ExtArgs>
      fields: Prisma.UserSettingsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>
        }
        findFirst: {
          args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>
        }
        findMany: {
          args: Prisma.UserSettingsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
        }
        create: {
          args: Prisma.UserSettingsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>
        }
        createMany: {
          args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
        }
        delete: {
          args: Prisma.UserSettingsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>
        }
        update: {
          args: Prisma.UserSettingsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>
        }
        deleteMany: {
          args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserSettingsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
        }
        upsert: {
          args: Prisma.UserSettingsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSettingsPayload>
        }
        aggregate: {
          args: Prisma.UserSettingsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserSettings>
        }
        groupBy: {
          args: Prisma.UserSettingsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserSettingsGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserSettingsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserSettingsCountAggregateOutputType> | number
        }
      }
    }
    Contacts: {
      payload: Prisma.$ContactsPayload<ExtArgs>
      fields: Prisma.ContactsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ContactsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ContactsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>
        }
        findFirst: {
          args: Prisma.ContactsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ContactsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>
        }
        findMany: {
          args: Prisma.ContactsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>[]
        }
        create: {
          args: Prisma.ContactsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>
        }
        createMany: {
          args: Prisma.ContactsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ContactsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>[]
        }
        delete: {
          args: Prisma.ContactsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>
        }
        update: {
          args: Prisma.ContactsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>
        }
        deleteMany: {
          args: Prisma.ContactsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ContactsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ContactsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>[]
        }
        upsert: {
          args: Prisma.ContactsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactsPayload>
        }
        aggregate: {
          args: Prisma.ContactsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateContacts>
        }
        groupBy: {
          args: Prisma.ContactsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContactsGroupByOutputType>[]
        }
        count: {
          args: Prisma.ContactsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContactsCountAggregateOutputType> | number
        }
      }
    }
    PasswordResetToken: {
      payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
      fields: Prisma.PasswordResetTokenFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        findFirst: {
          args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        findMany: {
          args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
        }
        create: {
          args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        createMany: {
          args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
        }
        delete: {
          args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        update: {
          args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        deleteMany: {
          args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
        }
        upsert: {
          args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        aggregate: {
          args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePasswordResetToken>
        }
        groupBy: {
          args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PasswordResetTokenGroupByOutputType>[]
        }
        count: {
          args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PasswordResetTokenCountAggregateOutputType> | number
        }
      }
    }
    AccountSetupToken: {
      payload: Prisma.$AccountSetupTokenPayload<ExtArgs>
      fields: Prisma.AccountSetupTokenFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountSetupTokenFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountSetupTokenFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>
        }
        findFirst: {
          args: Prisma.AccountSetupTokenFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountSetupTokenFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>
        }
        findMany: {
          args: Prisma.AccountSetupTokenFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>[]
        }
        create: {
          args: Prisma.AccountSetupTokenCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>
        }
        createMany: {
          args: Prisma.AccountSetupTokenCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountSetupTokenCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>[]
        }
        delete: {
          args: Prisma.AccountSetupTokenDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>
        }
        update: {
          args: Prisma.AccountSetupTokenUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>
        }
        deleteMany: {
          args: Prisma.AccountSetupTokenDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountSetupTokenUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountSetupTokenUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>[]
        }
        upsert: {
          args: Prisma.AccountSetupTokenUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountSetupTokenPayload>
        }
        aggregate: {
          args: Prisma.AccountSetupTokenAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccountSetupToken>
        }
        groupBy: {
          args: Prisma.AccountSetupTokenGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountSetupTokenGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountSetupTokenCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountSetupTokenCountAggregateOutputType> | number
        }
      }
    }
    Address: {
      payload: Prisma.$AddressPayload<ExtArgs>
      fields: Prisma.AddressFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AddressFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findFirst: {
          args: Prisma.AddressFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findMany: {
          args: Prisma.AddressFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        create: {
          args: Prisma.AddressCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        createMany: {
          args: Prisma.AddressCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        delete: {
          args: Prisma.AddressDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        update: {
          args: Prisma.AddressUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        deleteMany: {
          args: Prisma.AddressDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AddressUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        upsert: {
          args: Prisma.AddressUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        aggregate: {
          args: Prisma.AddressAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAddress>
        }
        groupBy: {
          args: Prisma.AddressGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressGroupByOutputType>[]
        }
        count: {
          args: Prisma.AddressCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creationReason: 'creationReason',
  approvalStatus: 'approvalStatus',
  contactPerson: 'contactPerson',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  hasProject: 'hasProject',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId',
  createdById: 'createdById',
  createdVia: 'createdVia',
  jobsiteId: 'jobsiteId',
  addressId: 'addressId'
} as const

export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


export const CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  addressId: 'addressId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  SubscriptionDate: 'SubscriptionDate'
} as const

export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


export const CostCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type CostCodeScalarFieldEnum = (typeof CostCodeScalarFieldEnum)[keyof typeof CostCodeScalarFieldEnum]


export const CCTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
} as const

export type CCTagScalarFieldEnum = (typeof CCTagScalarFieldEnum)[keyof typeof CCTagScalarFieldEnum]


export const CrewScalarFieldEnum = {
  id: 'id',
  name: 'name',
  leadId: 'leadId',
  crewType: 'crewType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type CrewScalarFieldEnum = (typeof CrewScalarFieldEnum)[keyof typeof CrewScalarFieldEnum]


export const PdfDocumentScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  fileName: 'fileName',
  description: 'description',
  fileData: 'fileData',
  contentType: 'contentType',
  size: 'size',
  isActive: 'isActive',
  createdAt: 'createdAt',
  uploadDate: 'uploadDate'
} as const

export type PdfDocumentScalarFieldEnum = (typeof PdfDocumentScalarFieldEnum)[keyof typeof PdfDocumentScalarFieldEnum]


export const DocumentTagScalarFieldEnum = {
  id: 'id',
  tagName: 'tagName'
} as const

export type DocumentTagScalarFieldEnum = (typeof DocumentTagScalarFieldEnum)[keyof typeof DocumentTagScalarFieldEnum]


export const EquipmentScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  name: 'name',
  description: 'description',
  creationReason: 'creationReason',
  equipmentTag: 'equipmentTag',
  state: 'state',
  isDisabledByAdmin: 'isDisabledByAdmin',
  approvalStatus: 'approvalStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  overWeight: 'overWeight',
  currentWeight: 'currentWeight',
  createdById: 'createdById',
  createdVia: 'createdVia'
} as const

export type EquipmentScalarFieldEnum = (typeof EquipmentScalarFieldEnum)[keyof typeof EquipmentScalarFieldEnum]


export const EquipmentVehicleInfoScalarFieldEnum = {
  id: 'id',
  make: 'make',
  model: 'model',
  year: 'year',
  licensePlate: 'licensePlate',
  registrationExpiration: 'registrationExpiration',
  mileage: 'mileage'
} as const

export type EquipmentVehicleInfoScalarFieldEnum = (typeof EquipmentVehicleInfoScalarFieldEnum)[keyof typeof EquipmentVehicleInfoScalarFieldEnum]


export const EmployeeEquipmentLogScalarFieldEnum = {
  id: 'id',
  timeSheetId: 'timeSheetId',
  equipmentId: 'equipmentId',
  maintenanceId: 'maintenanceId',
  startTime: 'startTime',
  endTime: 'endTime',
  comment: 'comment'
} as const

export type EmployeeEquipmentLogScalarFieldEnum = (typeof EmployeeEquipmentLogScalarFieldEnum)[keyof typeof EmployeeEquipmentLogScalarFieldEnum]


export const ErrorScalarFieldEnum = {
  id: 'id',
  errorMessage: 'errorMessage',
  userId: 'userId',
  fileLocation: 'fileLocation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ErrorScalarFieldEnum = (typeof ErrorScalarFieldEnum)[keyof typeof ErrorScalarFieldEnum]


export const FormTemplateScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isSignatureRequired: 'isSignatureRequired',
  description: 'description',
  isActive: 'isActive',
  formType: 'formType'
} as const

export type FormTemplateScalarFieldEnum = (typeof FormTemplateScalarFieldEnum)[keyof typeof FormTemplateScalarFieldEnum]


export const FormGroupingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  order: 'order'
} as const

export type FormGroupingScalarFieldEnum = (typeof FormGroupingScalarFieldEnum)[keyof typeof FormGroupingScalarFieldEnum]


export const FormFieldScalarFieldEnum = {
  id: 'id',
  formGroupingId: 'formGroupingId',
  label: 'label',
  type: 'type',
  required: 'required',
  order: 'order',
  placeholder: 'placeholder',
  maxLength: 'maxLength',
  minLength: 'minLength',
  content: 'content',
  filter: 'filter',
  multiple: 'multiple'
} as const

export type FormFieldScalarFieldEnum = (typeof FormFieldScalarFieldEnum)[keyof typeof FormFieldScalarFieldEnum]


export const FormFieldOptionScalarFieldEnum = {
  id: 'id',
  fieldId: 'fieldId',
  value: 'value'
} as const

export type FormFieldOptionScalarFieldEnum = (typeof FormFieldOptionScalarFieldEnum)[keyof typeof FormFieldOptionScalarFieldEnum]


export const FormSubmissionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  formTemplateId: 'formTemplateId',
  userId: 'userId',
  formType: 'formType',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  submittedAt: 'submittedAt',
  status: 'status'
} as const

export type FormSubmissionScalarFieldEnum = (typeof FormSubmissionScalarFieldEnum)[keyof typeof FormSubmissionScalarFieldEnum]


export const FormApprovalScalarFieldEnum = {
  id: 'id',
  formSubmissionId: 'formSubmissionId',
  signedBy: 'signedBy',
  submittedAt: 'submittedAt',
  updatedAt: 'updatedAt',
  signature: 'signature',
  comment: 'comment'
} as const

export type FormApprovalScalarFieldEnum = (typeof FormApprovalScalarFieldEnum)[keyof typeof FormApprovalScalarFieldEnum]


export const JobsiteScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  code: 'code',
  name: 'name',
  description: 'description',
  creationReason: 'creationReason',
  approvalStatus: 'approvalStatus',
  isActive: 'isActive',
  addressId: 'addressId',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archiveDate: 'archiveDate',
  clientId: 'clientId',
  createdById: 'createdById',
  latitude: 'latitude',
  longitude: 'longitude',
  radiusMeters: 'radiusMeters',
  createdVia: 'createdVia'
} as const

export type JobsiteScalarFieldEnum = (typeof JobsiteScalarFieldEnum)[keyof typeof JobsiteScalarFieldEnum]


export const ReportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  companyId: 'companyId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  parameters: 'parameters',
  visibility: 'visibility',
  tags: 'tags'
} as const

export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


export const ReportRunScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  runAt: 'runAt',
  status: 'status',
  results: 'results',
  duration: 'duration',
  startDate: 'startDate',
  endDate: 'endDate',
  customParams: 'customParams',
  exportFormats: 'exportFormats',
  lastExportedAt: 'lastExportedAt'
} as const

export type ReportRunScalarFieldEnum = (typeof ReportRunScalarFieldEnum)[keyof typeof ReportRunScalarFieldEnum]


export const TimeSheetScalarFieldEnum = {
  id: 'id',
  date: 'date',
  userId: 'userId',
  jobsiteId: 'jobsiteId',
  costcode: 'costcode',
  nu: 'nu',
  Fp: 'Fp',
  startTime: 'startTime',
  endTime: 'endTime',
  comment: 'comment',
  statusComment: 'statusComment',
  location: 'location',
  status: 'status',
  workType: 'workType',
  editedByUserId: 'editedByUserId',
  newTimeSheetId: 'newTimeSheetId',
  createdByAdmin: 'createdByAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clockInLat: 'clockInLat',
  clockInLng: 'clockInLng',
  clockOutLat: 'clockOutLat',
  clockOutLng: 'clockOutLng',
  withinFenceIn: 'withinFenceIn',
  withinFenceOut: 'withinFenceOut'
} as const

export type TimeSheetScalarFieldEnum = (typeof TimeSheetScalarFieldEnum)[keyof typeof TimeSheetScalarFieldEnum]


export const MaintenanceLogScalarFieldEnum = {
  id: 'id',
  timeSheetId: 'timeSheetId',
  userId: 'userId',
  maintenanceId: 'maintenanceId',
  startTime: 'startTime',
  endTime: 'endTime',
  comment: 'comment'
} as const

export type MaintenanceLogScalarFieldEnum = (typeof MaintenanceLogScalarFieldEnum)[keyof typeof MaintenanceLogScalarFieldEnum]


export const MaintenanceScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  equipmentIssue: 'equipmentIssue',
  employeeEquipmentLogId: 'employeeEquipmentLogId',
  additionalInfo: 'additionalInfo',
  location: 'location',
  problemDiagnosis: 'problemDiagnosis',
  solution: 'solution',
  totalHoursLaboured: 'totalHoursLaboured',
  createdAt: 'createdAt',
  priority: 'priority',
  delay: 'delay',
  delayReasoning: 'delayReasoning',
  repaired: 'repaired',
  selected: 'selected',
  hasBeenDelayed: 'hasBeenDelayed',
  createdBy: 'createdBy'
} as const

export type MaintenanceScalarFieldEnum = (typeof MaintenanceScalarFieldEnum)[keyof typeof MaintenanceScalarFieldEnum]


export const TascoLogScalarFieldEnum = {
  id: 'id',
  timeSheetId: 'timeSheetId',
  shiftType: 'shiftType',
  equipmentId: 'equipmentId',
  laborType: 'laborType',
  materialType: 'materialType',
  screenType: 'screenType',
  LoadQuantity: 'LoadQuantity'
} as const

export type TascoLogScalarFieldEnum = (typeof TascoLogScalarFieldEnum)[keyof typeof TascoLogScalarFieldEnum]


export const TascoMaterialTypesScalarFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type TascoMaterialTypesScalarFieldEnum = (typeof TascoMaterialTypesScalarFieldEnum)[keyof typeof TascoMaterialTypesScalarFieldEnum]


export const TruckingLogScalarFieldEnum = {
  id: 'id',
  timeSheetId: 'timeSheetId',
  laborType: 'laborType',
  taskName: 'taskName',
  equipmentId: 'equipmentId',
  trailerNumber: 'trailerNumber',
  truckNumber: 'truckNumber',
  startingMileage: 'startingMileage',
  endingMileage: 'endingMileage',
  truckLaborLogId: 'truckLaborLogId'
} as const

export type TruckingLogScalarFieldEnum = (typeof TruckingLogScalarFieldEnum)[keyof typeof TruckingLogScalarFieldEnum]


export const TruckLaborLogsScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  type: 'type',
  startTime: 'startTime',
  endTime: 'endTime'
} as const

export type TruckLaborLogsScalarFieldEnum = (typeof TruckLaborLogsScalarFieldEnum)[keyof typeof TruckLaborLogsScalarFieldEnum]


export const StateMileageScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  state: 'state',
  stateLineMileage: 'stateLineMileage'
} as const

export type StateMileageScalarFieldEnum = (typeof StateMileageScalarFieldEnum)[keyof typeof StateMileageScalarFieldEnum]


export const MaterialScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  LocationOfMaterial: 'LocationOfMaterial',
  name: 'name',
  quantity: 'quantity',
  unit: 'unit',
  materialWeight: 'materialWeight',
  loadType: 'loadType',
  createdAt: 'createdAt'
} as const

export type MaterialScalarFieldEnum = (typeof MaterialScalarFieldEnum)[keyof typeof MaterialScalarFieldEnum]


export const RefuelLogScalarFieldEnum = {
  id: 'id',
  employeeEquipmentLogId: 'employeeEquipmentLogId',
  truckingLogId: 'truckingLogId',
  tascoLogId: 'tascoLogId',
  gallonsRefueled: 'gallonsRefueled',
  milesAtFueling: 'milesAtFueling'
} as const

export type RefuelLogScalarFieldEnum = (typeof RefuelLogScalarFieldEnum)[keyof typeof RefuelLogScalarFieldEnum]


export const EquipmentHauledScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  equipmentId: 'equipmentId',
  source: 'source',
  destination: 'destination',
  startMileage: 'startMileage',
  endMileage: 'endMileage',
  createdAt: 'createdAt'
} as const

export type EquipmentHauledScalarFieldEnum = (typeof EquipmentHauledScalarFieldEnum)[keyof typeof EquipmentHauledScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  email: 'email',
  password: 'password',
  signature: 'signature',
  DOB: 'DOB',
  truckView: 'truckView',
  tascoView: 'tascoView',
  laborView: 'laborView',
  mechanicView: 'mechanicView',
  permission: 'permission',
  image: 'image',
  startDate: 'startDate',
  terminationDate: 'terminationDate',
  accountSetup: 'accountSetup',
  clockedIn: 'clockedIn',
  companyId: 'companyId',
  passwordResetTokenId: 'passwordResetTokenId',
  workTypeId: 'workTypeId'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  generalReminders: 'generalReminders',
  personalReminders: 'personalReminders',
  cameraAccess: 'cameraAccess',
  locationAccess: 'locationAccess',
  cookiesAccess: 'cookiesAccess'
} as const

export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


export const ContactsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phoneNumber: 'phoneNumber',
  emergencyContact: 'emergencyContact',
  emergencyContactNumber: 'emergencyContactNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ContactsScalarFieldEnum = (typeof ContactsScalarFieldEnum)[keyof typeof ContactsScalarFieldEnum]


export const PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expiration: 'expiration'
} as const

export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


export const AccountSetupTokenScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  expiresAt: 'expiresAt',
  used: 'used'
} as const

export type AccountSetupTokenScalarFieldEnum = (typeof AccountSetupTokenScalarFieldEnum)[keyof typeof AccountSetupTokenScalarFieldEnum]


export const AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country'
} as const

export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'ApprovalStatus'
 */
export type EnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus'>
    


/**
 * Reference to a field of type 'ApprovalStatus[]'
 */
export type ListEnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'CreatedVia'
 */
export type EnumCreatedViaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CreatedVia'>
    


/**
 * Reference to a field of type 'CreatedVia[]'
 */
export type ListEnumCreatedViaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CreatedVia[]'>
    


/**
 * Reference to a field of type 'WorkType'
 */
export type EnumWorkTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkType'>
    


/**
 * Reference to a field of type 'WorkType[]'
 */
export type ListEnumWorkTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkType[]'>
    


/**
 * Reference to a field of type 'Bytes'
 */
export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


/**
 * Reference to a field of type 'Bytes[]'
 */
export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'EquipmentTags'
 */
export type EnumEquipmentTagsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EquipmentTags'>
    


/**
 * Reference to a field of type 'EquipmentTags[]'
 */
export type ListEnumEquipmentTagsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EquipmentTags[]'>
    


/**
 * Reference to a field of type 'EquipmentState'
 */
export type EnumEquipmentStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EquipmentState'>
    


/**
 * Reference to a field of type 'EquipmentState[]'
 */
export type ListEnumEquipmentStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EquipmentState[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'FormTemplateStatus'
 */
export type EnumFormTemplateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormTemplateStatus'>
    


/**
 * Reference to a field of type 'FormTemplateStatus[]'
 */
export type ListEnumFormTemplateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormTemplateStatus[]'>
    


/**
 * Reference to a field of type 'FormTemplateCategory'
 */
export type EnumFormTemplateCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormTemplateCategory'>
    


/**
 * Reference to a field of type 'FormTemplateCategory[]'
 */
export type ListEnumFormTemplateCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormTemplateCategory[]'>
    


/**
 * Reference to a field of type 'FieldType'
 */
export type EnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType'>
    


/**
 * Reference to a field of type 'FieldType[]'
 */
export type ListEnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'FormStatus'
 */
export type EnumFormStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormStatus'>
    


/**
 * Reference to a field of type 'FormStatus[]'
 */
export type ListEnumFormStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormStatus[]'>
    


/**
 * Reference to a field of type 'ReportVisibility'
 */
export type EnumReportVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportVisibility'>
    


/**
 * Reference to a field of type 'ReportVisibility[]'
 */
export type ListEnumReportVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportVisibility[]'>
    


/**
 * Reference to a field of type 'ReportStatus'
 */
export type EnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus'>
    


/**
 * Reference to a field of type 'ReportStatus[]'
 */
export type ListEnumReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportStatus[]'>
    


/**
 * Reference to a field of type 'Priority'
 */
export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


/**
 * Reference to a field of type 'Priority[]'
 */
export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


/**
 * Reference to a field of type 'LoadType'
 */
export type EnumLoadTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoadType'>
    


/**
 * Reference to a field of type 'LoadType[]'
 */
export type ListEnumLoadTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoadType[]'>
    


/**
 * Reference to a field of type 'materialUnit'
 */
export type EnummaterialUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'materialUnit'>
    


/**
 * Reference to a field of type 'materialUnit[]'
 */
export type ListEnummaterialUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'materialUnit[]'>
    


/**
 * Reference to a field of type 'Permission'
 */
export type EnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission'>
    


/**
 * Reference to a field of type 'Permission[]'
 */
export type ListEnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  client?: Prisma.ClientOmit
  company?: Prisma.CompanyOmit
  costCode?: Prisma.CostCodeOmit
  cCTag?: Prisma.CCTagOmit
  crew?: Prisma.CrewOmit
  pdfDocument?: Prisma.PdfDocumentOmit
  documentTag?: Prisma.DocumentTagOmit
  equipment?: Prisma.EquipmentOmit
  equipmentVehicleInfo?: Prisma.EquipmentVehicleInfoOmit
  employeeEquipmentLog?: Prisma.EmployeeEquipmentLogOmit
  error?: Prisma.ErrorOmit
  formTemplate?: Prisma.FormTemplateOmit
  formGrouping?: Prisma.FormGroupingOmit
  formField?: Prisma.FormFieldOmit
  formFieldOption?: Prisma.FormFieldOptionOmit
  formSubmission?: Prisma.FormSubmissionOmit
  formApproval?: Prisma.FormApprovalOmit
  jobsite?: Prisma.JobsiteOmit
  report?: Prisma.ReportOmit
  reportRun?: Prisma.ReportRunOmit
  timeSheet?: Prisma.TimeSheetOmit
  maintenanceLog?: Prisma.MaintenanceLogOmit
  maintenance?: Prisma.MaintenanceOmit
  tascoLog?: Prisma.TascoLogOmit
  tascoMaterialTypes?: Prisma.TascoMaterialTypesOmit
  truckingLog?: Prisma.TruckingLogOmit
  truckLaborLogs?: Prisma.TruckLaborLogsOmit
  stateMileage?: Prisma.StateMileageOmit
  material?: Prisma.MaterialOmit
  refuelLog?: Prisma.RefuelLogOmit
  equipmentHauled?: Prisma.EquipmentHauledOmit
  user?: Prisma.UserOmit
  userSettings?: Prisma.UserSettingsOmit
  contacts?: Prisma.ContactsOmit
  passwordResetToken?: Prisma.PasswordResetTokenOmit
  accountSetupToken?: Prisma.AccountSetupTokenOmit
  address?: Prisma.AddressOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

