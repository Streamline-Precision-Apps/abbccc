//  Time sheet that integrates with the accounting software. Accounting Software Data: {|submitDate | Form Id | empl ID| Date| ProfitID(jobsite)| CostCode| NU | FP| Start Time| END Time| Job Description | Duration |}
model TimeSheets {
    submitDate    DateTime   @default(now())
    date          DateTime   @db.Date //two dates are in the accounting software, for easy conversion they are implemented here
    id            String     @id @default(uuid())
    userId        String
    jobsiteId     String // this will need to store options for jobsites and equipment
    costcode      String // this is for tracking cost amounts in company
    nu            String     @default("nu") // non union {} default
    Fp            String     @default("fp") // field personal
    startTime     DateTime
    endTime       DateTime?
    comments      String? // comment for reporting what they did that day
    statusComment String? // manager comment for reporting why they approved or rejected the timesheet
    status        FormStatus @default(PENDING) // approving of the form
    workType      WorkType // this was created to help filter the timesheet by work type

    // links to other tables in schema
    tascoLogs             TascoLogs[]
    MaintenanceLogs       MaintenanceLogs[]
    TruckingLogs          TruckingLogs[]
    EmployeeEquipmentLogs EmployeeEquipmentLogs[]
    user                  Users                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    jobsite               Jobsites                @relation(fields: [jobsiteId], references: [qrId])
}

//--------------------------------------------------------------------------------------------------------------------------------
/**
 * This section collects data from each Engineer to create a timesheet for the day and demonstrate the work they have done
 */
// logs to keep track of what each engineer has done.
model MaintenanceLogs {
    id            String    @id @default(uuid())
    timeSheetsId  String
    userId        String
    maintenanceId String
    startTime     DateTime
    endTime       DateTime?
    comment       String?

    users       Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
    TimeSheets  TimeSheets?  @relation(fields: [timeSheetsId], references: [id])
    Maintenance Maintenance? @relation(fields: [maintenanceId], references: [id])
}

model Maintenance {
    id                 String    @id @default(uuid())
    equipmentId        String
    equipmentIssue     String?
    diagnosisProblem   String?
    solution           String?
    totalHoursLaboured Float? // total hours of employee that worked on the job
    createdAt          DateTime  @default(now())
    priority           Priority // level of priority
    delay              DateTime? // this shows priority as delay if the date has not passed
    repaired           Boolean   @default(false) // finished request are marked as repaired

    Equipment       Equipment         @relation(fields: [equipmentId], references: [id])
    MaintenanceLogs MaintenanceLogs[]
}

//--------------------------------------------------------------------------------------------------------------------------------
/**
 * This section collects data from each Tasco Worker to create a timesheet for the day and demonstrate the work they have done
 */
// keeps track of All tasco work in one management table 
model TascoLogs {
    id           String     @id @default(uuid())
    timeSheetsId String // link to timesheet
    shiftType    String
    startTime    DateTime
    endTime      DateTime?
    equipmentId  String? // link to equipment 
    LaborType    String?
    materialType String? // depend on tasco type
    loadsHauled  Int?
    loadType     String? // uncovered, screened, etc
    loadWeight   Float?
    comments     String?
    createdAt    DateTime   @default(now())
    completed    Boolean    @default(false)
    refueled     Refueled[] // link to refueled

    // connections to other tables
    Equipment  Equipment?  @relation(fields: [equipmentId], references: [id])
    TimeSheets TimeSheets? @relation(fields: [timeSheetsId], references: [id])
}

//--------------------------------------------------------------------------------------------------------------------------------
// logs to keep track of what each truckDriver has done.
model TruckingLogs {
    id              String            @id @default(uuid())
    taskName        String? // auto default to drive or operator
    equipmentId     String? // this is the equipment id vehicle id
    startingMileage Int
    endingMileage   Int?
    startTime       DateTime
    endTime         DateTime?
    stateMileage    StateMileage[]
    Refueled        Refueled[]
    Material        Material[]
    EquipmentHauled EquipmentHauled[]
    createdAt       DateTime          @default(now())
    comment         String?
    netWeight       Float?

    equipment    Equipment?  @relation(fields: [equipmentId], references: [id])
    TimeSheets   TimeSheets? @relation(fields: [timeSheetsId], references: [id])
    timeSheetsId String?
}

//--------------------------------------------------------------------------------------------------------------------------------
/**
 * This section collects data from each Tasco Worker to create a timesheet for the day and demonstrate the work they have done
 */
model StateMileage {
    id               String   @id @default(uuid())
    truckingLogsId   String
    state            String
    stateLineMileage Int
    createdAt        DateTime @default(now())

    TruckingLogs TruckingLogs? @relation(fields: [truckingLogsId], references: [id])
}

//--------------------------------------------------------------------------------------------------------------------------------
model Material {
    id             String   @id @default(uuid())
    truckingLogsId String
    name           String
    // quantity       Int?  //potential to show quantity of material later
    createdAt      DateTime @default(now())

    TruckingLogs TruckingLogs? @relation(fields: [truckingLogsId], references: [id])
}

//--------------------------------------------------------------------------------------------------------------------------------
model EquipmentHauled {
    id             String   @id @default(uuid())
    truckingLogsId String
    equipmentId    String
    createdAt      DateTime @default(now())

    TruckingLogs TruckingLogs? @relation(fields: [truckingLogsId], references: [id])
    equipment    Equipment?    @relation(fields: [equipmentId], references: [id])
}
