model TimeSheet {
  id                    String                 @id @default(uuid())
  date                  DateTime
  userId                String
  jobsiteId             String
  costcode              String
  nu                    String                 @default("nu")
  Fp                    String                 @default("fp")
  startTime             DateTime
  endTime               DateTime?
  comment               String?
  statusComment         String?
  location              String?
  status                TimeSheetStatus        @default(PENDING)
  workType              WorkType
  editedByUserId        String?
  newTimeSheetId        String?
  createdByAdmin        Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  EmployeeEquipmentLogs EmployeeEquipmentLog[]
  MaintenanceLogs       MaintenanceLog[]
  TascoLogs             TascoLog[]
  CostCode              CostCode               @relation(fields: [costcode], references: [name])
  Jobsite               Jobsite                @relation(fields: [jobsiteId], references: [id])
  User                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  TruckingLogs          TruckingLog[]
}

model MaintenanceLog {
  id            String      @id @default(uuid())
  timeSheetId   String
  userId        String
  maintenanceId String
  startTime     DateTime
  endTime       DateTime?
  comment       String?
  Maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])
  TimeSheet     TimeSheet   @relation(fields: [timeSheetId], references: [id], onDelete: Cascade)
  User          User        @relation(fields: [userId], references: [id])
}

model Maintenance {
  id                     String                @id @default(uuid())
  equipmentId            String
  equipmentIssue         String?
  employeeEquipmentLogId String?               @unique
  additionalInfo         String?
  location               String?
  problemDiagnosis       String?
  solution               String?
  totalHoursLaboured     Float?
  createdAt              DateTime              @default(now())
  priority               Priority
  delay                  DateTime?
  delayReasoning         String?
  repaired               Boolean               @default(false)
  selected               Boolean               @default(false)
  hasBeenDelayed         Boolean               @default(false)
  createdBy              String?
  EmployeeEquipmentLog   EmployeeEquipmentLog? @relation(fields: [employeeEquipmentLogId], references: [id])
  Equipment              Equipment             @relation(fields: [equipmentId], references: [id])
  MaintenanceLogs        MaintenanceLog[]
}

model TascoLog {
  id                 String              @id @default(uuid())
  timeSheetId        String
  shiftType          String
  equipmentId        String?
  laborType          String?
  materialType       String?
  LoadQuantity       Int                 @default(0)
  RefuelLogs         RefuelLog[]
  Equipment          Equipment?          @relation(fields: [equipmentId], references: [id])
  TascoMaterialTypes TascoMaterialTypes? @relation(fields: [materialType], references: [name], onDelete: Cascade)
  TimeSheet          TimeSheet           @relation(fields: [timeSheetId], references: [id], onDelete: Cascade)
}

model TascoMaterialTypes {
  id       String     @id @default(uuid())
  name     String     @unique
  TascoLog TascoLog[]
}

model TruckingLog {
  id                String            @id @default(uuid())
  timeSheetId       String
  laborType         String // e.g. "trucking", "hauling", "delivery"
  taskName          String? // No integration with task names
  equipmentId       String?
  startingMileage   Int?
  endingMileage     Int?
  truckLaborLogId   String?
  EquipmentHauled   EquipmentHauled[]
  Materials         Material[]
  RefuelLogs        RefuelLog[]
  StateMileages     StateMileage[]
  TruckingLaborLogs TruckLaborLogs[] // Logs for labor time spent on trucking
  Equipment         Equipment?        @relation(fields: [equipmentId], references: [id])
  TimeSheet         TimeSheet         @relation(fields: [timeSheetId], references: [id], onDelete: Cascade)
}

// is it worth it to explain the Truck labor Logs?
// All I get out of this is alloting time 
model TruckLaborLogs {
  id            String       @id @default(uuid())
  truckingLogId String?
  type          String
  startTime     DateTime
  endTime       DateTime?
  TruckingLog   TruckingLog? @relation(fields: [truckingLogId], references: [id], onDelete: Cascade)
}

model StateMileage {
  id               String      @id @default(uuid())
  truckingLogId    String
  state            String?
  stateLineMileage Int?
  TruckingLog      TruckingLog @relation(fields: [truckingLogId], references: [id], onDelete: Cascade)
}

model Material {
  id                 String      @id @default(uuid())
  truckingLogId      String
  LocationOfMaterial String?
  name               String?
  quantity           Int? // removing quantity
  materialWeight     Float?
  lightWeight        Float?
  grossWeight        Float?
  loadType           LoadType?
  createdAt          DateTime?   @default(now())
  TruckingLog        TruckingLog @relation(fields: [truckingLogId], references: [id], onDelete: Cascade)
}

model RefuelLog {
  id                     String                @id @default(uuid())
  employeeEquipmentLogId String?               @unique
  truckingLogId          String?
  tascoLogId             String?
  gallonsRefueled        Float?
  milesAtFueling         Int?
  EmployeeEquipmentLog   EmployeeEquipmentLog? @relation(fields: [employeeEquipmentLogId], references: [id])
  TascoLog               TascoLog?             @relation(fields: [tascoLogId], references: [id])
  TruckingLog            TruckingLog?          @relation(fields: [truckingLogId], references: [id], onDelete: Cascade)
}
