// Need these to function with client and db
generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "prisma-zod-generator"
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//-------------------------------------------------------------------------------------------------//

// employee account permission provide the correct view of the product!
// this enum represents all the role levels in order to maintain a hiearchy of 
// User -> Manager -> Admin -> SuperAdmin
//-------------------------------------------------------------------------------------------------//

// USER: Base level operation to the app can only Read, and write over files 
// but can not edit stored data
//-------------------------------------------------------------------------------------------------//

// MANAGERS: given to trustworthy individuals that lead teams. They have access
// to team submitted records and can alter them before submitting them to the office,
// they also have access to QR generation to clock in and get team clocked in if a 
//  qrcode was missing. 
// Provides the answer to the question what do I do If I have no QR code on me?
//-------------------------------------------------------------------------------------------------//

// ADMIN: Given to people that need full access to certain items but not sensitive data
// can view the app as a dashboard, see all projects underneath their supervision and lastly 
// they can use also export data via CSV files
// Later developments: include Looking at desired staticstics and creation and modification of forms 
//-------------------------------------------------------------------------------------------------//

//SUPER ADMIN: Given All privelages and rights to change data and update things in the database. 
//-------------------------------------------------------------------------------------------------//

enum Permission {
  USER
  MANAGER
  ADMIN
  SUPERADMIN
}

// Holds the login and general app data of employee but not all the data
model Users {
  id              String     @id @default(cuid())
  firstName       String
  lastName        String
  username        String     @unique
  password        String
  signature       String?    @db.Text
  DOB             String
  truckView       Boolean
  tascoView       Boolean
  laborView       Boolean
  mechanicView    Boolean
  permission      Permission
  image           String?
  activeEmployee  Boolean    @default(true)
  startDate       DateTime?  @default(now())
  terminationDate DateTime?
  accountSetup    Boolean    @default(false)

  crewMembers         CrewMembers[]
  timeSheet           TimeSheets[]
  equipmentLogs       EmployeeEquipmentLogs[]
  contacts            Contacts[]
  userSettings        UserSettings[]
  userTrainings       UserTrainings[]
  injuryForms         InjuryForms[]
  timeoffRequestForms timeoffRequestForms[]
}

model UserSettings {
  id               String  @id @default(cuid())
  userId           String  @unique
  language         String  @default("en")
  approvedRequests Boolean @default(false)
  timeOffRequests  Boolean @default(false)
  generalReminders Boolean @default(false)
  biometric        Boolean @default(false)
  cameraAccess     Boolean @default(false)
  locationAccess   Boolean @default(false)

  user Users @relation(fields: [userId], references: [id])
}

//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

// Provides Titles of trains and wheter they have been completed this helps the supervisor see which ones they completed. 
model Trainings {
  id            String          @id @default(cuid())
  name          String
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userTrainings UserTrainings[]
}

// This show the employee, the trainings they have completed and the total assigned trainings that are required for the year. 
model UserTrainings {
  userId      String
  trainingId  String  @unique
  isCompleted Boolean @default(false)

  Training Trainings @relation(fields: [trainingId], references: [id])
  User     Users     @relation(fields: [userId], references: [id])

  @@id(name: "id", [trainingId, userId])
}

//-------------------------------------------------------------------------------------------------//

// Holds a uniquely generated QR code that can be read to distinct jobsite and general jobsite information 
model Jobsites {
  id           String     @id @default(cuid())
  qrId         String     @unique @default(cuid()) // qr-id
  isActive     Boolean    @default(true)
  status       FormStatus @default(PENDING)
  name         String
  streetNumber String?
  streetName   String?
  city         String?
  state        String?
  country      String?
  description  String
  comment      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  costCode              CostCodes[]
  address               Addresses[]
  employeeEquipmentLogs EmployeeEquipmentLogs[]
  crewjobsites          CrewJobsites[]
  TimeSheet             TimeSheets[]
}

//  Time sheet that integrates with the accounting software. Accounting Software Data: {|submitDate | Form Id | empl ID| Date| ProfitID(jobsite)| CostCode| NU | FP| Start Time| END Time| Job Description | Duration |}
model TimeSheets {
  submitDate          DateTime   @default(now())
  id                  Int        @id @default(autoincrement())
  userId              String
  date                DateTime   @db.Date //two dates are in the accounting software, for easy conversion they are implemented here
  jobsiteId           String
  costcode            String
  nu                  String     @default("nu") // non union {} default
  Fp                  String     @default("fp") // field personal
  vehicleId           Int?
  startTime           DateTime
  endTime             DateTime?
  duration            Float?
  startingMileage     Int?
  endingMileage       Int?
  leftIdaho           Boolean?   @default(false)
  equipmentHauled     String?
  materialsHauled     String?
  hauledLoadsQuantity Int?
  refuelingGallons    Float?
  timeSheetComments   String? // theses will be not nulled in the future
  status              FormStatus @default(PENDING)

  user    Users    @relation(fields: [userId], references: [id])
  jobsite Jobsites @relation(fields: [jobsiteId], references: [qrId])
}

//tracks notes on the used equipment, who used it, where, the condition its in, and for how long
//tracks notes on the used equipment, who used it, where, the condition its in, and for how long
model EmployeeEquipmentLogs {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  equipmentId String
  jobsiteId   String
  employeeId  String
  startTime   DateTime
  endTime     DateTime?
  duration    Float?
  isRefueled  Boolean   @default(false) // added to save a state of fuel to a user this can be refrenced later for a timesheet submit.
  fuelUsed    Float?    @default(0.0)
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  isCompleted Boolean    @default(false) // equipment is filled out all the fields are happy determines color
  isSubmitted Boolean    @default(false) // marks true when form is submitted at end of day
  status      FormStatus @default(PENDING) // approving of the form

  employee  Users      @relation(fields: [employeeId], references: [id])
  Job       Jobsites   @relation(fields: [jobsiteId], references: [qrId])
  Equipment Equipment? @relation(fields: [equipmentId], references: [id])
}

// provides helpful tags to filter the equipment section, this will help with qr code reading too. 
enum Tags {
  TRUCK
  TRAILER
  EQUIPMENT
  VEHICLE
}

// This collection stores information about all company equipment. It includes a wide range of items such as company vehicles, trailers, handheld equipment, and heavy machinery. The purpose is to keep track of all assets the company owns and maintains.
model Equipment {
  id                     String          @id @default(cuid())
  qrId                   String          @unique @default(cuid())
  name                   String
  description            String
  equipmentTag           Tags            @default(EQUIPMENT)
  lastInspection         DateTime?
  lastRepair             DateTime?
  status                 EquipmentStatus @default(OPERATIONAL)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  make                   String?
  model                  String?
  year                   String?
  licensePlate           String?
  registrationExpiration DateTime?
  mileage                Int?
  isActive               Boolean         @default(true)
  image                  String?
  inUse                  Boolean         @default(false)

  employeeEquipmentLogs EmployeeEquipmentLogs[]
}

enum EquipmentStatus {
  OPERATIONAL
  NEEDS_REPAIR
  NEEDS_MAINTENANCE
}

// This Table stores a collection of company Estimating codes. The purpose is to help in billing process. Very import for our project.
model CostCodes {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  type        String // set to an enum later,type is how we can filter the costcodes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  Jobsite     Jobsites[]
}

// crew data for seeing the entire crew and enabling site linking it also has direct access to the employeed time cards, and some desire profile settings
model CrewMembers {
  supervisor Boolean @default(false) // if the crew member is a supervisor or not
  employeeId String
  crewId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crew Crews @relation(fields: [crewId], references: [id])
  user Users @relation(fields: [employeeId], references: [id])

  @@id(name: "id", [crewId, employeeId])
}

// the crew model assigns creates a crew and assigns an employee to be the lead
model Crews {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  crewMembers CrewMembers[]
  jobsites    CrewJobsites[]
}

// provides a many to many relationship to crew and jobsite. This enables us to assign a crew to a jobsite which can possible filter out the complexity of costcodes
model CrewJobsites {
  id        Int      @id @default(autoincrement())
  crewId    Int
  jobsiteId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  crew      Crews    @relation(fields: [crewId], references: [id])
  jobsite   Jobsites @relation(fields: [jobsiteId], references: [qrId])
}

//Employee contact information section. Purpose get ahold of them or their emergency contact. 
model Contacts {
  id                     Int      @id @default(autoincrement())
  employeeId             String   @unique
  phoneNumber            String
  email                  String?
  emergencyContact       String?
  emergencyContactNumber String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   Users    @relation(fields: [employeeId], references: [id])
}

// Address Assigner makes a many to many relation ship from employees to there address

// the purpose of the address table is to hold all addresses of sites, employees, and other data necessary for app, potetially using geolocation to access sites down the line. 
model Addresses {
  id        Int      @id @default(autoincrement())
  address   String
  city      String
  state     String
  zipCode   Int
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobsite Jobsites[]
}

// Provides options for form status column
enum FormStatus {
  PENDING
  APPROVED
  DENIED
}

enum IsActive {
  ACTIVE
  INACTIVE
}

// holds all possible form types
enum FormType {
  MEDICAL
  INSPECTION
  MANAGER
  LEAVE
  SAFETY
  INJURY
}

// packing this into a json later V V V V V V
model InjuryForms {
  id                  Int      @id @default(autoincrement())
  userId              String
  submitDate          DateTime @default(now())
  date                DateTime @db.Date
  contactedSupervisor Boolean  @default(false)
  incidentDescription String
  signature           String?  @db.Text
  verifyFormSignature Boolean  @default(false)
  user                Users    @relation(fields: [userId], references: [id])
}

model timeoffRequestForms {
  id                 Int        @id @default(autoincrement())
  date               DateTime
  requestedStartDate DateTime
  requestedEndDate   DateTime
  requestType        String //make enum later
  comment            String
  managerComment     String?
  status             FormStatus @default(PENDING)
  employeeId         String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  decidedBy          String? // ment to hold the individual who approved the timesheet

  employee Users @relation(fields: [employeeId], references: [id])
}
