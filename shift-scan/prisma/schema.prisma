// Need these to function with client and db
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

//-------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------//
// employee account permission provide the correct view of the product!
// this enum represents all the role levels in order to maintain a hiearchy of 
// User -> Manager -> projectManager -> Admin -> SuperAdmin
//-------------------------------------------------------------------------------------------------//
// USER: Base level operation to the app can only Read, and write over files 
// but can not edit stored data
//-------------------------------------------------------------------------------------------------//
// MANAGERS: given to trustworthy individuals that lead teams. They have access
// to team submitted records and can alter them before submitting them to the office,
// they also have access to QR generation to clock in and get team clocked in if a 
//  qrcode was missing. 
// Provides the answer to the question what do I do If I have no QR code on me?
//-------------------------------------------------------------------------------------------------//
// ADMIN: Given to people that need full access to certain items but not sensitive data
// can view the app as a dashboard, see all projects underneath their supervision and lastly 
// they can use also export data via CSV files
// Later developments: include Looking at desired staticstics and creation and modification of forms 
//-------------------------------------------------------------------------------------------------//

//SUPER ADMIN: Given All privelages and rights to change data and update things in the database. 
//-------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------//
enum permission {
  USER
  MANAGER
  PROJECTMANAGER
  ADMIN
  SUPERADMIN
}

//-------------------------------------------------------------------------------------------------//
// Truck You see a Truck Manger widget
// Tasco sees Tasco manager widget
// Base sees general widgets
//-------------------------------------------------------------------------------------------------//
enum formStatus {
  PENDING
  APPROVED
  DENIED
}

enum tags {
  Truck
  Trailer
  Equipment
}

//-------------------------------------------------------------------------------------------------//
model User {
  id            String     @id @default(cuid())
  firstName     String
  lastName      String
  username      String     @unique
  password      String
  truck_view    Boolean
  tasco_view    Boolean
  labor_view    Boolean
  mechanic_view Boolean
  permission    permission
  email         String     @unique
  emailVerified DateTime?  @map("email_verified")
  phone         String
  image         String?

  crewMembers CrewMember[]
  accounts    Account[]
  sessions    Session[]
  Employee    Employee[]

  @@map("users")
}

// use for next auth beta@5.0 we have 4.3  ignore for now
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/// cuts off right here

//-------------------------------------------------------------------------------------------------//
// employee model is what data/information they would hold
// why is this needed for the app/ it is needed as the central information hub of the relational database
// the employee is link to what crew they are apart of, their time card, their account, the equipment they log
// the position title they have in a company and their contact information, and address to send check to
// with out this table the app wouldnt work.
model Employee {
  id               Int       @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  dob              DateTime
  start_date       DateTime? //set null for people who dont remember start date
  termination_date DateTime?
  availability     String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  forms         Form[]
  timeSheet     TimeSheet[]
  equipmentLogs EmployeeEquipmentLog[]
  positions     EmployeePosition[]
  contacts      ContactJoin[]
  addresses     AddressEmployee[]
  users         User[]
  CrewMember    CrewMember[]
}

//----------------------------------------------------------------------------------------------------------------------//
// Jobbsite section
// What problem does this solve?
// This table creates or allows creations of jobsite, allows the company to pair costcodes with jobsites
// to lower the amount of effort it takes to find each costcode. tells the company when they started / 
// created the project and enables a way to save an address to a site, and assign a team to a jobsite. A
// project manager will be able to view everyone that is assigned to his site rather then a personal team. 
//----------------------------------------------------------------------------------------------------------------------//
model Jobsite {
  id             Int      @id @default(autoincrement())
  qr_id          String   @unique
  jobsite_name   String
  jobsite_active Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  costCode              CostCode[]
  addresses             Address[]
  employeeEquipmentLogs EmployeeEquipmentLog[]
  jobsites              CrewJobsite[]
}

//----------------------------------------------------------------------------------------------------------------------//
// the app would need a function a prisma call to call all timesheets by employee_id, 
// filtering down by pay period, and then buy day for that pay period
//
// this database then will be exported and is designed to be almost one to one with the accounting software. 
// accounting software is 
// |submitDate | Form Id | empl ID| Date| ProfitID(jobsite)|
// | CostCode| NU | FP| Start Time| END Time| Job Description | Duration |

model TimeSheet {
  submit_date           DateTime @default(now())
  id                    Int      @id @default(autoincrement()) //in viewpoint this tracks the time form to come in, driver, tasco, and regular
  form_id               Int      @unique
  employee_id           Int
  date                  DateTime @default(now()) //two dates are in the accounting software, for easy conversion they are implemented here
  jobsite_id            Int
  costcode              String
  nu                    String   @default("nu") // non union {} default
  Fp                    String   @default("fp") // field personal
  vehicle_id            Int?
  start_time            DateTime
  end_time              DateTime
  total_break_time      Float?
  duration              Float
  starting_mileage      Int?
  ending_mileage        Int?
  left_idaho            Boolean? @default(false)
  equipment_hauled      String?
  materials_hauled      String?
  hauled_loads_quantity Int?
  refueling_gallons     Float?
  timesheet_comments    String? // theses will be not nulled in the future
  app_comment           String? //this is a backend ai we want to develope to do filtered comments

  employee Employee @relation(fields: [employee_id], references: [id])
}

//----------------------------------------------------------------------------------------------------------------------//
// what does having a seperate vehicle table do? It allows us as a compny to make a vehicle QrID unique for the qrcode to scan
// it provides a way to log a vehicle under equipment log
// in this log we enable the employee to record what there equipment is doing and how well it is.
// eventually we want the employee to be able to update the status of the equipment or rather report a 
// broken asset  that will be submitted via a form to the office to handle the fixing procedure. 
// this also share with jobsite the equipment and the time it was used 
//----------------------------------------------------------------------------------------------------------------------//
model EmployeeEquipmentLog {
  id               Int       @id @default(autoincrement())
  equipment_id     Int
  jobsite_id       Int
  employee_id      Int
  start_time       DateTime
  end_time         DateTime?
  equipment_notes  String?
  equipment_status String    @default("Operational")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  employee  Employee   @relation(fields: [employee_id], references: [id])
  Job       Jobsite    @relation(fields: [jobsite_id], references: [id])
  Equipment Equipment? @relation(fields: [equipment_id], references: [id])
}

//----------------------------------------------------------------------------------------------------------------------//
//must have a unique QR for equipment status to be applied
//do we need to limit scanned equipment?  equipmentStatus 
// designed to help filter equipment by page rendering -> equipment_tag
// isvehicle and is trailer will allow the qrcode to work
// added a tag section to prevent creation of a new category so the tags above have that equipment
// included ways to monitor equipment and in the future we can work towards notifications on when to service them
// and when something will expire to keep up to date on our equipment
//----------------------------------------------------------------------------------------------------------------------//
model Equipment {
  id              Int       @id @default(autoincrement())
  is_vehicle      Boolean
  is_trailer      Boolean
  qr_id           String    @unique
  name            String
  description     String
  status          Boolean
  equipment_tag   tags
  last_inspection DateTime?
  last_repair     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  make            String?
  model           String?
  year            String?
  license_plate   String?
  is_registered   DateTime?
  mileage         Int?
  is_active       Boolean   @default(true)

  employeeEquipmentLogs EmployeeEquipmentLog[]
}

//----------------------------------------------------------------------------------------------------------------------//
// this sections links with the site and will ultimately export all its site data to the time card app
//provides a relationship with jobsites and costcodes cost codes to a jobsite are one to one due to the method we will use of 
//jobsites however we have many costcodes
// model CostCodeJobsite {
//   jobsite_id   Int
//   cost_code_id Int

//   jobsite  Jobsite  @relation(fields: [jobsite_id], references: [id])
//   costCode CostCode @relation(fields: [cost_code_id], references: [id])

//   @@id([jobsite_id, cost_code_id])
// }

// provide a seperate method to record a cost code and eventually assign it to a jobsite
model CostCode {
  id                    Int      @id @default(autoincrement())
  cost_code             String
  cost_code_description String
  cost_code_type        String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  Jobsite Jobsite[]
}

//----------------------------------------------------------------------------------------------------------------------//
// crew data for seeing the entire crew and enabling site linking it also has direct access to the employeed time cards, and some desire profile settings
model CrewMember {
  id          Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id Int
  crew        Crew     @relation(fields: [crew_id], references: [id])
  crew_id     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

// the crew model assigns member to a crew, it also reports  
model Crew {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  crewMembers CrewMember[]
  jobsites    CrewJobsite[]
}

// provides a unique many to many relationship to the crew and jobsites they also can only have one unique connection vis the 
// @unique variable preventing duplication
// we want this relation ship so that project managers can see the full teams of people for his site. 
model CrewJobsite {
  id         Int      @id @default(autoincrement())
  crew_id    Int
  jobsite_id Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  crew       Crew     @relation(fields: [crew_id], references: [id])
  jobsite    Jobsite  @relation(fields: [jobsite_id], references: [id])
}

//----------------------------------------------------------------------------------------------------------------------//
// employee positions
model EmployeePosition {
  id          Int      @id @default(autoincrement())
  employee_id Int
  position_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employee_id], references: [id])
  position    Position @relation(fields: [position_id], references: [id])
}

model Position {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  employeePositions EmployeePosition[]
}

//----------------------------------------------------------------------------------------------------------------------//

//----------------------------------------------------------------------------------------------------------------------//
//phone number models

model Contact {
  id                   Int           @id @default(autoincrement())
  phone_number         String
  email                String?
  emergency_contact    String?
  emergency_contact_no String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  contactJoin          ContactJoin[]
}

model ContactJoin {
  id          Int      @id @default(autoincrement())
  contact_id  Int
  employee_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contact  Contact  @relation(fields: [contact_id], references: [id])
  employee Employee @relation(fields: [employee_id], references: [id])
}

//----------------------------------------------------------------------------------------------------------------------//
// Address Assigner makes a many to many relation ship from employees to there address

model AddressEmployee {
  id          Int      @id @default(autoincrement())
  address_id  Int
  employee_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  address     Address  @relation(fields: [address_id], references: [id])
  employee    Employee @relation(fields: [employee_id], references: [id])
}

// model AddressJobsite {
//   address_id Int
//   jobsite_id Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   address    Address  @relation(fields: [address_id], references: [id])
//   jobsite    Jobsite  @relation(fields: [jobsite_id], references: [id])

//   @@unique([address_id, jobsite_id])
// }

// the purpose of the address table is to hold all addresses of sites, employees, and other data necessary for app,
// potetially using geolocation to access sites down the line. 
model Address {
  id        Int      @id @default(autoincrement())
  address   String
  city      String
  state     String
  zipcode   Int
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee AddressEmployee[]
  jobsite  Jobsite[]
}

//----------------------------------------------------------------------------------------------------------------------//

//----------------------------------------------------------------------------------------------------------------------//
// one form in our db part of settings
enum formType {
  MEDICAL
  INSPECTION
  MANAGER
  LEAVE
  SAFETY
}

// model timeRequestForms{
//   id                    Int        @id @default(autoincrement())
//   employee_id           Int
//   start_date_requested  DateTime
//   end_date_requested    DateTime
//   time_request_type     String
//   time_request_comments String
//   status                formStatus @default(PENDING)
//   employee              Employee   @relation(fields: [employee_id], references: [id])

// }

model Form {
  id        Int        @id @default(autoincrement())
  type      formType //label to identify type of form 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    formStatus @default(PENDING)
  employee  Employee   @relation(fields: [id], references: [id])
}

model FormStructure {
  id    Int     @id @default(autoincrement())
  title String
  box_1 Boolean @default(false)
  box_2 Boolean @default(false)
  box_3 Boolean @default(false)
  box_4 Boolean @default(false)
  box_5 Boolean @default(false)
  box_6 Boolean @default(false)
  box_7 Boolean @default(false)
  box_8 Boolean @default(false)
  box_9 Boolean @default(false)
}
